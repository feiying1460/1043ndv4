cscope 15 $HOME/Documents/tpsdk/trunk/tp/generic/src/packages/multimedia/minidlna -q 0000002986 0000464945
	@albumart.c

18 
	~"c⁄fig.h
"

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<dúít.h
>

25 
	~<sys/∑øm.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/∑øm.h
>

28 
	~<libgí.h
>

29 
	~<£tjmp.h
>

30 
	~<î∫o.h
>

32 
	~<j≥glib.h
>

34 
	~"u≤pglobÆv¨s.h
"

35 
	~"Æbum¨t.h
"

36 
	~"sql.h
"

37 
	~"utûs.h
"

38 
	~"image_utûs.h
"

39 
	~"log.h
"

42 
	$¨t_ˇche_exi°s
(c⁄° *
‹ig_∑th
, **
ˇche_fûe
)

44 if–
	`a•rötf
(
ˇche_fûe
, "%s/¨t_ˇche%s", 
db_∑th
, 
‹ig_∑th
) < 0 )

46 *
ˇche_fûe
 = 
NULL
;

49 
	`°r˝y
(
	`°rchr
(*
ˇche_fûe
, '\0')-4, ".jpg");

51  (!
	`ac˚ss
(*
ˇche_fûe
, 
F_OK
));

52 
	}
}

55 
	$ßve_ªsized_Æbum_¨t
(
image_s
 *
im§c
, c⁄° *
∑th
)

57 
d°w
, 
d°h
;

58 
image_s
 *
imd°
;

59 *
ˇche_fûe
;

60 
ˇche_dú
[
MAXPATHLEN
];

62 if–!
im§c
 )

63  
NULL
;

65 if–
	`¨t_ˇche_exi°s
(
∑th
, &
ˇche_fûe
) )

66  
ˇche_fûe
;

68 
	`°∫˝yt
(
ˇche_dú
, 
ˇche_fûe
, (cache_dir));

69 
	`make_dú
(
	`dú«me
(
ˇche_dú
), 
S_IRWXU
|
S_IRGRP
|
S_IXGRP
|
S_IROTH
|
S_IXOTH
);

71 if–
im§c
->
width
 > im§c->
height
 )

73 
d°w
 = 160;

74 
d°h
 = (
im§c
->
height
<<8Ë/ ((im§c->
width
<<8)/160);

78 
d°w
 = (
im§c
->
width
<<8Ë/ ((im§c->
height
<<8)/160);

79 
d°h
 = 160;

81 
imd°
 = 
	`image_ªsize
(
im§c
, 
d°w
, 
d°h
);

82 if–!
imd°
 )

83 
îr‹
;

85 if–
	`image_ßve_to_j≥g_fûe
(
imd°
, 
ˇche_fûe
) == 0 )

87 
	`image_‰ì
(
imd°
);

88  
ˇche_fûe
;

90 
îr‹
:

91 
	`‰ì
(
ˇche_fûe
);

92  
NULL
;

93 
	}
}

97 
	$upd©e_if_Æbum_¨t
(c⁄° *
∑th
)

99 *
dú
;

100 *
m©ch
;

101 
fûe
[
MAXPATHLEN
];

102 
Â©h
[
MAXPATHLEN
];

103 
d∑th
[
MAXPATHLEN
];

104 
ncmp
 = 0;

105 
Æbum_¨t
;

106 
DIR
 *
dh
;

107 
dúít
 *
dp
;

108 
fûe_ty≥s
 
ty≥
 = 
TYPE_UNKNOWN
;

109 
öt64_t
 
¨t_id
 = 0;

110 
ªt
;

112 
	`°∫˝yt
(
Â©h
, 
∑th
, (fpath));

113 
m©ch
 = 
	`ba£«me
(
Â©h
);

115 if–
	`íds_wôh
(
m©ch
, ".cover.jpg") )

117 
ncmp
 = 
	`°æí
(
m©ch
)-10;

121 
ncmp
 = 
	`°ºchr
(
m©ch
, '.') - match;

124 
Æbum_¨t
 = 
	`is_Æbum_¨t
(
m©ch
);

126 
	`°∫˝yt
(
d∑th
, 
∑th
, (dpath));

127 
dú
 = 
	`dú«me
(
d∑th
);

128 
dh
 = 
	`›ídú
(
dú
);

129 if–!
dh
 )

131 (
dp
 = 
	`ªaddú
(
dh
)Ë!
NULL
)

133  
dp
->
d_ty≥
 )

135 
DT_REG
:

136 
ty≥
 = 
TYPE_FILE
;

138 
DT_LNK
:

139 
DT_UNKNOWN
:

140 
	`¢¥ötf
(
fûe
, (fûe), "%s/%s", 
dú
, 
dp
->
d_«me
);

141 
ty≥
 = 
	`ªsﬁve_unknown_ty≥
(
fûe
, 
ALL_MEDIA
);

144 
ty≥
 = 
TYPE_UNKNOWN
;

147 if–
ty≥
 !
TYPE_FILE
 )

149 if–(*(
dp
->
d_«me
) != '.') &&

150 (
	`is_video
(
dp
->
d_«me
Ë|| 
	`is_audio
(dp->d_name)) &&

151 (
Æbum_¨t
 || 
	`°∫cmp
(
dp
->
d_«me
, 
m©ch
, 
ncmp
) == 0) )

153 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "New fûê%†look†likêcovîáπ f‹ %s\n", 
∑th
, 
dp
->
d_«me
);

154 
	`¢¥ötf
(
fûe
, (fûe), "%s/%s", 
dú
, 
dp
->
d_«me
);

155 
¨t_id
 = 
	`föd_Æbum_¨t
(
fûe
, 
NULL
, 0);

156 
ªt
 = 
	`sql_exec
(
db
, "UPDATE DETAILS së ALBUM_ART = %Œd whîêPATH = '%q'", ()
¨t_id
, 
fûe
);

157 if–
ªt
 !
SQLITE_OK
 )

158 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "Eº‹ sëtög %†a†covîáπ f‹ %s\n", 
m©ch
, 
dp
->
d_«me
);

161 
	`˛o£dú
(
dh
);

162 
	}
}

165 
	$check_embedded_¨t
(c⁄° *
∑th
, c⁄° *
image_d©a
, 
image_size
)

167 
width
 = 0, 
height
 = 0;

168 *
¨t_∑th
 = 
NULL
;

169 *
ˇche_dú
;

170 
FILE
 *
d°fûe
;

171 
image_s
 *
im§c
;

172 
œ°_∑th
[
PATH_MAX
];

173 
œ°_hash
 = 0;

174 
œ°_suc˚ss
 = 0;

175 
hash
;

177 if–!
image_d©a
 || !
image_size
 || !
∑th
 )

179  
NULL
;

183 
hash
 = 
	`DJBHash
(
image_d©a
, 
image_size
);

184 if–
hash
 =
œ°_hash
 )

186 if–!
œ°_suc˚ss
 )

187  
NULL
;

188 
	`¨t_ˇche_exi°s
(
∑th
, &
¨t_∑th
);

189 if–
	`lök
(
œ°_∑th
, 
¨t_∑th
) == 0 )

191 (
¨t_∑th
);

195 if–
î∫o
 =
ENOENT
 )

197 
ˇche_dú
 = 
	`°rdup
(
¨t_∑th
);

198 
	`make_dú
(
	`dú«me
(
ˇche_dú
), 
S_IRWXU
|
S_IRGRP
|
S_IXGRP
|
S_IROTH
|
S_IXOTH
);

199 
	`‰ì
(
ˇche_dú
);

200 if–
	`lök
(
œ°_∑th
, 
¨t_∑th
) == 0 )

201 (
¨t_∑th
);

203 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "Lökög %†tÿ%†Áûed [%s]\n", 
¨t_∑th
, 
œ°_∑th
, 
	`°ªº‹
(
î∫o
));

204 
	`‰ì
(
¨t_∑th
);

205 
¨t_∑th
 = 
NULL
;

208 
œ°_hash
 = 
hash
;

210 
im§c
 = 
	`image_√w_‰om_j≥g
(
NULL
, 0, 
image_d©a
, 
image_size
, 1, 
ROTATE_NONE
);

211 if–!
im§c
 )

213 
œ°_suc˚ss
 = 0;

214  
NULL
;

216 
width
 = 
im§c
->width;

217 
height
 = 
im§c
->height;

219 if–
width
 > 160 || 
height
 > 160 )

221 
¨t_∑th
 = 
	`ßve_ªsized_Æbum_¨t
(
im§c
, 
∑th
);

223 if–
width
 > 0 && 
height
 > 0 )

225 
size_t
 
nwrôãn
;

226 if–
	`¨t_ˇche_exi°s
(
∑th
, &
¨t_∑th
) )

227 
íd_¨t
;

228 
ˇche_dú
 = 
	`°rdup
(
¨t_∑th
);

229 
	`make_dú
(
	`dú«me
(
ˇche_dú
), 
S_IRWXU
|
S_IRGRP
|
S_IXGRP
|
S_IROTH
|
S_IXOTH
);

230 
	`‰ì
(
ˇche_dú
);

231 
d°fûe
 = 
	`f›í
(
¨t_∑th
, "w");

232 if–!
d°fûe
 )

234 
	`‰ì
(
¨t_∑th
);

235 
¨t_∑th
 = 
NULL
;

236 
íd_¨t
;

238 
nwrôãn
 = 
	`fwrôe
((*)
image_d©a
, 1, 
image_size
, 
d°fûe
);

239 
	`f˛o£
(
d°fûe
);

240 if–
nwrôãn
 !
image_size
 )

242 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "EmbeddedáπÉº‹: wrŸê%d/%d byãs\n", 
nwrôãn
, 
image_size
);

243 
	`ªmove
(
¨t_∑th
);

244 
	`‰ì
(
¨t_∑th
);

245 
¨t_∑th
 = 
NULL
;

246 
íd_¨t
;

249 
íd_¨t
:

250 
	`image_‰ì
(
im§c
);

251 if–!
¨t_∑th
 )

253 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "InvÆidÉmbeddedálbumáπ i¿%s\n", 
	`ba£«me
((*)
∑th
));

254 
œ°_suc˚ss
 = 0;

255  
NULL
;

257 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "FoundÇewÉmbeddedálbumáπ i¿%s\n", 
	`ba£«me
((*)
∑th
));

258 
œ°_suc˚ss
 = 1;

259 
	`°r˝y
(
œ°_∑th
, 
¨t_∑th
);

261 (
¨t_∑th
);

262 
	}
}

265 
	$check_f‹_Æbum_fûe
(c⁄° *
∑th
)

267 
fûe
[
MAXPATHLEN
];

268 
my∑th
[
MAXPATHLEN
];

269 
Æbum_¨t_«me_s
 *
Æbum_¨t_«me
;

270 
image_s
 *
im§c
 = 
NULL
;

271 
width
=0, 
height
=0;

272 *
¨t_fûe
;

273 c⁄° *
dú
;

274 
°©
 
°
;

275 
ªt
;

277 if–
	`°©
(
∑th
, &
°
) != 0 )

278  
NULL
;

280 if–
	`S_ISDIR
(
°
.
°_mode
) )

282 
dú
 = 
∑th
;

283 
check_dú
;

285 
	`°∫˝yt
(
my∑th
, 
∑th
, (mypath));

286 
dú
 = 
	`dú«me
(
my∑th
);

289 
	`¢¥ötf
(
fûe
, (fûe), "%s.covî.jpg", 
∑th
);

290 
ªt
 = 
	`ac˚ss
(
fûe
, 
R_OK
);

291 if–
ªt
 != 0 )

293 
	`°∫˝yt
(
fûe
, 
∑th
, (file));

294 
¨t_fûe
 = 
	`°ºchr
(
fûe
, '.');

295 if–
¨t_fûe
 )

297 
	`°r˝y
(
¨t_fûe
, ".jpg");

298 
ªt
 = 
	`ac˚ss
(
fûe
, 
R_OK
);

300 if–
ªt
 != 0 )

302 
¨t_fûe
 = 
	`°ºchr
(
fûe
, '/');

303 if–
¨t_fûe
 )

305 
	`memmove
(
¨t_fûe
+2,áπ_fûe+1, 
fûe
+
MAXPATHLEN
-art_file-2);

306 
¨t_fûe
[1] = '.';

307 
ªt
 = 
	`ac˚ss
(
fûe
, 
R_OK
);

311 if–
ªt
 == 0 )

313 if–
	`¨t_ˇche_exi°s
(
fûe
, &
¨t_fûe
) )

314 
exi°ög_fûe
;

315 
	`‰ì
(
¨t_fûe
);

316 
im§c
 = 
	`image_√w_‰om_j≥g
(
fûe
, 1, 
NULL
, 0, 1, 
ROTATE_NONE
);

317 if–
im§c
 )

318 
found_fûe
;

320 
check_dú
:

322  
Æbum_¨t_«me
 = 
Æbum_¨t_«mes
;álbum_¨t_«me;álbum_¨t_«mêÆbum_¨t_«me->
√xt
 )

324 
	`¢¥ötf
(
fûe
, (fûe), "%s/%s", 
dú
, 
Æbum_¨t_«me
->
«me
);

325 if–
	`ac˚ss
(
fûe
, 
R_OK
) == 0 )

327 if–
	`¨t_ˇche_exi°s
(
fûe
, &
¨t_fûe
) )

329 
exi°ög_fûe
:

330  
¨t_fûe
;

332 
	`‰ì
(
¨t_fûe
);

333 
im§c
 = 
	`image_√w_‰om_j≥g
(
fûe
, 1, 
NULL
, 0, 1, 
ROTATE_NONE
);

334 if–!
im§c
 )

336 
found_fûe
:

337 
width
 = 
im§c
->width;

338 
height
 = 
im§c
->height;

339 if–
width
 > 160 || 
height
 > 160 )

340 
¨t_fûe
 = 
	`ßve_ªsized_Æbum_¨t
(
im§c
, 
fûe
);

342 
¨t_fûe
 = 
	`°rdup
(
fûe
);

343 
	`image_‰ì
(
im§c
);

344 (
¨t_fûe
);

347  
NULL
;

348 
	}
}

350 
öt64_t


351 
	$föd_Æbum_¨t
(c⁄° *
∑th
, c⁄° *
image_d©a
, 
image_size
)

353 *
Æbum_¨t
 = 
NULL
;

354 *
sql
;

355 **
ªsu…
;

356 
cﬁs
, 
rows
;

357 
öt64_t
 
ªt
 = 0;

359 if–(
image_size
 && (
Æbum_¨t
 = 
	`check_embedded_¨t
(
∑th
, 
image_d©a
, image_size))) ||

360 (
Æbum_¨t
 = 
	`check_f‹_Æbum_fûe
(
∑th
)) )

362 
sql
 = 
	`sqlôe3_m¥ötf
("SELECT ID from ALBUM_ART whîêPATH = '%q'", 
Æbum_¨t
 ?álbum_¨à: 
∑th
);

363 if–(
	`sql_gë_èbÀ
(
db
, 
sql
, &
ªsu…
, &
rows
, &
cﬁs
Ë=
SQLITE_OK
) &&Ñows )

365 
ªt
 = 
	`°πﬁl
(
ªsu…
[1], 
NULL
, 10);

369 if–
	`sql_exec
(
db
, "INSERT i¡ÿALBUM_ART (PATHËVALUES ('%q')", 
Æbum_¨t
Ë=
SQLITE_OK
 )

370 
ªt
 = 
	`sqlôe3_œ°_ö£π_rowid
(
db
);

372 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

373 
	`sqlôe3_‰ì
(
sql
);

375 
	`‰ì
(
Æbum_¨t
);

377  
ªt
;

378 
	}
}

	@albumart.h

24 #i‚de‡
__ALBUMART_H__


25 
	#__ALBUMART_H__


	)

28 
upd©e_if_Æbum_¨t
(c⁄° *
∑th
);

30 
öt64_t


31 
föd_Æbum_¨t
(c⁄° *
∑th
, c⁄° *
image_d©a
, 
image_size
);

	@clients.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<time.h
>

5 
	~"˛õ¡s.h
"

6 
	~"gëiÁddr.h
"

7 
	~"log.h
"

9 
˛õ¡_ty≥_s
 
	g˛õ¡_ty≥s
[] =

14 
NULL
,

15 
EM©chN⁄e


18 { 
EXbox
,

19 
FLAG_MIME_AVI_AVI
 | 
FLAG_MS_PFS
,

22 
EU£rAgít


25 { 
EPS3
,

26 
FLAG_DLNA
 | 
FLAG_MIME_AVI_DIVX
,

29 
EU£rAgít


32 { 
EPS3
,

33 
FLAG_DLNA
 | 
FLAG_MIME_AVI_DIVX
,

36 
EXAVClõ¡Info


39 { 
ESamsungSîõsCTV
,

40 
FLAG_SAMSUNG
 | 
FLAG_DLNA
 | 
FLAG_NO_RESIZE
 | 
FLAG_SAMSUNG_TV
,

43 
EU£rAgít


47 { 
ESamsungSîõsC
,

48 
FLAG_SAMSUNG
 | 
FLAG_DLNA
 | 
FLAG_NO_RESIZE
,

51 
EU£rAgít


54 { 
ESamsungSîõsA
,

55 
FLAG_SAMSUNG
 | 
FLAG_DLNA
 | 
FLAG_NO_RESIZE
,

58 
EU£rAgít


61 { 
ESamsungSîõsB
,

62 
FLAG_SAMSUNG
 | 
FLAG_DLNA
 | 
FLAG_NO_RESIZE
,

65 
EModñName


69 { 
EP™as⁄ic
,

70 
FLAG_DLNA
 | 
FLAG_FORCE_SORT
,

73 
EU£rAgít


76 { 
EDí⁄Re˚ivî
,

77 
FLAG_DLNA
,

80 
EU£rAgít


83 { 
EFªeBox
,

84 
FLAG_RESIZE_THUMBS
,

87 
EU£rAgít


90 { 
EP›c‹nHour
,

91 
FLAG_MIME_FLAC_FLAC
,

94 
EU£rAgít


101 { 
ES⁄yBDP
,

102 
FLAG_DLNA
,

105 
EXAVClõ¡Info


109 { 
ELGDevi˚
,

110 
FLAG_DLNA
,

113 
EU£rAgít


117 { 
ES⁄yBøvü
,

118 
FLAG_DLNA
,

121 
EXAVClõ¡Info


125 { 
ES⁄yI¡î√tTV
,

126 
FLAG_DLNA
,

129 
EXAVClõ¡Info


132 { 
ENëgórEVA2000
,

133 
FLAG_MS_PFS
 | 
FLAG_RESIZE_THUMBS
,

136 
EU£rAgít


139 { 
EDúecTV
,

140 
FLAG_RESIZE_THUMBS
,

143 
EU£rAgít


146 { 
EToshibaTV
,

147 
FLAG_DLNA
,

150 
EU£rAgít


153 { 
ERokuSoundBridge
,

154 
FLAG_MS_PFS
 | 
FLAG_AUDIO_ONLY
 | 
FLAG_MIME_WAV_WAV
 | 
FLAG_FORCE_SORT
,

157 
EModñName


160 { 
EM¨™tzDMP
,

161 
FLAG_DLNA
 | 
FLAG_MIME_WAV_WAV
,

164 
EFrõndlyNameSSDP


167 { 
EMedüRoom
,

168 
FLAG_MS_PFS
,

171 
EU£rAgít


174 { 
ELi„Tab
,

175 
FLAG_MS_PFS
,

178 
EFrõndlyName


181 { 
ESènd¨dDLNA150
,

182 
FLAG_DLNA
 | 
FLAG_MIME_AVI_AVI
,

185 
EU£rAgít


188 { 0, 0, 
NULL
, 0 }

191 
˛õ¡_ˇche_s
 
	g˛õ¡s
[
CLIENT_CACHE_SLOTS
];

194 
	$SórchClõ¡Cache
(
ö_addr
 
addr
, 
quõt
)

196 
i
;

198 
i
 = 0; i < 
CLIENT_CACHE_SLOTS
; i++)

200 i‡(
˛õ¡s
[
i
].
addr
.
s_addr
 ==áddr.s_addr)

203 i‡((
	`time
(
NULL
Ë- 
˛õ¡s
[
i
].
age
) > 3600)

205 
mac
[6];

206 i‡(
	`gë_ªmŸe_mac
(
addr
, 
mac
) == 0 &&

207 
	`memcmp
(
mac
, 
˛õ¡s
[
i
].mac, 6) == 0)

211 
˛õ¡s
[
i
].
age
 = 
	`time
(
NULL
);

215 
	`mem£t
(&
˛õ¡s
[
i
], 0, (
˛õ¡_ˇche_s
));

219 i‡(!
quõt
)

220 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Client found in cache. [%s/entry %d]\n",

221 
˛õ¡_ty≥s
[
˛õ¡s
[
i
].
ty≥
].
«me
, i);

222  
i
;

227 
	}
}

230 
	$AddClõ¡Cache
(
ö_addr
 
addr
, 
ty≥
)

232 
i
;

234 
i
 = 0; i < 
CLIENT_CACHE_SLOTS
; i++)

236 i‡(
˛õ¡s
[
i
].
addr
.
s_addr
)

238 
	`gë_ªmŸe_mac
(
addr
, 
˛õ¡s
[
i
].
mac
);

239 
˛õ¡s
[
i
].
addr
 =áddr;

240 
˛õ¡s
[
i
].
ty≥
 =Åype;

241 
˛õ¡s
[
i
].
age
 = 
	`time
(
NULL
);

242 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Added client [%s/%s/%02X:%02X:%02X:%02X:%02X:%02X]Åo cache slot %d.\n",

243 
˛õ¡_ty≥s
[
ty≥
].
«me
, 
	`öë_¡ﬂ
(
˛õ¡s
[
i
].
addr
),

244 
˛õ¡s
[
i
].
mac
[0], clients[i].mac[1], clients[i].mac[2],

245 
˛õ¡s
[
i
].
mac
[3], clients[i].mac[4], clients[i].mac[5], i);

250 
	}
}

	@clients.h

1 #i‚de‡
__CLIENTS_H__


2 
	#__CLIENTS_H__


	)

3 
	~<°döt.h
>

4 
	~<√töë/ö.h
>

6 
	#CLIENT_CACHE_SLOTS
 20

	)

8 
	#FLAG_DLNA
 0x00000001

	)

9 
	#FLAG_MIME_AVI_DIVX
 0x00000002

	)

10 
	#FLAG_MIME_AVI_AVI
 0x00000004

	)

11 
	#FLAG_MIME_FLAC_FLAC
 0x00000008

	)

12 
	#FLAG_MIME_WAV_WAV
 0x00000010

	)

13 
	#FLAG_RESIZE_THUMBS
 0x00000020

	)

14 
	#FLAG_NO_RESIZE
 0x00000040

	)

15 
	#FLAG_MS_PFS
 0x00000080

16 
	#FLAG_SAMSUNG
 0x00000100

	)

17 
	#FLAG_SAMSUNG_TV
 0x00000200

	)

18 
	#FLAG_AUDIO_ONLY
 0x00000400

	)

19 
	#FLAG_FORCE_SORT
 0x00000800

	)

21 
	em©ch_ty≥s
 {

22 
	mEM©chN⁄e
,

23 
	mEU£rAgít
,

24 
	mEXAVClõ¡Info
,

25 
	mEFrõndlyName
,

26 
	mEModñName
,

27 
	mEFrõndlyNameSSDP


30 
	e˛õ¡_ty≥s
 {

31 
	mEXbox
 = 1,

32 
	mEPS3
,

33 
	mEDí⁄Re˚ivî
,

34 
	mEDúecTV
,

35 
	mEFªeBox
,

36 
	mELGDevi˚
,

37 
	mELi„Tab
,

38 
	mEM¨™tzDMP
,

39 
	mEMedüRoom
,

40 
	mENëgórEVA2000
,

41 
	mEP™as⁄ic
,

42 
	mEP›c‹nHour
,

43 
	mERokuSoundBridge
,

44 
	mESamsungSîõsA
,

45 
	mESamsungSîõsB
,

46 
	mESamsungSîõsC
,

47 
	mESamsungSîõsCTV
,

48 
	mES⁄yBDP
,

49 
	mES⁄yBøvü
,

50 
	mES⁄yI¡î√tTV
,

51 
	mEToshibaTV
,

52 
	mESènd¨dDLNA150


55 
	s˛õ¡_ty≥_s
 {

56 
˛õ¡_ty≥s
 
	mty≥
;

57 
uöt32_t
 
	mÊags
;

58 c⁄° *
	m«me
;

59 c⁄° *
	mm©ch
;

60 
m©ch_ty≥s
 
	mm©ch_ty≥
;

63 
	s˛õ¡_ˇche_s
 {

64 
ö_addr
 
	maddr
;

65 
	mmac
[6];

66 
˛õ¡_ty≥s
 
	mty≥
;

67 
time_t
 
	mage
;

70 
˛õ¡_ty≥_s
 
˛õ¡_ty≥s
[];

71 
˛õ¡_ˇche_s
 
˛õ¡s
[
CLIENT_CACHE_SLOTS
];

73 
SórchClõ¡Cache
(
ö_addr
 
addr
, 
quõt
);

74 
AddClõ¡Cache
(
ö_addr
 
addr
, 
ty≥
);

	@codelength.h

6 #i‚de‡
__CODELENGTH_H__


7 
	#__CODELENGTH_H__


	)

12 
	#DECODELENGTH
(
n
, 
p
)Ç = 0; \

13 dÿ{ 
n
 = (¿<< 7Ë| (*
p
 & 0x7f); } \

14 *(
p
++)&0x80);

	)

16 
	#CODELENGTH
(
n
, 
p
) if(n>=268435456) *(p++) = (n >> 28) | 0x80; \

17 if(
n
>=2097152Ë*(
p
++) = (n >> 21) | 0x80; \

18 if(
n
>=16384Ë*(
p
++) = (n >> 14) | 0x80; \

19 if(
n
>=128Ë*(
p
++) = (n >> 7) | 0x80; \

20 *(
p
++Ë
n
 & 0x7f;

	)

	@config.h

8 
	#DEFAULT_DB_PATH
 "/v¨/run/möid a"

	)

11 
	#DEFAULT_LOG_PATH
 "/v¨/log"

	)

18 
	#HAVE_ARPA_INET_H
 1

	)

21 
	#HAVE_ASM_UNISTD_H
 1

	)

24 
	#HAVE_AVCODEC_H
 1

	)

27 
	#HAVE_AVFORMAT_H
 1

	)

30 
	#HAVE_AVUTIL_H
 1

	)

44 
	#HAVE_CLOCK_GETTIME_SYSCALL
 1

	)

54 
	#HAVE_ENDIAN_H
 1

	)

57 
	#HAVE_FCNTL_H
 1

	)

78 
	#HAVE_FLAC
 1

	)

81 
	#HAVE_FLAC_ALL_H
 1

	)

84 
	#HAVE_FLAC_METADATA_H
 1

	)

87 
	#HAVE_FORK
 1

	)

93 
	#HAVE_GETHOSTNAME
 1

	)

96 
	#HAVE_GETIFADDRS
 1

	)

102 
	#HAVE_GETTIMEOFDAY
 1

	)

105 
	#HAVE_ICONV
 1

	)

108 
	#HAVE_ID3TAG_H
 1

	)

111 
	#HAVE_INET_NTOA
 1

	)

114 
	#HAVE_INOTIFY
 1

	)

117 
	#HAVE_INOTIFY_INIT
 1

	)

120 
	#HAVE_INTTYPES_H
 1

	)

123 
	#HAVE_JPEGLIB_H
 1

	)

126 
	#HAVE_LIBAVCODEC_AVCODEC_H
 1

	)

129 
	#HAVE_LIBAVFORMAT_AVFORMAT_H
 1

	)

132 
	#HAVE_LIBAVUTIL_AVUTIL_H
 1

	)

153 
	#HAVE_LIBEXIF_EXIF_LOADER_H
 1

	)

156 
	#HAVE_LIBINTL_H
 1

	)

159 
	#HAVE_LIBPTHREAD
 1

	)

162 
	#HAVE_LINUX_SENDFILE_API
 1

	)

165 
	#HAVE_LOCALE_H
 1

	)

174 
	#HAVE_MEMMOVE
 1

	)

177 
	#HAVE_MEMORY_H
 1

	)

180 
	#HAVE_MEMSET
 1

	)

183 
	#HAVE_MKDIR
 1

	)

186 
	#HAVE_NETDB_H
 1

	)

189 
	#HAVE_NETINET_IN_H
 1

	)

192 
	#HAVE_OGG_OGG_H
 1

	)

195 
	#HAVE_REALPATH
 1

	)

198 
	#HAVE_SELECT
 1

	)

201 
	#HAVE_SENDFILE
 1

	)

204 
	#HAVE_SETLOCALE
 1

	)

207 
	#HAVE_SOCKET
 1

	)

210 
	#HAVE_SQLITE3_H
 1

	)

213 
	#HAVE_SQLITE3_MALLOC
 1

	)

216 
	#HAVE_SQLITE3_PREPARE_V2
 1

	)

219 
	#HAVE_STDBOOL_H
 1

	)

222 
	#HAVE_STDDEF_H
 1

	)

225 
	#HAVE_STDINT_H
 1

	)

228 
	#HAVE_STDLIB_H
 1

	)

231 
	#HAVE_STRCASECMP
 1

	)

234 
	#HAVE_STRCHR
 1

	)

237 
	#HAVE_STRDUP
 1

	)

240 
	#HAVE_STRERROR
 1

	)

243 
	#HAVE_STRINGS_H
 1

	)

246 
	#HAVE_STRING_H
 1

	)

249 
	#HAVE_STRNCASECMP
 1

	)

252 
	#HAVE_STRPBRK
 1

	)

255 
	#HAVE_STRRCHR
 1

	)

258 
	#HAVE_STRSTR
 1

	)

261 
	#HAVE_STRTOL
 1

	)

264 
	#HAVE_STRTOUL
 1

	)

267 
	#HAVE_STRUCT_STAT_ST_BLOCKS
 1

	)

271 
	#HAVE_ST_BLOCKS
 1

	)

274 
	#HAVE_SYSCALL_H
 1

	)

277 
	#HAVE_SYS_FILE_H
 1

	)

280 
	#HAVE_SYS_INOTIFY_H
 1

	)

283 
	#HAVE_SYS_IOCTL_H
 1

	)

286 
	#HAVE_SYS_PARAM_H
 1

	)

289 
	#HAVE_SYS_SOCKET_H
 1

	)

292 
	#HAVE_SYS_STAT_H
 1

	)

295 
	#HAVE_SYS_SYSCALL_H
 1

	)

298 
	#HAVE_SYS_TIME_H
 1

	)

301 
	#HAVE_SYS_TYPES_H
 1

	)

304 
	#HAVE_UNISTD_H
 1

	)

307 
	#HAVE_VFORK
 1

	)

313 
	#HAVE_VORBISFILE
 1

	)

316 
	#HAVE_VORBIS_CODEC_H
 1

	)

319 
	#HAVE_VORBIS_VORBISFILE_H
 1

	)

322 
	#HAVE_WORKING_FORK
 1

	)

325 
	#HAVE_WORKING_VFORK
 1

	)

328 
	#HAVE__BOOL
 1

	)

331 
	#ICONV_CONST


	)

338 
	#LSTAT_FOLLOWS_SLASHED_SYMLINK
 1

	)

344 
	#OS_NAME
 "O≥nWπ Löux"

	)

347 
	#OS_URL
 "hâp://›íwπ.‹g/"

	)

350 
	#OS_VERSION
 "3.4.0"

	)

353 
	#PACKAGE
 "möid a"

	)

356 
	#PACKAGE_BUGREPORT
 ""

	)

359 
	#PACKAGE_NAME
 "MöiDLNA"

	)

362 
	#PACKAGE_STRING
 "MöiDLNA 1.1.0"

	)

365 
	#PACKAGE_TARNAME
 "möid a"

	)

368 
	#PACKAGE_URL
 ""

	)

371 
	#PACKAGE_VERSION
 "1.1.0"

	)

380 
	#ROOTDEV_MANUFACTURER
 "Ju°ö Magg¨d"

	)

383 
	#ROOTDEV_MANUFACTURERURL
 "hâp://www.√tgór.com/"

	)

386 
	#ROOTDEV_MODELDESCRIPTION
 "MöiDLNA o¿" 
OS_NAME


	)

389 
	#ROOTDEV_MODELNAME
 "Wödow†Medü C⁄√˘ com∑tibÀ (MöiDLNA)"

	)

392 
	#ROOTDEV_MODELURL
 
OS_URL


	)

395 
	#SCANDIR_CONST
 1

	)

404 
	#STDC_HEADERS
 1

	)

410 
	#USE_DAEMON
 1

	)

416 #i‚de‡
_ALL_SOURCE


417 
	#_ALL_SOURCE
 1

	)

420 #i‚de‡
_GNU_SOURCE


421 
	#_GNU_SOURCE
 1

	)

424 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


425 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

428 #i‚de‡
_TANDEM_SOURCE


429 
	#_TANDEM_SOURCE
 1

	)

432 #i‚de‡
__EXTENSIONS__


433 
	#__EXTENSIONS__
 1

	)

438 
	#VERSION
 "1.1.0"

	)

442 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


443 #i‡
deföed
 
__BIG_ENDIAN__


444 
	#WORDS_BIGENDIAN
 1

	)

447 #i‚de‡
WORDS_BIGENDIAN


479 #i‚de‡
__˝lu•lus


	@daemonize.c

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<uni°d.h
>

32 
	~<f˙é.h
>

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<î∫o.h
>

36 
	~<°rög.h
>

37 
	~<sig«l.h
>

39 
	~"d´m⁄ize.h
"

40 
	~"c⁄fig.h
"

41 
	~"log.h
"

44 
	$d´m⁄ize
()

46 
pid
;

47 #i‚de‡
USE_DAEMON


48 
i
;

50 
	`f‹k
())

54 
	`≥º‹
("fork()");

55 
	`exô
(1);

60 if–(
pid
 = 
	`£tsid
()) < 0)

62 
	`≥º‹
("setsid()");

63 
	`exô
(1);

67 
i
=
	`gëdèbÀsize
();i>=0;--iË
	`˛o£
(i);

69 
i
 = 
	`›í
("/dev/nuŒ",
O_RDWR
);

70 
	`dup
(
i
);

71 
	`dup
(
i
);

73 
	`umask
(027);

74 
	`chdú
("/");

79 
	`exô
(0);

82 if–
	`d´m⁄
(0, 0) < 0 )

83 
	`≥º‹
("daemon()");

84 
pid
 = 
	`gëpid
();

86  
pid
;

87 
	}
}

90 
	$checkf‹ru¬ög
(c⁄° * 
‚ame
)

92 
buf„r
[64];

93 
pidfûe
;

94 
pid_t
 
pid
;

96 if(!
‚ame
 || *fname == '\0')

99 if–(
pidfûe
 = 
	`›í
(
‚ame
, 
O_RDONLY
)) < 0)

102 
	`mem£t
(
buf„r
, 0, 64);

104 if(
	`ªad
(
pidfûe
, 
buf„r
, 63))

106 if–(
pid
 = 
	`©ﬁ
(
buf„r
)) > 0)

108 if(!
	`kûl
(
pid
, 0))

110 
	`˛o£
(
pidfûe
);

116 
	`˛o£
(
pidfûe
);

119 
	}
}

	@daemonize.h

29 #i‚de‡
__DAEMONIZE_H__


30 
	#__DAEMONIZE_H__


	)

32 
	~"c⁄fig.h
"

38 
d´m⁄ize
();

46 
checkf‹ru¬ög
(c⁄° * 
‚ame
);

	@getifaddr.c

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sockë.h
>

36 
	~<√t/if.h
>

37 
	~<¨∑/öë.h
>

38 
	~<√töë/ö.h
>

39 
	~<√tdb.h
>

40 
	~<î∫o.h
>

41 #i‡
deföed
(
sun
)

42 
	~<sys/sockio.h
>

45 
	~"c⁄fig.h
"

46 #i‡
HAVE_GETIFADDRS


47 
	~<iÁddrs.h
>

48 #ifde‡
__löux__


49 #i‚de‡
AF_LINK


50 
	#AF_LINK
 
AF_INET


	)

53 
	~<√t/if_dl.h
>

56 
	~"u≤pglobÆv¨s.h
"

57 
	~"gëiÁddr.h
"

58 
	~"log.h
"

60 
uöt32_t


61 
	$gë_√tmask
(
sockaddr_ö
 *
√tmask
)

63 
uöt32_t
 
mask
;

64 
i
;

66 i‡(!
√tmask
)

68 
mask
 = 
	`¡ohl
(
√tmask
->
sö_addr
.
s_addr
);

69 
i
 = 0; i < 32; i++)

71 i‡((
mask
 >> 
i
) & 1)

74 
mask
 = 32 - 
i
;

76  
mask
;

77 
	}
}

80 
	$gëiÁddr
(c⁄° * 
i‚ame
, * 
buf
, 
Àn
)

83 
uöt32_t
 
mask
 = 0;

84 
i
;

85 #i‡
HAVE_GETIFADDRS


86 
iÁddrs
 *
iÁp
, *
p
;

87 
sockaddr_ö
 *
addr_ö
;

89 i‡(
	`gëiÁddrs
(&
iÁp
) != 0)

91 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "gëiÁddrs(): %s\n", 
	`°ªº‹
(
î∫o
));

94 
p
 = 
iÁp
;Ö !
NULL
;Ö =Ö->
iÁ_√xt
)

96 i‡(
p
->
iÁ_addr
 &&Ö->iÁ_addr->
ß_Ámûy
 =
AF_INET
)

98 i‡(
	`°rcmp
(
p
->
iÁ_«me
, 
i‚ame
) != 0)

100 
addr_ö
 = (
sockaddr_ö
 *)
p
->
iÁ_addr
;

101 i‡(!
	`öë_¡›
(
AF_INET
, &
addr_ö
->
sö_addr
, 
buf
, 
Àn
))

103 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "öë_¡›(): %s\n", 
	`°ªº‹
(
î∫o
));

106 
addr_ö
 = (
sockaddr_ö
 *)
p
->
iÁ_√tmask
;

107 
mask
 = 
	`gë_√tmask
(
addr_ö
);

111 
	`‰ìiÁddrs
(
iÁp
);

112 i‡(!
p
)

114 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Nëw‹k i¡îÁ˚ %†nŸ found\n", 
i‚ame
);

118 
s
;

119 
i‰eq
 
i‰
;

120 
i‰Àn
;

121 
sockaddr_ö
 * 
addr
;

123 
i‰Àn
 = (
i‰
);

124 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

125 i‡(
s
 < 0)

127 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "sockë(PF_INET, SOCK_DGRAM): %s\n", 
	`°ªº‹
(
î∫o
));

130 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

131 i‡(
	`io˘l
(
s
, 
SIOCGIFADDR
, &
i‰
, &
i‰Àn
) < 0)

133 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "io˘l(s, SIOCGIFADDR, ...): %s\n", 
	`°ªº‹
(
î∫o
));

134 
	`˛o£
(
s
);

137 
addr
 = (
sockaddr_ö
 *)&
i‰
.
i‰_addr
;

138 i‡(!
	`öë_¡›
(
AF_INET
, &
addr
->
sö_addr
, 
buf
, 
Àn
))

140 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "öë_¡›(): %s\n", 
	`°ªº‹
(
î∫o
));

141 
	`˛o£
(
s
);

144 i‡(
	`io˘l
(
s
, 
SIOCGIFNETMASK
, &
i‰
, &
i‰Àn
) == 0)

146 
addr
 = (
sockaddr_ö
 *)&
i‰
.
i‰_√tmask
;

147 
mask
 = 
	`gë_√tmask
(
addr
);

150 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "io˘l(s, SIOCGIFNETMASK, ...): %s\n", 
	`°ªº‹
(
î∫o
));

151 
	`˛o£
(
s
);

153 i‡(
mask
)

155 
i
 = 
	`°æí
(
buf
);

156 
	`¢¥ötf
(
buf
+
i
, 
Àn
-i, "/%u", 
mask
);

159 
	}
}

162 
	$gësyßddrs
()

164 #i‡
HAVE_GETIFADDRS


165 
iÁddrs
 *
iÁp
, *
p
;

166 
sockaddr_ö
 *
addr_ö
;

168 i‡(
	`gëiÁddrs
(&
iÁp
) != 0)

170 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "gëiÁddrs(): %s\n", 
	`°ªº‹
(
î∫o
));

173 
p
 = 
iÁp
;Ö !
NULL
;Ö =Ö->
iÁ_√xt
)

175 i‡(
p
->
iÁ_addr
 &&Ö->iÁ_addr->
ß_Ámûy
 =
AF_INET
)

177 
addr_ö
 = (
sockaddr_ö
 *)
p
->
iÁ_addr
;

178 i‡(
p
->
iÁ_Êags
 & (
IFF_LOOPBACK
 | 
IFF_SLAVE
))

180 
	`mem˝y
(&
œn_addr
[
n_œn_addr
].
addr
, &
addr_ö
->
sö_addr
, (lan_addr[n_lan_addr].addr));

181 i‡(!
	`öë_¡›
(
AF_INET
, &
addr_ö
->
sö_addr
, 
œn_addr
[
n_œn_addr
].
°r
, (lan_addr[0].str)) )

183 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "öë_¡›(): %s\n", 
	`°ªº‹
(
î∫o
));

186 
addr_ö
 = (
sockaddr_ö
 *)
p
->
iÁ_√tmask
;

187 
	`mem˝y
(&
œn_addr
[
n_œn_addr
].
mask
, &
addr_ö
->
sö_addr
, (lan_addr[n_lan_addr].mask));

188 
n_œn_addr
++;

189 i‡(
n_œn_addr
 >
MAX_LAN_ADDR
)

193 
	`‰ìiÁddrs
(
iÁp
);

195 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

196 
sockaddr_ö
 
addr
;

197 
ifc⁄f
 
ifc
;

198 
i‰eq
 *
i‰
;

199 
buf
[8192];

200 
i
, 
n
;

202 
	`mem£t
(&
ifc
, '\0', (ifc));

203 
ifc
.
ifc_buf
 = 
buf
;

204 
ifc
.
ifc_Àn
 = (
buf
);

206 i‡(
	`io˘l
(
s
, 
SIOCGIFCONF
, &
ifc
) < 0)

208 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "SIOCGIFCONF: %s\n", 
	`°ªº‹
(
î∫o
));

209 
	`˛o£
(
s
);

213 
n
 = 
ifc
.
ifc_Àn
 / (
i‰eq
);

214 
i
=0; i < 
n
; i++)

216 
i‰
 = &
ifc
.
ifc_ªq
[
i
];

217 i‡(
	`io˘l
(
s
, 
SIOCGIFFLAGS
, 
i‰
) < 0 ||

218 
i‰
->
i‰_i‰u
.
i‰u_Êags
 & 
IFF_LOOPBACK
)

220 i‡(
	`io˘l
(
s
, 
SIOCGIFADDR
, 
i‰
) < 0)

222 
	`mem˝y
(&
addr
, &(
i‰
->
i‰_addr
), (addr));

223 
	`mem˝y
(&
œn_addr
[
n_œn_addr
].
addr
, &addr.
sö_addr
, (lan_addr[n_lan_addr].addr));

224 i‡(!
	`öë_¡›
(
AF_INET
, &
addr
.
sö_addr
, 
œn_addr
[
n_œn_addr
].
°r
, (lan_addr[0].str)))

226 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "öë_¡›(): %s\n", 
	`°ªº‹
(
î∫o
));

227 
	`˛o£
(
s
);

230 i‡(
	`io˘l
(
s
, 
SIOCGIFNETMASK
, 
i‰
) < 0)

232 
	`mem˝y
(&
addr
, &(
i‰
->
i‰_addr
), (addr));

233 
	`mem˝y
(&
œn_addr
[
n_œn_addr
].
mask
, &
addr
.
sö_addr
, (addr));

234 
n_œn_addr
++;

235 i‡(
n_œn_addr
 >
MAX_LAN_ADDR
)

238 
	`˛o£
(
s
);

240  
n_œn_addr
;

241 
	}
}

244 
	$gësyshwaddr
(*
buf
, 
Àn
)

246 
mac
[6];

247 
ªt
 = -1;

248 #i‡
HAVE_GETIFADDRS


249 
iÁddrs
 *
iÁp
, *
p
;

250 
sockaddr_ö
 *
addr_ö
;

251 
uöt8_t
 
a
;

253 i‡(
	`gëiÁddrs
(&
iÁp
) != 0)

255 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "gëiÁddrs(): %s\n", 
	`°ªº‹
(
î∫o
));

258 
p
 = 
iÁp
;Ö !
NULL
;Ö =Ö->
iÁ_√xt
)

260 i‡(
p
->
iÁ_addr
 &&Ö->iÁ_addr->
ß_Ámûy
 =
AF_LINK
)

262 
addr_ö
 = (
sockaddr_ö
 *)
p
->
iÁ_addr
;

263 
a
 = (
	`ht⁄l
(
addr_ö
->
sö_addr
.
s_addr
) >> 0x18) & 0xFF;

264 i‡(
a
 == 127)

266 #ifde‡
__löux__


267 
i‰eq
 
i‰
;

268 
fd
;

269 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

270 i‡(
fd
 < 0)

272 
	`°∫˝y
(
i‰
.
i‰_«me
, 
p
->
iÁ_«me
, 
IFNAMSIZ
);

273 i‡(
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
i‰
) < 0)

275 
	`˛o£
(
fd
);

278 
	`mem˝y
(
mac
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 6);

280 
sockaddr_dl
 *
sdl
;

281 
sdl
 = (
sockaddr_dl
*)
p
->
iÁ_addr
;

282 
	`mem˝y
(
mac
, 
	`LLADDR
(
sdl
), sdl->
sdl_Æí
);

284 i‡(
	`MACADDR_IS_ZERO
(
mac
))

286 
ªt
 = 0;

290 
	`‰ìiÁddrs
(
iÁp
);

292 
if_«meödex
 *
iÁ˚s
, *
if_idx
;

293 
i‰eq
 
i‰
;

294 
fd
;

296 
	`mem£t
(&
mac
, '\0', (mac));

298 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

299 i‡(
fd
 < 0)

300  
ªt
;

302 
iÁ˚s
 = 
	`if_«meödex
();

303 i‡(!
iÁ˚s
)

304  
ªt
;

306 
if_idx
 = 
iÁ˚s
; if_idx->
if_ödex
; if_idx++)

308 
	`°∫˝y
(
i‰
.
i‰_«me
, 
if_idx
->
if_«me
, 
IFNAMSIZ
);

309 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰
) < 0)

311 i‡(
i‰
.
i‰_i‰u
.
i‰u_Êags
 & 
IFF_LOOPBACK
)

313 i‡(
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
i‰
) < 0)

315 i‡(
	`MACADDR_IS_ZERO
(
i‰
.
i‰_hwaddr
.
ß_d©a
))

317 
	`mem˝y
(
mac
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 6);

318 
ªt
 = 0;

321 
	`if_‰ì«meödex
(
iÁ˚s
);

322 
	`˛o£
(
fd
);

324 i‡(
ªt
 == 0)

326 i‡(
Àn
 > 12)

327 
	`•rötf
(
buf
, "%02x%02x%02x%02x%02x%02x",

328 
mac
[0]&0xFF, mac[1]&0xFF, mac[2]&0xFF,

329 
mac
[3]&0xFF, mac[4]&0xFF, mac[5]&0xFF);

330 i‡(
Àn
 == 6)

331 
	`memmove
(
buf
, 
mac
, 6);

333  
ªt
;

334 
	}
}

337 
	$gë_ªmŸe_mac
(
ö_addr
 
ù_addr
, *
mac
)

339 
ö_addr
 
¨p_ít
;

340 
FILE
 * 
¨p
;

341 
ªmŸe_ù
[16];

342 
m©ches
, 
hwty≥
, 
Êags
;

343 
	`mem£t
(
mac
, 0xFF, 6);

345 
¨p
 = 
	`f›í
("/proc/net/arp", "r");

346 i‡(!
¨p
)

348 !
	`„of
(
¨p
))

350 
m©ches
 = 
	`fsˇnf
(
¨p
, "%15s 0x%8X 0x%8X %2hhx:%2hhx:%2hhx:%2hhx:%2hhx:%2hhx",

351 
ªmŸe_ù
, &
hwty≥
, &
Êags
,

352 &
mac
[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);

353 i‡(
m©ches
 != 9)

355 
	`öë_±⁄
(
AF_INET
, 
ªmŸe_ù
, &
¨p_ít
);

356 i‡(
ù_addr
.
s_addr
 =
¨p_ít
.s_addr)

358 
mac
[0] = 0xFF;

360 
	`f˛o£
(
¨p
);

362 i‡(
mac
[0] == 0xFF)

364 
	`mem£t
(
mac
, 0xFF, 6);

369 
	}
}

	@getifaddr.h

29 #i‚de‡
__GETIFADDR_H__


30 
	#__GETIFADDR_H__


	)

31 
	~<¨∑/öë.h
>

33 
	#MACADDR_IS_ZERO
(
x
) \

34 ((
x
[0] == 0x00) && \

35 (
x
[1] == 0x00) && \

36 (
x
[2] == 0x00) && \

37 (
x
[3] == 0x00) && \

38 (
x
[4] == 0x00) && \

39 (
x
[5] =0x00))

	)

46 
gëiÁddr
(c⁄° * 
i‚ame
, * 
buf
, 
Àn
);

49 
gësyßddrs
();

52 
gësyshwaddr
(* 
buf
, 
Àn
);

55 
gë_ªmŸe_mac
(
ö_addr
 
ù_addr
, * 
mac
);

	@icons.c

21 #ifde‡
NETGEAR


23 
	g≤g_sm
[] = "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x30\x00\x00\x00\x30"

48 
	g≤g_Ãg
[] = "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x78\x00\x00\x00\x78"

388 
	gj≥g_sm
[] = "\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49\x46\x00\x01\x01\x01\x00\x48\x00\x48\x00\x00\xff\xdb\x00\x43"

425 
	gj≥g_Ãg
[] = "\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49\x46\x00\x01\x01\x01\x00\x48\x00\x48\x00\x00\xff\xdb\x00\x43"

502 
	g≤g_sm
[] = "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x29\x00\x00\x00\x30"

604 
	g≤g_Ãg
[] = "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x66\x00\x00\x00\x78"

963 
	gj≥g_sm
[] = "\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49\x46\x00\x01\x01\x01\x00\x5a\x00\x5a\x00\x00\xff\xdb\x00\x43"

1048 
	gj≥g_Ãg
[] = "\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49\x46\x00\x01\x01\x01\x00\x5a\x00\x5a\x00\x00\xff\xdb\x00\x43"

	@image_utils.c

29 
	~"c⁄fig.h
"

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~<£tjmp.h
>

35 
	~<j≥glib.h
>

36 #ifde‡
HAVE_MACHINE_ENDIAN_H


37 
	~<machöe/ídün.h
>

39 
	~<ídün.h
>

42 
	~"u≤¥ïly∑r£.h
"

43 
	~"image_utûs.h
"

44 
	~"log.h
"

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#SWAP16
(
w
Ë–(((wË>> 8Ë& 0x00ffË| (((wË<< 8Ë& 0xff00Ë)

	)

49 
	#SWAP16
(
w
Ë(w)

	)

52 
	#JPEG_QUALITY
 96

	)

54 
	#COL
(
ªd
, 
gªí
, 
blue
Ë((‘edË<< 24Ë| ((gªíË<< 16Ë| ((blueË<< 8Ë| 0xFF)

	)

55 
	#COL_FULL
(
ªd
, 
gªí
, 
blue
, 
Æpha
Ë((‘edË<< 24Ë| ((gªíË<< 16Ë| ((blueË<< 8Ë| (Æpha))

	)

56 
	#COL_RED
(
cﬁ
Ë(cﬁ >> 24)

	)

57 
	#COL_GREEN
(
cﬁ
Ë((cﬁ >> 16Ë& 0xFF)

	)

58 
	#COL_BLUE
(
cﬁ
Ë((cﬁ >> 8Ë& 0xFF)

	)

59 
	#COL_ALPHA
(
cﬁ
Ë(cﬁ & 0xFF)

	)

60 
	#BLACK
 0x000000FF

	)

63 
	smy_d°_mgr
 {

64 
j≥g_de°ö©i⁄_mgr
 
	mjd°
;

65 
JOCTET
 *
	mbuf
;

66 
JOCTET
 *
	moff
;

67 
size_t
 
	msz
;

68 
size_t
 
	mu£d
;

73 
	$my_d°_mgr_öô
(
j_com¥ess_±r
 
cöfo
)

75 
my_d°_mgr
 *
d°
 = (*)
cöfo
->
de°
;

77 
d°
->
u£d
 = 0;

78 
d°
->
sz
 = 
cöfo
->
image_width


79 * 
cöfo
->
image_height


80 * 
cöfo
->
öput_comp⁄íts
;

81 
d°
->
buf
 = 
	`mÆloc
(d°->
sz
 *  *dst->buf);

82 
d°
->
off
 = d°->
buf
;

83 
d°
->
jd°
.
√xt_ouçut_byã
 = d°->
off
;

84 
d°
->
jd°
.
‰ì_ö_buf„r
 = d°->
sz
;

88 
	}
}

90 
boﬁón


91 
	$my_d°_mgr_em±y
(
j_com¥ess_±r
 
cöfo
)

93 
my_d°_mgr
 *
d°
 = (*)
cöfo
->
de°
;

95 
d°
->
sz
 *= 2;

96 
d°
->
u£d
 = d°->
off
 - d°->
buf
;

97 
d°
->
buf
 = 
	`ªÆloc
(d°->buf, d°->
sz
 *  *dst->buf);

98 
d°
->
off
 = d°->
buf
 + d°->
u£d
;

99 
d°
->
jd°
.
√xt_ouçut_byã
 = d°->
off
;

100 
d°
->
jd°
.
‰ì_ö_buf„r
 = d°->
sz
 - d°->
u£d
;

102  
TRUE
;

104 
	}
}

107 
	$my_d°_mgr_ãrm
(
j_com¥ess_±r
 
cöfo
)

109 
my_d°_mgr
 *
d°
 = (*)
cöfo
->
de°
;

111 
d°
->
u£d
 +d°->
sz
 - d°->
jd°
.
‰ì_ö_buf„r
;

112 
d°
->
off
 = d°->
buf
 + d°->
u£d
;

116 
	}
}

119 
	$j≥g_mem‹y_de°
(
j_com¥ess_±r
 
cöfo
, 
my_d°_mgr
 *
d°
)

121 
d°
->
jd°
.
öô_de°ö©i⁄
 = 
my_d°_mgr_öô
;

122 
d°
->
jd°
.
em±y_ouçut_buf„r
 = 
my_d°_mgr_em±y
;

123 
d°
->
jd°
.
ãrm_de°ö©i⁄
 = 
my_d°_mgr_ãrm
;

124 
cöfo
->
de°
 = (*)
d°
;

128 
	}
}

132 
	smy_§c_mgr


134 
j≥g_sour˚_mgr
 
	mpub
;

135 
JOCTET
 
	meoi_buf„r
[2];

139 
	$öô_sour˚
(
j_decom¥ess_±r
 
cöfo
)

142 
	}
}

145 
	$fûl_öput_buf„r
(
j_decom¥ess_±r
 
cöfo
)

147 
my_§c_mgr
 *
§c
 = (*)
cöfo
->src;

150 
§c
->
eoi_buf„r
[0] = (
JOCTET
) 0xFF;

151 
§c
->
eoi_buf„r
[1] = (
JOCTET
Ë
JPEG_EOI
;

152 
§c
->
pub
.
√xt_öput_byã
 = src->
eoi_buf„r
;

153 
§c
->
pub
.
byãs_ö_buf„r
 = 2;

155  
TRUE
;

156 
	}
}

159 
	$skù_öput_d©a
(
j_decom¥ess_±r
 
cöfo
, 
num_byãs
)

161 
my_§c_mgr
 *
§c
 = (*)
cöfo
->src;

162 i‡(
num_byãs
 > 0)

164 
num_byãs
 > ()
§c
->
pub
.
byãs_ö_buf„r
)

166 
num_byãs
 -()
§c
->
pub
.
byãs_ö_buf„r
;

167 
	`fûl_öput_buf„r
(
cöfo
);

170 
§c
->
pub
.
√xt_öput_byã
 +
num_byãs
;

171 
§c
->
pub
.
byãs_ö_buf„r
 -
num_byãs
;

172 
	}
}

175 
	$ãrm_sour˚
(
j_decom¥ess_±r
 
cöfo
)

178 
	}
}

181 
	$j≥g_mem‹y_§c
(
j_decom¥ess_±r
 
cöfo
, c⁄° * 
buf„r
, 
size_t
 
bufsize
)

183 
my_§c_mgr
 *
§c
;

185 i‡(! 
cöfo
->
§c
)

187 
cöfo
->
§c
 = (*cöfo->
mem
->
Æloc_smÆl
)((*)cöfo, 
JPOOL_PERMANENT
, (
my_§c_mgr
));;

189 
§c
 = (*)
cöfo
->src;

190 
§c
->
pub
.
öô_sour˚
 = init_source;

191 
§c
->
pub
.
fûl_öput_buf„r
 = fill_input_buffer;

192 
§c
->
pub
.
skù_öput_d©a
 = skip_input_data;

193 
§c
->
pub
.
ªsync_to_ª°¨t
 = 
j≥g_ªsync_to_ª°¨t
;

194 
§c
->
pub
.
ãrm_sour˚
 =Åerm_source;

195 
§c
->
pub
.
√xt_öput_byã
 = 
buf„r
;

196 
§c
->
pub
.
byãs_ö_buf„r
 = 
bufsize
;

197 
	}
}

199 
jmp_buf
 
	g£tjmp_buf„r
;

202 
	$libj≥g_îr‹_h™dÀr
(
j_comm⁄_±r
 
cöfo
)

204 
cöfo
->
îr
->
	`ouçut_mesßge
(cinfo);

205 
	`l⁄gjmp
(
£tjmp_buf„r
, 1);

207 
	}
}

210 
	$image_‰ì
(
image_s
 *
pimage
)

212 
	`‰ì
(
pimage
->
buf
);

213 
	`‰ì
(
pimage
);

214 
	}
}

216 
pix


217 
	$gë_pix
(
image_s
 *
pimage
, 
öt32_t
 
x
, i¡32_à
y
)

219 if((
x
 >0Ë&& (
y
 >0Ë&& (x < 
pimage
->
width
Ë&& (y <Öimage->
height
))

221 (
pimage
->
buf
[(
y
 *Öimage->
width
Ë+ 
x
]);

225 
pix
 
vpix
 = 
BLACK
;

226 (
vpix
);

228 
	}
}

231 
	$put_pix_Æpha_ª∂a˚
(
image_s
 *
pimage
, 
öt32_t
 
x
, i¡32_à
y
, 
pix
 
cﬁ
)

233 if((
x
 >0Ë&& (
y
 >0Ë&& (x < 
pimage
->
width
Ë&& (y <Öimage->
height
))

234 
pimage
->
buf
[(
y
 *Öimage->
width
Ë+ 
x
] = 
cﬁ
;

235 
	}
}

238 
	$image_gë_j≥g_ªsﬁuti⁄
(c⁄° * 
∑th
, * 
width
, * 
height
)

240 
FILE
 *
img
;

241 
buf
[8];

242 
uöt16_t
 
off£t
, 
h
, 
w
;

243 
ªt
 = 1;

244 
size_t
 
ƒód
;

245 
size
;

248 
img
 = 
	`f›í
(
∑th
, "r");

249 if–!
img
 )

252 
	`f£ek
(
img
, 0, 
SEEK_END
);

253 
size
 = 
	`·ñl
(
img
);

254 
	`ªwöd
(
img
);

256 
ƒód
 = 
	`‰ód
(&
buf
, 2, 1, 
img
);

257 if–(
ƒód
 < 1Ë|| (
buf
[0] != 0xFF) || (buf[1] != 0xD8) )

259 
	`f˛o£
(
img
);

262 
	`mem£t
(&
buf
, 0, (buf));

264  
	`·ñl
(
img
Ë< 
size
 )

266  
ƒód
 > 0 && 
buf
[0] !0xFF && !
	`„of
(
img
) )

267 
ƒód
 = 
	`‰ód
(&
buf
, 1, 1, 
img
);

269  
ƒód
 > 0 && 
buf
[0] =0xFF && !
	`„of
(
img
) )

270 
ƒód
 = 
	`‰ód
(&
buf
, 1, 1, 
img
);

272 if–(
buf
[0] >= 0xc0) && (buf[0] <= 0xc3) )

274 
ƒód
 = 
	`‰ód
(&
buf
, 7, 1, 
img
);

275 *
width
 = 0;

276 *
height
 = 0;

277 if–
ƒód
 < 1 )

279 
	`mem˝y
(&
h
, 
buf
+3, 2);

280 *
height
 = 
	`SWAP16
(
h
);

281 
	`mem˝y
(&
w
, 
buf
+5, 2);

282 *
width
 = 
	`SWAP16
(
w
);

283 
ªt
 = 0;

288 
off£t
 = 0;

289 
ƒód
 = 
	`‰ód
(&
buf
, 2, 1, 
img
);

290 if–
ƒód
 < 1 )

292 
	`mem˝y
(&
off£t
, 
buf
, 2);

293 
off£t
 = 
	`SWAP16
(offset) - 2;

294 if–
	`f£ek
(
img
, 
off£t
, 
SEEK_CUR
) == -1 )

298 
	`f˛o£
(
img
);

299  
ªt
;

300 
	}
}

303 
	$image_gë_j≥g_d©e_xmp
(c⁄° * 
∑th
, ** 
d©e
)

305 
FILE
 *
img
;

306 
buf
[8];

307 *
d©a
 = 
NULL
, *
√wd©a
;

308 
uöt16_t
 
off£t
;

309 
NameVÆueP¨£rD©a
 
xml
;

310 * 
exif
;

311 
ªt
 = 1;

312 
size_t
 
ƒód
;

314 
img
 = 
	`f›í
(
∑th
, "r");

315 if–!
img
 )

318 
ƒód
 = 
	`‰ód
(&
buf
, 2, 1, 
img
);

319 if–(
ƒód
 < 1Ë|| (
buf
[0] != 0xFF) || (buf[1] != 0xD8) )

321 
	`f˛o£
(
img
);

324 
	`mem£t
(&
buf
, 0, (buf));

326  !
	`„of
(
img
) )

328  
ƒód
 > 0 && 
buf
[0] !0xFF && !
	`„of
(
img
) )

329 
ƒód
 = 
	`‰ód
(&
buf
, 1, 1, 
img
);

331  
ƒód
 > 0 && 
buf
[0] =0xFF && !
	`„of
(
img
) )

332 
ƒód
 = 
	`‰ód
(&
buf
, 1, 1, 
img
);

334 if–
	`„of
(
img
) )

337 if–
buf
[0] == 0xE1 )

339 
off£t
 = 0;

340 
ƒód
 = 
	`‰ód
(&
buf
, 2, 1, 
img
);

341 if–
ƒód
 < 1 )

343 
	`mem˝y
(&
off£t
, 
buf
, 2);

344 
off£t
 = 
	`SWAP16
(offset) - 2;

346 if–
off£t
 < 30 )

348 
	`f£ek
(
img
, 
off£t
, 
SEEK_CUR
);

352 
√wd©a
 = 
	`ªÆloc
(
d©a
, 30);

353 if–!
√wd©a
 )

355 
d©a
 = 
√wd©a
;

357 
ƒód
 = 
	`‰ód
(
d©a
, 29, 1, 
img
);

358 if–
ƒód
 < 1 )

360 
off£t
 -= 29;

361 if–
	`°rcmp
(
d©a
, "http://ns.adobe.com/xap/1.0/") != 0 )

363 
	`f£ek
(
img
, 
off£t
, 
SEEK_CUR
);

367 
√wd©a
 = 
	`ªÆloc
(
d©a
, 
off£t
+1);

368 if–!
√wd©a
 )

370 
d©a
 = 
√wd©a
;

371 
ƒód
 = 
	`‰ód
(
d©a
, 
off£t
, 1, 
img
);

372 if–
ƒód
 < 1 )

375 
	`P¨£NameVÆue
(
d©a
, 
off£t
, &
xml
, 0);

376 
exif
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "DateTimeOriginal");

377 if–!
exif
 )

379 
	`CÀ¨NameVÆueLi°
(&
xml
);

382 *
d©e
 = 
	`ªÆloc
(*d©e, 
	`°æí
(
exif
)+1);

383 
	`°r˝y
(*
d©e
, 
exif
);

384 
	`CÀ¨NameVÆueLi°
(&
xml
);

386 
ªt
 = 0;

391 
off£t
 = 0;

392 
ƒód
 = 
	`‰ód
(&
buf
, 2, 1, 
img
);

393 if–
ƒód
 < 1 )

395 
	`mem˝y
(&
off£t
, 
buf
, 2);

396 
off£t
 = 
	`SWAP16
(offset) - 2;

397 
	`f£ek
(
img
, 
off£t
, 
SEEK_CUR
);

400 
	`f˛o£
(
img
);

401 
	`‰ì
(
d©a
);

402  
ªt
;

403 
	}
}

405 
image_s
 *

406 
	$image_√w
(
öt32_t
 
width
, i¡32_à
height
)

408 
image_s
 *
vimage
;

410 if((
vimage
 = (
image_s
 *)
	`mÆloc
((image_s))Ë=
NULL
)

412 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "malloc failed\n");

413  
NULL
;

415 
vimage
->
width
 = width; vimage->
height
 = height;

417 if((
vimage
->
buf
 = (
pix
 *)
	`mÆloc
(
width
 * 
height
 * ’ix))Ë=
NULL
)

419 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "malloc failed\n");

420 
	`‰ì
(
vimage
);

421  
NULL
;

423 (
vimage
);

424 
	}
}

426 
image_s
 *

427 
	$image_√w_‰om_j≥g
(c⁄° * 
∑th
, 
is_fûe
, c⁄° * 
buf
, 
size
, 
sˇÀ
, 
rŸ©e
)

429 
image_s
 *
vimage
;

430 
FILE
 *
fûe
 = 
NULL
;

431 
j≥g_decom¥ess_°ru˘
 
cöfo
;

432 *
löe
[16], *
±r
;

433 
x
, 
y
, 
i
, 
w
, 
h
, 
ofs
;

434 
maxbuf
;

435 
j≥g_îr‹_mgr
 
pub
;

437 
cöfo
.
îr
 = 
	`j≥g_°d_îr‹
(&
pub
);

438 
pub
.
îr‹_exô
 = 
libj≥g_îr‹_h™dÀr
;

439 
	`j≥g_¸óã_decom¥ess
(&
cöfo
);

440 if–
is_fûe
 )

442 if–(
fûe
 = 
	`f›í
(
∑th
, "r")Ë=
NULL
 )

444  
NULL
;

446 
	`j≥g_°dio_§c
(&
cöfo
, 
fûe
);

450 
	`j≥g_mem‹y_§c
(&
cöfo
, (c⁄° *)
buf
, 
size
);

452 if–
	`£tjmp
(
£tjmp_buf„r
) )

454 
	`j≥g_de°roy_decom¥ess
(&
cöfo
);

455 if–
is_fûe
 && 
fûe
 )

456 
	`f˛o£
(
fûe
);

457  
NULL
;

459 
	`j≥g_ªad_hódî
(&
cöfo
, 
TRUE
);

460 
cöfo
.
sˇÀ_díom
 = 
sˇÀ
;

461 
cöfo
.
do_Áncy_upßm∂ög
 = 
FALSE
;

462 
cöfo
.
do_block_smoŸhög
 = 
FALSE
;

463 
	`j≥g_°¨t_decom¥ess
(&
cöfo
);

464 
w
 = 
cöfo
.
ouçut_width
;

465 
h
 = 
cöfo
.
ouçut_height
;

466 
vimage
 = (
rŸ©e
 & (
ROTATE_90
|
ROTATE_270
)Ë? 
	`image_√w
(
h
, 
w
) : image_new(w, h);

467 if(!
vimage
)

469 
	`j≥g_de°roy_decom¥ess
(&
cöfo
);

470 if–
is_fûe
 )

471 
	`f˛o£
(
fûe
);

472  
NULL
;

475 if–
	`£tjmp
(
£tjmp_buf„r
) )

477 
	`j≥g_de°roy_decom¥ess
(&
cöfo
);

478 if–
is_fûe
 && 
fûe
 )

479 
	`f˛o£
(
fûe
);

480 if–
vimage
 )

482 
	`‰ì
(
vimage
->
buf
);

483 
	`‰ì
(
vimage
);

485  
NULL
;

488 if(
cöfo
.
ªc_outbuf_height
 > 16)

490 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "ERROR image_from_jpeg : (image_from_jpeg.c) JPEG usesÜine buffers > 16. CannotÜoad.\n");

491 
	`image_‰ì
(
vimage
);

492 if–
is_fûe
 )

493 
	`f˛o£
(
fûe
);

494  
NULL
;

496 
maxbuf
 = 
vimage
->
width
 * vimage->
height
;

497 if(
cöfo
.
ouçut_comp⁄íts
 == 3)

499 
rx
, 
ry
;

500 
ofs
 = 0;

501 if((
±r
 = 
	`mÆloc
(
w
 * 3 * 
cöfo
.
ªc_outbuf_height
 + 16)Ë=
NULL
)

503 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "malloc failed\n");

504 
	`image_‰ì
(
vimage
);

505 if–
is_fûe
 )

506 
	`f˛o£
(
fûe
);

507  
NULL
;

510 
y
 = 0; y < 
h
; y +
cöfo
.
ªc_outbuf_height
)

512 
ry
 = (
rŸ©e
 & (
ROTATE_90
|
ROTATE_180
)Ë? (
y
 - 
h
 + 1) * -1 : y;

513 
i
 = 0; i < 
cöfo
.
ªc_outbuf_height
; i++)

515 
löe
[
i
] = 
±r
 + (
w
 * 3 * i);

517 
	`j≥g_ªad_sˇ∆öes
(&
cöfo
, 
löe
, cöfo.
ªc_outbuf_height
);

518 
x
 = 0; x < 
w
 * 
cöfo
.
ªc_outbuf_height
; x++)

520 
rx
 = (
rŸ©e
 & (
ROTATE_180
|
ROTATE_270
)Ë? (
x
 - 
w
 + 1) * -1 : x;

521 
ofs
 = (
rŸ©e
 & (
ROTATE_90
|
ROTATE_270
)Ë? 
ry
 + (
rx
 * 
h
Ë:Ñx + (ry * 
w
);

522 if–
ofs
 < 
maxbuf
 )

523 
vimage
->
buf
[
ofs
] = 
	`COL
(
±r
[
x
 + x + x],Ötr[x + x + x + 1],Ötr[x + x + x + 2]);

526 
	`‰ì
(
±r
);

528 if(
cöfo
.
ouçut_comp⁄íts
 == 1)

530 
ofs
 = 0;

531 
i
 = 0; i < 
cöfo
.
ªc_outbuf_height
; i++)

533 if((
löe
[
i
] = 
	`mÆloc
(
w
)Ë=
NULL
)

535 
t
 = 0;

537 
t
 = 0;Å < 
i
;Å++Ë
	`‰ì
(
löe
[t]);

538 
	`j≥g_de°roy_decom¥ess
(&
cöfo
);

539 
	`image_‰ì
(
vimage
);

540 if–
is_fûe
 )

541 
	`f˛o£
(
fûe
);

542  
NULL
;

545 
y
 = 0; y < 
h
; y +
cöfo
.
ªc_outbuf_height
)

547 
	`j≥g_ªad_sˇ∆öes
(&
cöfo
, 
löe
, cöfo.
ªc_outbuf_height
);

548 
i
 = 0; i < 
cöfo
.
ªc_outbuf_height
; i++)

550 
x
 = 0; x < 
w
; x++)

552 
vimage
->
buf
[
ofs
++] = 
	`COL
(
löe
[
i
][
x
],Üine[i][x],Üine[i][x]);

556 
i
 = 0; i < 
cöfo
.
ªc_outbuf_height
; i++)

558 
	`‰ì
(
löe
[
i
]);

561 
	`j≥g_föish_decom¥ess
(&
cöfo
);

562 
	`j≥g_de°roy_decom¥ess
(&
cöfo
);

563 if–
is_fûe
 )

564 
	`f˛o£
(
fûe
);

566  
vimage
;

567 
	}
}

570 
	$image_upsize
(
image_s
 * 
pde°
, image_†* 
p§c
, 
öt32_t
 
width
, i¡32_à
height
)

572 
öt32_t
 
vx
, 
vy
;

573 #i‡!
deföed
 
__i386__
 && !deföed 
__x86_64__


574 
öt32_t
 
rx
, 
ry
;

575 
pix
 
vcﬁ
;

577 if((
pde°
 =
NULL
Ë|| (
p§c
 == NULL))

580 
vy
 = 0; vy < 
height
; vy++)

582 
vx
 = 0; vx < 
width
; vx++)

584 
rx
 = ((
vx
 * 
p§c
->
width
) / width);

585 
ry
 = ((
vy
 * 
p§c
->
height
) / height);

586 
vcﬁ
 = 
	`gë_pix
(
p§c
, 
rx
, 
ry
);

588 
pix
 
vcﬁ
,
vcﬁ1
,
vcﬁ2
,
vcﬁ3
,
vcﬁ4
;

589 
rx
,
ry
;

590 
width_sˇÀ
, 
height_sˇÀ
;

591 
x_di°
, 
y_di°
;

593 
width_sˇÀ
 = ()
p§c
->
width
 / ()width;

594 
height_sˇÀ
 = ()
p§c
->
height
 / ()height;

596 
vy
 = 0;vy < 
height
; vy++)

598 
vx
 = 0;vx < 
width
; vx++)

600 
rx
 = 
vx
 * 
width_sˇÀ
;

601 
ry
 = 
vy
 * 
height_sˇÀ
;

602 
vcﬁ1
 = 
	`gë_pix
(
p§c
, (
öt32_t
)
rx
, (öt32_t)
ry
);

603 
vcﬁ2
 = 
	`gë_pix
(
p§c
, ((
öt32_t
)
rx
)+1, (öt32_t)
ry
);

604 
vcﬁ3
 = 
	`gë_pix
(
p§c
, (
öt32_t
)
rx
, ((öt32_t)
ry
)+1);

605 
vcﬁ4
 = 
	`gë_pix
(
p§c
, ((
öt32_t
)
rx
)+1, ((öt32_t)
ry
)+1);

607 
x_di°
 = 
rx
 - (()((
öt32_t
)rx));

608 
y_di°
 = 
ry
 - (()((
öt32_t
)ry));

609 
vcﬁ
 = 
	`COL_FULL
–(
uöt8_t
)((
	`COL_RED
(
vcﬁ1
)*(1.0-
x_di°
)

610 + 
	`COL_RED
(
vcﬁ2
)*(
x_di°
))*(1.0-
y_di°
)

611 + (
	`COL_RED
(
vcﬁ3
)*(1.0-
x_di°
)

612 + 
	`COL_RED
(
vcﬁ4
)*(
x_di°
))*(
y_di°
)),

613 (
uöt8_t
)((
	`COL_GREEN
(
vcﬁ1
)*(1.0-
x_di°
)

614 + 
	`COL_GREEN
(
vcﬁ2
)*(
x_di°
))*(1.0-
y_di°
)

615 + (
	`COL_GREEN
(
vcﬁ3
)*(1.0-
x_di°
)

616 + 
	`COL_GREEN
(
vcﬁ4
)*(
x_di°
))*(
y_di°
)),

617 (
uöt8_t
)((
	`COL_BLUE
(
vcﬁ1
)*(1.0-
x_di°
)

618 + 
	`COL_BLUE
(
vcﬁ2
)*(
x_di°
))*(1.0-
y_di°
)

619 + (
	`COL_BLUE
(
vcﬁ3
)*(1.0-
x_di°
)

620 + 
	`COL_BLUE
(
vcﬁ4
)*(
x_di°
))*(
y_di°
)),

621 (
uöt8_t
)((
	`COL_ALPHA
(
vcﬁ1
)*(1.0-
x_di°
)

622 + 
	`COL_ALPHA
(
vcﬁ2
)*(
x_di°
))*(1.0-
y_di°
)

623 + (
	`COL_ALPHA
(
vcﬁ3
)*(1.0-
x_di°
)

624 + 
	`COL_ALPHA
(
vcﬁ4
)*(
x_di°
))*(
y_di°
))

627 
	`put_pix_Æpha_ª∂a˚
(
pde°
, 
vx
, 
vy
, 
vcﬁ
);

630 
	}
}

633 
	$image_downsize
(
image_s
 * 
pde°
, image_†* 
p§c
, 
öt32_t
 
width
, i¡32_à
height
)

635 
öt32_t
 
vx
, 
vy
;

636 
pix
 
vcﬁ
;

637 
öt32_t
 
i
, 
j
;

638 #i‡!
deföed
 
__i386__
 && !deföed 
__x86_64__


639 
öt32_t
 
rx
, 
ry
, 
rx_√xt
, 
ry_√xt
;

640 
ªd
, 
gªí
, 
blue
, 
Æpha
;

641 
Á˘‹
;

643 if((
pde°
 =
NULL
Ë|| (
p§c
 == NULL))

646 
vy
 = 0; vy < 
height
; vy++)

648 
vx
 = 0; vx < 
width
; vx++)

651 
rx
 = ((
vx
 * 
p§c
->
width
) / width);

652 
ry
 = ((
vy
 * 
p§c
->
height
) / height);

654 
ªd
 = 
gªí
 = 
blue
 = 
Æpha
 = 0;

656 
rx_√xt
 = 
rx
 + (
p§c
->
width
 / width);

657 
ry_√xt
 = 
ry
 + (
p§c
->
width
 / width);

658 
Á˘‹
 = 0;

660  
j
 = 
rx
; j < 
rx_√xt
; j++)

662  
i
 = 
ry
; i < 
ry_√xt
; i++)

664 
Á˘‹
 += 1;

665 
vcﬁ
 = 
	`gë_pix
(
p§c
, 
j
, 
i
);

667 
ªd
 +
	`COL_RED
(
vcﬁ
);

668 
gªí
 +
	`COL_GREEN
(
vcﬁ
);

669 
blue
 +
	`COL_BLUE
(
vcﬁ
);

670 
Æpha
 +
	`COL_ALPHA
(
vcﬁ
);

674 
ªd
 /
Á˘‹
;

675 
gªí
 /
Á˘‹
;

676 
blue
 /
Á˘‹
;

677 
Æpha
 /
Á˘‹
;

680 
ªd
 = (red > 255) ? 255 : ((red < 0) ? 0 :Ñed );

681 
gªí
 = (green > 255) ? 255 : ((green < 0) ? 0 : green);

682 
blue
 = (blue > 255) ? 255 : ((blue < 0) ? 0 : blue );

683 
Æpha
 = (alpha > 255) ? 255 : ((alpha < 0) ? 0 :álpha);

685 
rx
,
ry
;

686 
width_sˇÀ
, 
height_sˇÀ
;

687 
ªd
, 
gªí
, 
blue
, 
Æpha
;

688 
öt32_t
 
hÆf_squ¨e_width
, 
hÆf_squ¨e_height
;

689 
round_width
, 
round_height
;

691 if–(
pde°
 =
NULL
Ë|| (
p§c
 == NULL) )

694 
width_sˇÀ
 = ()
p§c
->
width
 / ()width;

695 
height_sˇÀ
 = ()
p§c
->
height
 / ()height;

697 
hÆf_squ¨e_width
 = (
öt32_t
)(
width_sˇÀ
 / 2.0);

698 
hÆf_squ¨e_height
 = (
öt32_t
)(
height_sˇÀ
 / 2.0);

699 
round_width
 = (
width_sˇÀ
 / 2.0Ë- ()
hÆf_squ¨e_width
;

700 
round_height
 = (
height_sˇÀ
 / 2.0Ë- ()
hÆf_squ¨e_height
;

701 if(
round_width
 > 0.0)

702 
hÆf_squ¨e_width
++;

704 
round_width
 = 1.0;

705 if(
round_height
 > 0.0)

706 
hÆf_squ¨e_height
++;

708 
round_height
 = 1.0;

710 
vy
 = 0;vy < 
height
; vy++)

712 
vx
 = 0;vx < 
width
; vx++)

714 
rx
 = 
vx
 * 
width_sˇÀ
;

715 
ry
 = 
vy
 * 
height_sˇÀ
;

716 
vcﬁ
 = 
	`gë_pix
(
p§c
, (
öt32_t
)
rx
, (öt32_t)
ry
);

718 
ªd
 = 
gªí
 = 
blue
 = 
Æpha
 = 0.0;

720 
j
=0;j<
hÆf_squ¨e_height
<<1;j++)

722 
i
=0;i<
hÆf_squ¨e_width
<<1;i++)

724 
vcﬁ
 = 
	`gë_pix
(
p§c
, ((
öt32_t
)
rx
)-
hÆf_squ¨e_width
+
i
,

725 ((
öt32_t
)
ry
)-
hÆf_squ¨e_height
+
j
);

727 if(((
j
 =0Ë|| (j =(
hÆf_squ¨e_height
<<1)-1)) &&

728 ((
i
 =0Ë|| (ò=(
hÆf_squ¨e_width
<<1)-1)))

730 
ªd
 +
round_width
*
round_height
*()
	`COL_RED
 (
vcﬁ
);

731 
gªí
 +
round_width
*
round_height
*()
	`COL_GREEN
(
vcﬁ
);

732 
blue
 +
round_width
*
round_height
*()
	`COL_BLUE
 (
vcﬁ
);

733 
Æpha
 +
round_width
*
round_height
*()
	`COL_ALPHA
(
vcﬁ
);

735 if((
j
 =0Ë|| (j =(
hÆf_squ¨e_height
<<1)-1))

737 
ªd
 +
round_height
*()
	`COL_RED
 (
vcﬁ
);

738 
gªí
 +
round_height
*()
	`COL_GREEN
(
vcﬁ
);

739 
blue
 +
round_height
*()
	`COL_BLUE
 (
vcﬁ
);

740 
Æpha
 +
round_height
*()
	`COL_ALPHA
(
vcﬁ
);

742 if((
i
 =0Ë|| (ò=(
hÆf_squ¨e_width
<<1)-1))

744 
ªd
 +
round_width
*()
	`COL_RED
 (
vcﬁ
);

745 
gªí
 +
round_width
*()
	`COL_GREEN
(
vcﬁ
);

746 
blue
 +
round_width
*()
	`COL_BLUE
 (
vcﬁ
);

747 
Æpha
 +
round_width
*()
	`COL_ALPHA
(
vcﬁ
);

751 
ªd
 +()
	`COL_RED
 (
vcﬁ
);

752 
gªí
 +()
	`COL_GREEN
(
vcﬁ
);

753 
blue
 +()
	`COL_BLUE
 (
vcﬁ
);

754 
Æpha
 +()
	`COL_ALPHA
(
vcﬁ
);

759 
ªd
 /
width_sˇÀ
*
height_sˇÀ
;

760 
gªí
 /
width_sˇÀ
*
height_sˇÀ
;

761 
blue
 /
width_sˇÀ
*
height_sˇÀ
;

762 
Æpha
 /
width_sˇÀ
*
height_sˇÀ
;

765 
ªd
 = (red > 255.0)? 255.0 : ((red < 0.0)? 0.0:red );

766 
gªí
 = (green > 255.0)? 255.0 : ((green < 0.0)? 0.0:green);

767 
blue
 = (blue > 255.0)? 255.0 : ((blue < 0.0)? 0.0:blue );

768 
Æpha
 = (alpha > 255.0)? 255.0 : ((alpha < 0.0)? 0.0:alpha);

770 
	`put_pix_Æpha_ª∂a˚
(
pde°
, 
vx
, 
vy
,

771 
	`COL_FULL
((
uöt8_t
)
ªd
, (uöt8_t)
gªí
, (uöt8_t)
blue
, (uöt8_t)
Æpha
));

774 
	}
}

776 
image_s
 *

777 
	$image_ªsize
(
image_s
 * 
§c_image
, 
öt32_t
 
width
, i¡32_à
height
)

779 
image_s
 * 
d°_image
;

781 
d°_image
 = 
	`image_√w
(
width
, 
height
);

782 if–!
d°_image
 )

783  
NULL
;

784 if–(
§c_image
->
width
 < widthË|| (§c_image->
height
 < height) )

785 
	`image_upsize
(
d°_image
, 
§c_image
, 
width
, 
height
);

787 
	`image_downsize
(
d°_image
, 
§c_image
, 
width
, 
height
);

789  
d°_image
;

790 
	}
}

794 
	$image_ßve_to_j≥g_buf
(
image_s
 * 
pimage
, * 
size
)

796 
j≥g_com¥ess_°ru˘
 
cöfo
;

797 
j≥g_îr‹_mgr
 
jîr
;

798 
JSAMPROW
 
row_poöãr
[1];

799 
row_°ride
;

800 *
d©a
;

801 
i
, 
x
;

802 
my_d°_mgr
 
d°
;

804 
cöfo
.
îr
 = 
	`j≥g_°d_îr‹
(&
jîr
);

805 
	`j≥g_¸óã_com¥ess
(&
cöfo
);

806 
	`j≥g_mem‹y_de°
(&
cöfo
, &
d°
);

807 
cöfo
.
image_width
 = 
pimage
->
width
;

808 
cöfo
.
image_height
 = 
pimage
->
height
;

809 
cöfo
.
öput_comp⁄íts
 = 3;

810 
cöfo
.
ö_cﬁ‹_•a˚
 = 
JCS_RGB
;

811 
	`j≥g_£t_deÁu…s
(&
cöfo
);

812 
	`j≥g_£t_quÆôy
(&
cöfo
, 
JPEG_QUALITY
, 
TRUE
);

813 
	`j≥g_°¨t_com¥ess
(&
cöfo
, 
TRUE
);

814 
row_°ride
 = 
cöfo
.
image_width
 * 3;

815 if((
d©a
 = 
	`mÆloc
(
row_°ride
)Ë=
NULL
)

817 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "malloc failed\n");

818  
NULL
;

820 
i
 = 0;

821 
cöfo
.
√xt_sˇ∆öe
 < cöfo.
image_height
)

823 
x
 = 0; x < 
pimage
->
width
; x++)

825 
d©a
[
x
 * 3] = 
	`COL_RED
(
pimage
->
buf
[
i
]);

826 
d©a
[
x
 * 3 + 1] = 
	`COL_GREEN
(
pimage
->
buf
[
i
]);

827 
d©a
[
x
 * 3 + 2] = 
	`COL_BLUE
(
pimage
->
buf
[
i
]);

828 
i
++;

830 
row_poöãr
[0] = (*)
d©a
;

831 
	`j≥g_wrôe_sˇ∆öes
(&
cöfo
, 
row_poöãr
, 1);

833 
	`j≥g_föish_com¥ess
(&
cöfo
);

834 *
size
 = 
d°
.
u£d
;

835 
	`‰ì
(
d©a
);

836 
	`j≥g_de°roy_com¥ess
(&
cöfo
);

838  
d°
.
buf
;

839 
	}
}

842 
	$image_ßve_to_j≥g_fûe
(
image_s
 * 
pimage
, c⁄° * 
∑th
)

844 
nwrôãn
, 
size
 = 0;

845 * 
buf
;

846 
FILE
 * 
d°_fûe
;

848 
buf
 = 
	`image_ßve_to_j≥g_buf
(
pimage
, &
size
);

849 if–!
buf
 )

851 
d°_fûe
 = 
	`f›í
(
∑th
, "w");

852 if–!
d°_fûe
 )

854 
	`‰ì
(
buf
);

857 
nwrôãn
 = 
	`fwrôe
(
buf
, 1, 
size
, 
d°_fûe
);

858 
	`f˛o£
(
d°_fûe
);

859 
	`‰ì
(
buf
);

861  (
nwrôãn
==
size
 ? 0 : 1);

862 
	}
}

	@image_utils.h

24 
	~<öây≥s.h
>

26 
	#ROTATE_NONE
 0x0

	)

27 
	#ROTATE_90
 0x1

	)

28 
	#ROTATE_180
 0x2

	)

29 
	#ROTATE_270
 0x4

	)

31 
uöt32_t
 
	tpix
;

34 
öt32_t
 
	mwidth
;

35 
öt32_t
 
	mheight
;

36 
pix
 *
	mbuf
;

37 } 
	timage_s
;

40 
image_‰ì
(
image_s
 *
pimage
);

43 
image_gë_j≥g_d©e_xmp
(c⁄° * 
∑th
, ** 
d©e
);

46 
image_gë_j≥g_ªsﬁuti⁄
(c⁄° * 
∑th
, * 
width
, * 
height
);

48 
image_s
 *

49 
image_√w_‰om_j≥g
(c⁄° * 
∑th
, 
is_fûe
, c⁄° * 
±r
, 
size
, 
sˇÀ
, 
ªsize
);

51 
image_s
 *

52 
image_ªsize
(
image_s
 * 
§c_image
, 
öt32_t
 
width
, i¡32_à
height
);

55 
image_ßve_to_j≥g_buf
(
image_s
 * 
pimage
, * 
size
);

58 
image_ßve_to_j≥g_fûe
(
image_s
 * 
pimage
, c⁄° * 
∑th
);

	@inotify.c

18 
	~"c⁄fig.h
"

20 #ifde‡
HAVE_INOTIFY


21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<î∫o.h
>

25 
	~<uni°d.h
>

26 
	~<dúít.h
>

27 
	~<libgí.h
>

28 
	~<î∫o.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/time.h
>

32 
	~<sys/ªsour˚.h
>

33 
	~<pﬁl.h
>

34 #ifde‡
HAVE_SYS_INOTIFY_H


35 
	~<sys/öŸify.h
>

37 
	~"löux/öŸify.h
"

38 
	~"löux/öŸify-sysˇŒs.h
"

40 
	~"libav.h
"

42 
	~"u≤pglobÆv¨s.h
"

43 
	~"öŸify.h
"

44 
	~"utûs.h
"

45 
	~"sql.h
"

46 
	~"sˇ¬î.h
"

47 
	~"mëad©a.h
"

48 
	~"Æbum¨t.h
"

49 
	~"∂ayli°.h
"

50 
	~"log.h
"

52 
	#EVENT_SIZE
 (  (
öŸify_evít
Ë)

	)

53 
	#BUF_LEN
 ( 1024 * ( 
EVENT_SIZE
 + 16 ) )

	)

54 
	#DESIRED_WATCH_LIMIT
 65536

	)

56 
	#PATH_BUF_SIZE
 
PATH_MAX


	)

58 
	sw©ch


60 
	mwd
;

61 *
	m∑th
;

62 
w©ch
 *
	m√xt
;

65 
w©ch
 *
	gw©ches
;

66 
w©ch
 *
	gœ°w©ch
 = 
NULL
;

67 
time_t
 
	g√xt_∂_fûl
 = 0;

69 *
	$gë_∑th_‰om_wd
(
wd
)

71 
w©ch
 *
w
 = 
w©ches
;

73  
w
 !
NULL
 )

75 if–
w
->
wd
 == wd )

76  
w
->
∑th
;

77 
w
 = w->
√xt
;

80  
NULL
;

81 
	}
}

84 
	$add_w©ch
(
fd
, c⁄° * 
∑th
)

86 
w©ch
 *
nw
;

87 
wd
;

89 
wd
 = 
	`öŸify_add_w©ch
(
fd
, 
∑th
, 
IN_CREATE
|
IN_CLOSE_WRITE
|
IN_DELETE
|
IN_MOVE
);

90 if–
wd
 < 0 )

92 
	`DPRINTF
(
E_ERROR
, 
L_INOTIFY
, "öŸify_add_w©ch(%sË[%s]\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

96 
nw
 = 
	`mÆloc
((
w©ch
));

97 if–
nw
 =
NULL
 )

99 
	`DPRINTF
(
E_ERROR
, 
L_INOTIFY
, "malloc()Érror\n");

102 
nw
->
wd
 = wd;

103 
nw
->
√xt
 = 
NULL
;

104 
nw
->
∑th
 = 
	`°rdup
(path);

106 if–
w©ches
 =
NULL
 )

108 
w©ches
 = 
nw
;

111 if–
œ°w©ch
 !
NULL
 )

113 
œ°w©ch
->
√xt
 = 
nw
;

115 
œ°w©ch
 = 
nw
;

117  
wd
;

118 
	}
}

121 
	$ªmove_w©ch
(
fd
, c⁄° * 
∑th
)

123 
w©ch
 *
w
;

125  
w
 = 
w©ches
; w; w = w->
√xt
 )

127 if–
	`°rcmp
(
∑th
, 
w
->path) == 0 )

128 (
	`öŸify_rm_w©ch
(
fd
, 
w
->
wd
));

132 
	}
}

135 
	$√xt_highe°
(
num
)

137 
num
 |=Çum >> 1;

138 
num
 |=Çum >> 2;

139 
num
 |=Çum >> 4;

140 
num
 |=Çum >> 8;

141 
num
 |=Çum >> 16;

142 (++
num
);

143 
	}
}

146 
	$öŸify_¸óã_w©ches
(
fd
)

148 
FILE
 * 
max_w©ches
;

149 
num_w©ches
 = 0, 
w©ch_limô
;

150 **
ªsu…
;

151 
i
, 
rows
 = 0;

152 
medü_dú_s
 * 
medü_∑th
;

154  
medü_∑th
 = 
medü_dús
; medü_∑th !
NULL
; medü_∑th = medü_∑th->
√xt
 )

156 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "Add w©chÅÿ%s\n", 
medü_∑th
->
∑th
);

157 
	`add_w©ch
(
fd
, 
medü_∑th
->
∑th
);

158 
num_w©ches
++;

160 
	`sql_gë_èbÀ
(
db
, "SELECT PATH from DETAILS whîêMIME i†NULLánd PATH i†nŸ NULL", &
ªsu…
, &
rows
, 
NULL
);

161  
i
=1; i <
rows
; i++ )

163 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "Add w©chÅÿ%s\n", 
ªsu…
[
i
]);

164 
	`add_w©ch
(
fd
, 
ªsu…
[
i
]);

165 
num_w©ches
++;

167 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

169 
max_w©ches
 = 
	`f›í
("/proc/sys/fs/inotify/max_user_watches", "r");

170 if–
max_w©ches
 )

172 if–
	`fsˇnf
(
max_w©ches
, "%10u", &
w©ch_limô
) < 1 )

173 
w©ch_limô
 = 8192;

174 
	`f˛o£
(
max_w©ches
);

175 if–(
w©ch_limô
 < 
DESIRED_WATCH_LIMIT
Ë|| (w©ch_limô < (
num_w©ches
*4/3)) )

177 
max_w©ches
 = 
	`f›í
("/proc/sys/fs/inotify/max_user_watches", "w");

178 if–
max_w©ches
 )

180 if–
DESIRED_WATCH_LIMIT
 >(
num_w©ches
*3/4) )

182 
	`Ârötf
(
max_w©ches
, "%u", 
DESIRED_WATCH_LIMIT
);

184 if–
	`√xt_highe°
(
num_w©ches
) >= (num_watches*3/4) )

186 
	`Ârötf
(
max_w©ches
, "%u", 
	`√xt_highe°
(
num_w©ches
));

190 
	`Ârötf
(
max_w©ches
, "%u", 
	`√xt_highe°
“ext_highe°(
num_w©ches
)));

192 
	`f˛o£
(
max_w©ches
);

196 
	`DPRINTF
(
E_WARN
, 
L_INOTIFY
, "WARNING: Inotify max_user_watches [%u] isÜow or closeÅoÅheÇumber of used watches [%u] "

198 "wrôögá highî vÆuêötÿ/¥oc/sys/fs/öŸify/max_u£r_w©ches.\n", 
w©ch_limô
, 
num_w©ches
);

204 
	`DPRINTF
(
E_WARN
, 
L_INOTIFY
, "WARNING: CouldÇotÑead inotify max_user_watches! "

205 "H›efuŒy iài†íoughÅÿcovî %u cuºíàdúe˘‹õ†∂u†™yÇew o√†added.\n", 
num_w©ches
);

208  
rows
;

209 
	}
}

212 
	$öŸify_ªmove_w©ches
(
fd
)

214 
w©ch
 *
w
 = 
w©ches
;

215 
w©ch
 *
œ°_w
;

216 
rm_w©ches
 = 0;

218  
w
 )

220 
œ°_w
 = 
w
;

221 
	`öŸify_rm_w©ch
(
fd
, 
w
->
wd
);

222 
	`‰ì
(
w
->
∑th
);

223 
rm_w©ches
++;

224 
w
 = w->
√xt
;

225 
	`‰ì
(
œ°_w
);

228  
rm_w©ches
;

229 
	}
}

231 
	$add_dú_w©ch
(
fd
, * 
∑th
, * 
fûíame
)

233 
DIR
 *
ds
;

234 
dúít
 *
e
;

235 *
dú
;

236 
buf
[
PATH_MAX
];

237 
wd
;

238 
i
 = 0;

240 if–
fûíame
 )

242 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
∑th
, 
fûíame
);

243 
dú
 = 
buf
;

246 
dú
 = 
∑th
;

248 
wd
 = 
	`add_w©ch
(
fd
, 
dú
);

249 if–
wd
 == -1 )

251 
	`DPRINTF
(
E_ERROR
, 
L_INOTIFY
, "add_w©ch(Ë[%s]\n", 
	`°ªº‹
(
î∫o
));

255 
	`DPRINTF
(
E_INFO
, 
L_INOTIFY
, "Added w©chÅÿ%†[%d]\n", 
dú
, 
wd
);

258 
ds
 = 
	`›ídú
(
dú
);

259 if–
ds
 !
NULL
 )

261  (
e
 = 
	`ªaddú
(
ds
)) )

263 if–
	`°rcmp
(
e
->
d_«me
, ".") == 0 ||

264 
	`°rcmp
(
e
->
d_«me
, "..") == 0 )

266 if–(
e
->
d_ty≥
 =
DT_DIR
) ||

267 (
e
->
d_ty≥
 =
DT_UNKNOWN
 && 
	`ªsﬁve_unknown_ty≥
(
dú
, 
NO_MEDIA
Ë=
TYPE_DIR
) )

268 
i
 +
	`add_dú_w©ch
(
fd
, 
dú
, 
e
->
d_«me
);

273 
	`DPRINTF
(
E_ERROR
, 
L_INOTIFY
, "O≥ndúÉº‹! [%s]\n", 
	`°ªº‹
(
î∫o
));

275 
	`˛o£dú
(
ds
);

276 
i
++;

278 (
i
);

279 
	}
}

282 
	$öŸify_ö£π_fûe
(* 
«me
, c⁄° * 
∑th
)

284 
Àn
;

285 * 
œ°_dú
;

286 * 
∑th_buf
;

287 * 
ba£_«me
;

288 * 
ba£_c›y
;

289 * 
∑ª¡_buf
 = 
NULL
;

290 * 
id
 = 
NULL
;

291 
dïth
 = 1;

292 
ts
;

293 
medü_ty≥s
 
ty≥s
 = 
ALL_MEDIA
;

294 
medü_dú_s
 * 
medü_∑th
 = 
medü_dús
;

295 
°©
 
°
;

298 if–
	`is_image
(
∑th
) )

299 
	`upd©e_if_Æbum_¨t
(
∑th
);

300 if–
	`íds_wôh
(
∑th
, ".srt") )

301 
	`check_f‹_ˇ±i⁄s
(
∑th
, 0);

304  
medü_∑th
 )

306 if–
	`°∫cmp
(
∑th
, 
medü_∑th
->∑th, 
	`°æí
(media_path->path)) == 0 )

308 
ty≥s
 = 
medü_∑th
->types;

311 
medü_∑th
 = medü_∑th->
√xt
;

313  
ty≥s
 )

315 
ALL_MEDIA
:

316 if–!
	`is_image
(
∑th
) &&

317 !
	`is_audio
(
∑th
) &&

318 !
	`is_video
(
∑th
) &&

319 !
	`is_∂ayli°
(
∑th
) )

322 
TYPE_AUDIO
:

323 if–!
	`is_audio
(
∑th
) &&

324 !
	`is_∂ayli°
(
∑th
) )

327 
TYPE_AUDIO
|
TYPE_VIDEO
:

328 if–!
	`is_audio
(
∑th
) &&

329 !
	`is_video
(
∑th
) &&

330 !
	`is_∂ayli°
(
∑th
) )

332 
TYPE_AUDIO
|
TYPE_IMAGES
:

333 if–!
	`is_image
(
∑th
) &&

334 !
	`is_audio
(
∑th
) &&

335 !
	`is_∂ayli°
(
∑th
) )

338 
TYPE_VIDEO
:

339 if–!
	`is_video
(
∑th
) )

342 
TYPE_VIDEO
|
TYPE_IMAGES
:

343 if–!
	`is_image
(
∑th
) &&

344 !
	`is_video
(
∑th
) )

347 
TYPE_IMAGES
:

348 if–!
	`is_image
(
∑th
) )

357 if–
	`°©
(
∑th
, &
°
) != 0 )

360 
ts
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT TIMESTAMP from DETAILS whîêPATH = '%q'", 
∑th
);

361 if–!
ts
 && 
	`is_∂ayli°
(
∑th
Ë&& (
	`sql_gë_öt_fõld
(
db
, "SELECT ID from PLAYLISTS where PATH = '%q'",Öath) > 0) )

363 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "Re-ªadög modifõdÖœyli°.\n", 
∑th
);

364 
	`öŸify_ªmove_fûe
(
∑th
);

365 
√xt_∂_fûl
 = 1;

367 if–
ts
 < 
°
.
°_mtime
 )

369 if–
ts
 > 0 )

370 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "%†i†√wîÅh™Åhêœ° dbÉ¡ry.\n", 
∑th
);

371 
	`öŸify_ªmove_fûe
(
∑th
);

375 
Àn
 = 
	`°æí
(
∑th
)+1;

376 if–!(
∑th_buf
 = 
	`mÆloc
(
Àn
)) ||

377 !(
œ°_dú
 = 
	`mÆloc
(
Àn
)) ||

378 !(
ba£_«me
 = 
	`mÆloc
(
Àn
)) )

380 
ba£_c›y
 = 
ba£_«me
;

381  
dïth
 )

383 
dïth
 = 0;

384 
	`°r˝y
(
∑th_buf
, 
∑th
);

385 
∑ª¡_buf
 = 
	`dú«me
(
∑th_buf
);

390 
id
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT OBJECT_ID from OBJECTS oÜeft join DETAILS d on (d.ID = o.DETAIL_ID)"

391 " whîêd.PATH = '%q'ánd REF_ID i†NULL", 
∑ª¡_buf
);

392 if–
id
 )

394 if–!
dïth
 )

396 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "Found fú° know¿∑ª¡ID: %†[%s]\n", 
id
, 
∑ª¡_buf
);

398 
	`°r˝y
(
ba£_«me
, 
œ°_dú
);

399 
ba£_c›y
 = 
	`ba£«me
(
ba£_«me
);

400 
	`ö£π_dúe˘‹y
(
ba£_c›y
, 
œ°_dú
, 
BROWSEDIR_ID
, 
id
+2, 
	`gë_√xt_avaûabÀ_id
("OBJECTS", id));

401 
	`sqlôe3_‰ì
(
id
);

404 
dïth
++;

405 
	`°r˝y
(
œ°_dú
, 
∑ª¡_buf
);

406 
∑ª¡_buf
 = 
	`dú«me
(parent_buf);

408  
	`°rcmp
(
∑ª¡_buf
, "/") != 0 );

410 if–
	`°rcmp
(
∑ª¡_buf
, "/") == 0 )

412 
id
 = 
	`sqlôe3_m¥ötf
("%s", 
BROWSEDIR_ID
);

413 
dïth
 = 0;

416 
	`°r˝y
(
∑th_buf
, 
∑th
);

418 
	`‰ì
(
œ°_dú
);

419 
	`‰ì
(
∑th_buf
);

420 
	`‰ì
(
ba£_«me
);

422 if–!
dïth
 )

425 
	`ö£π_fûe
(
«me
, 
∑th
, 
id
+2, 
	`gë_√xt_avaûabÀ_id
("OBJECTS", id));

426 
	`sqlôe3_‰ì
(
id
);

427 if–(
	`is_audio
(
∑th
Ë|| 
	`is_∂ayli°
’©h)Ë&& 
√xt_∂_fûl
 != 1 )

429 
√xt_∂_fûl
 = 
	`time
(
NULL
) + 120;

433  
dïth
;

434 
	}
}

437 
	$öŸify_ö£π_dúe˘‹y
(
fd
, *
«me
, c⁄° * 
∑th
)

439 
DIR
 * 
ds
;

440 
dúít
 * 
e
;

441 *
id
, *
∑ª¡_buf
, *
esc_«me
;

442 
∑th_buf
[
PATH_MAX
];

443 
wd
;

444 
fûe_ty≥s
 
ty≥
 = 
TYPE_UNKNOWN
;

445 
medü_ty≥s
 
dú_ty≥s
 = 
ALL_MEDIA
;

446 
medü_dú_s
* 
medü_∑th
;

447 
°©
 
°
;

449 if–
	`ac˚ss
(
∑th
, 
R_OK
|
X_OK
) != 0 )

451 
	`DPRINTF
(
E_WARN
, 
L_INOTIFY
, "CouldÇŸác˚s†%†[%s]\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

454 if–
	`sql_gë_öt_fõld
(
db
, "SELECT ID from DETAILS whîêPATH = '%q'", 
∑th
) > 0 )

456 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "%†ÆªadyÉxi°s\n", 
∑th
);

460 
∑ª¡_buf
 = 
	`°rdup
(
∑th
);

461 
id
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT OBJECT_ID from OBJECTS oÜeft join DETAILS d on (d.ID = o.DETAIL_ID)"

462 " whîêd.PATH = '%q'ánd REF_ID i†NULL", 
	`dú«me
(
∑ª¡_buf
));

463 if–!
id
 )

464 
id
 = 
	`sqlôe3_m¥ötf
("%s", 
BROWSEDIR_ID
);

465 
	`ö£π_dúe˘‹y
(
«me
, 
∑th
, 
BROWSEDIR_ID
, 
id
+2, 
	`gë_√xt_avaûabÀ_id
("OBJECTS", id));

466 
	`sqlôe3_‰ì
(
id
);

467 
	`‰ì
(
∑ª¡_buf
);

469 
wd
 = 
	`add_w©ch
(
fd
, 
∑th
);

470 if–
wd
 == -1 )

472 
	`DPRINTF
(
E_ERROR
, 
L_INOTIFY
, "add_watch() failed\n");

476 
	`DPRINTF
(
E_INFO
, 
L_INOTIFY
, "Added w©chÅÿ%†[%d]\n", 
∑th
, 
wd
);

479 
medü_∑th
 = 
medü_dús
;

480  
medü_∑th
 )

482 if–
	`°∫cmp
(
∑th
, 
medü_∑th
->∑th, 
	`°æí
(media_path->path)) == 0 )

484 
dú_ty≥s
 = 
medü_∑th
->
ty≥s
;

487 
medü_∑th
 = medü_∑th->
√xt
;

490 
ds
 = 
	`›ídú
(
∑th
);

491 if–!
ds
 )

493 
	`DPRINTF
(
E_ERROR
, 
L_INOTIFY
, "›ídú faûed! [%s]\n", 
	`°ªº‹
(
î∫o
));

496  (
e
 = 
	`ªaddú
(
ds
)) )

498 if–
e
->
d_«me
[0] == '.' )

500 
esc_«me
 = 
	`esˇ≥_èg
(
e
->
d_«me
, 1);

501 
	`¢¥ötf
(
∑th_buf
, ’©h_buf), "%s/%s", 
∑th
, 
e
->
d_«me
);

502  
e
->
d_ty≥
 )

504 
DT_DIR
:

505 
DT_REG
:

506 
DT_LNK
:

507 
DT_UNKNOWN
:

508 
ty≥
 = 
	`ªsﬁve_unknown_ty≥
(
∑th_buf
, 
dú_ty≥s
);

512 if–
ty≥
 =
TYPE_DIR
 )

514 
	`öŸify_ö£π_dúe˘‹y
(
fd
, 
esc_«me
, 
∑th_buf
);

516 if–
ty≥
 =
TYPE_FILE
 )

518 if–(
	`°©
(
∑th_buf
, &
°
Ë=0Ë&& (°.
°_blocks
<<9 >°.
°_size
) )

520 
	`öŸify_ö£π_fûe
(
esc_«me
, 
∑th_buf
);

523 
	`‰ì
(
esc_«me
);

525 
	`˛o£dú
(
ds
);

528 
	}
}

531 
	$öŸify_ªmove_fûe
(c⁄° * 
∑th
)

533 
sql
[128];

534 
¨t_ˇche
[
PATH_MAX
];

535 *
id
;

536 *
±r
;

537 **
ªsu…
;

538 
öt64_t
 
dëaûID
;

539 
rows
, 
∂ayli°
;

541 if–
	`íds_wôh
(
∑th
, ".srt") )

543 
rows
 = 
	`sql_exec
(
db
, "DELETE from CAPTIONS whîêPATH = '%q'", 
∑th
);

544  
rows
;

547 
vÆid_ˇche
 = 0;

548 
∂ayli°
 = 
	`is_∂ayli°
(
∑th
);

549 
id
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT ID from %†whîêPATH = '%q'", 
∂ayli°
?"PLAYLISTS":"DETAILS", 
∑th
);

550 if–!
id
 )

552 
dëaûID
 = 
	`°πﬁl
(
id
, 
NULL
, 10);

553 
	`sqlôe3_‰ì
(
id
);

554 if–
∂ayli°
 )

556 
	`sql_exec
(
db
, "DELETE from PLAYLISTS whîêID = %Œd", 
dëaûID
);

557 
	`sql_exec
(
db
, "DELETE from DETAILS where ID ="

559 
MUSIC_PLIST_ID
, 
dëaûID
);

560 
	`sql_exec
(
db
, "DELETE from OBJECTS where OBJECT_ID = '%s$%llX' or PARENT_ID = '%s$%llX'",

561 
MUSIC_PLIST_ID
, 
dëaûID
, MUSIC_PLIST_ID, detailID);

566 
	`¢¥ötf
(
sql
, (sql), "SELECT PARENT_ID from OBJECTS whîêDETAIL_ID = %Œd", ()
dëaûID
);

567 if–(
	`sql_gë_èbÀ
(
db
, 
sql
, &
ªsu…
, &
rows
, 
NULL
Ë=
SQLITE_OK
) )

569 
i
, 
chûdªn
;

570  
i
=1; i <
rows
; i++ )

573 if–
	`°∫cmp
(
ªsu…
[
i
], 
MUSIC_PLIST_ID
, 
	`°æí
(MUSIC_PLIST_ID)) == 0 )

575 
	`sql_exec
(
db
, "UPDATE PLAYLISTS set FOUND = (FOUND-1) where ID = %d",

576 
	`©oi
(
	`°ºchr
(
ªsu…
[
i
], '$') + 1));

579 
chûdªn
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT cou¡(*Ë‰om OBJECTS whîêPARENT_ID = '%s'", 
ªsu…
[
i
]);

580 if–
chûdªn
 < 0 )

582 if–
chûdªn
 < 2 )

584 
	`sql_exec
(
db
, "DELETE from DETAILS where ID ="

585 " (SELECT DETAIL_ID from OBJECTS whîêOBJECT_ID = '%s')", 
ªsu…
[
i
]);

586 
	`sql_exec
(
db
, "DELETE from OBJECTS whîêOBJECT_ID = '%s'", 
ªsu…
[
i
]);

588 
±r
 = 
	`°ºchr
(
ªsu…
[
i
], '$');

589 if–
±r
 )

590 *
±r
 = '\0';

591 if–
	`sql_gë_öt_fõld
(
db
, "SELECT cou¡(*Ë‰om OBJECTS whîêPARENT_ID = '%s'", 
ªsu…
[
i
]) == 0 )

593 
	`sql_exec
(
db
, "DELETE from DETAILS where ID ="

594 " (SELECT DETAIL_ID from OBJECTS whîêOBJECT_ID = '%s')", 
ªsu…
[
i
]);

595 
	`sql_exec
(
db
, "DELETE from OBJECTS whîêOBJECT_ID = '%s'", 
ªsu…
[
i
]);

599 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

602 
	`sql_exec
(
db
, "DELETE from DETAILS whîêID = %Œd", 
dëaûID
);

603 
	`sql_exec
(
db
, "DELETE from OBJECTS whîêDETAIL_ID = %Œd", 
dëaûID
);

605 
	`¢¥ötf
(
¨t_ˇche
, ◊π_ˇche), "%s/¨t_ˇche%s", 
db_∑th
, 
∑th
);

606 
	`ªmove
(
¨t_ˇche
);

609 
	}
}

612 
	$öŸify_ªmove_dúe˘‹y
(
fd
, c⁄° * 
∑th
)

614 * 
sql
;

615 **
ªsu…
;

616 
öt64_t
 
dëaûID
 = 0;

617 
rows
, 
i
, 
ªt
 = 1;

620 
vÆid_ˇche
 = 0;

621 
	`ªmove_w©ch
(
fd
, 
∑th
);

622 
sql
 = 
	`sqlôe3_m¥ötf
("SELECT ID from DETAILS where (PATH > '%q/'ánd PATH <= '%q/%c')"

623 " o∏PATH = '%q'", 
∑th
,Öath, 0xFF,Öath);

624 if–(
	`sql_gë_èbÀ
(
db
, 
sql
, &
ªsu…
, &
rows
, 
NULL
Ë=
SQLITE_OK
) )

626 if–
rows
 )

628  
i
=1; i <
rows
; i++ )

630 
dëaûID
 = 
	`°πﬁl
(
ªsu…
[
i
], 
NULL
, 10);

631 
	`sql_exec
(
db
, "DELETE from DETAILS whîêID = %Œd", 
dëaûID
);

632 
	`sql_exec
(
db
, "DELETE from OBJECTS whîêDETAIL_ID = %Œd", 
dëaûID
);

634 
ªt
 = 0;

636 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

638 
	`sqlôe3_‰ì
(
sql
);

640 
	`sql_exec
(
db
, "DELETE from ALBUM_ART whîê(PATH > '%q/'ánd PATH <'%q/%c')", 
∑th
,Öath, 0xFF);

642  
ªt
;

643 
	}
}

646 
	$°¨t_öŸify
()

648 
pﬁlfd
 
pﬁlfds
[1];

649 
timeout
 = 1000;

650 
buf„r
[
BUF_LEN
];

651 
∑th_buf
[
PATH_MAX
];

652 
Àngth
, 
i
 = 0;

653 * 
esc_«me
 = 
NULL
;

654 
°©
 
°
;

656 
pﬁlfds
[0].
fd
 = 
	`öŸify_öô
();

657 
pﬁlfds
[0].
evíts
 = 
POLLIN
;

659 i‡–
pﬁlfds
[0].
fd
 < 0 )

660 
	`DPRINTF
(
E_ERROR
, 
L_INOTIFY
, "inotify_init() failed!\n");

662  
sˇ¬ög
 )

664 if–
quôtög
 )

665 
quôtög
;

666 
	`¶ìp
(1);

668 
	`öŸify_¸óã_w©ches
(
pﬁlfds
[0].
fd
);

669 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 19) == -1)

670 
	`DPRINTF
(
E_WARN
, 
L_INOTIFY
, "FailedÅoÑeduce inotifyÅhreadÖriority\n");

671 
	`sqlôe3_ªÀa£_mem‹y
(1<<31);

672 
	`av_ªgi°î_Æl
();

674  !
quôtög
 )

676 
Àngth
 = 
	`pﬁl
(
pﬁlfds
, 1, 
timeout
);

677 if–!
Àngth
 )

679 if–
√xt_∂_fûl
 && (
	`time
(
NULL
) >=Çext_pl_fill) )

681 
	`fûl_∂ayli°s
();

682 
√xt_∂_fûl
 = 0;

686 if–
Àngth
 < 0 )

688 if–(
î∫o
 =
EINTR
Ë|| (î∫ÿ=
EAGAIN
) )

691 
	`DPRINTF
(
E_ERROR
, 
L_INOTIFY
, "read failed!\n");

695 
Àngth
 = 
	`ªad
(
pﬁlfds
[0].
fd
, 
buf„r
, 
BUF_LEN
);

698 
i
 = 0;

699  
i
 < 
Àngth
 )

701 
öŸify_evít
 * 
evít
 = (öŸify_evíà*Ë&
buf„r
[
i
];

702 if–
evít
->
Àn
 )

704 if–*(
evít
->
«me
) == '.' )

706 
i
 +
EVENT_SIZE
 + 
evít
->
Àn
;

709 
esc_«me
 = 
	`modifySåög
(
	`°rdup
(
evít
->
«me
), "&", "&amp;amp;");

710 
	`•rötf
(
∑th_buf
, "%s/%s", 
	`gë_∑th_‰om_wd
(
evít
->
wd
),Évít->
«me
);

711 i‡–
evít
->
mask
 & 
IN_ISDIR
 && (evít->mask & (
IN_CREATE
|
IN_MOVED_TO
)) )

713 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "The directory %s was %s.\n",

714 
∑th_buf
, (
evít
->
mask
 & 
IN_MOVED_TO
 ? "moved here" : "created"));

715 
	`öŸify_ö£π_dúe˘‹y
(
pﬁlfds
[0].
fd
, 
esc_«me
, 
∑th_buf
);

717 i‡–(
evít
->
mask
 & (
IN_CLOSE_WRITE
|
IN_MOVED_TO
|
IN_CREATE
)) &&

718 (
	`l°©
(
∑th_buf
, &
°
) == 0) )

720 if–
	`S_ISLNK
(
°
.
°_mode
) )

722 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "The symbolicÜink %s was %s.\n",

723 
∑th_buf
, (
evít
->
mask
 & 
IN_MOVED_TO
 ? "moved here" : "created"));

724 if–
	`°©
(
∑th_buf
, &
°
Ë=0 && 
	`S_ISDIR
(°.
°_mode
) )

725 
	`öŸify_ö£π_dúe˘‹y
(
pﬁlfds
[0].
fd
, 
esc_«me
, 
∑th_buf
);

727 
	`öŸify_ö£π_fûe
(
esc_«me
, 
∑th_buf
);

729 if–
evít
->
mask
 & (
IN_CLOSE_WRITE
|
IN_MOVED_TO
Ë&& 
°
.
°_size
 > 0 )

731 if–(
evít
->
mask
 & 
IN_MOVED_TO
) ||

732 (
	`sql_gë_öt_fõld
(
db
, "SELECT TIMESTAMP from DETAILS whîêPATH = '%q'", 
∑th_buf
Ë!
°
.
°_mtime
) )

734 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "The file %s was %s.\n",

735 
∑th_buf
, (
evít
->
mask
 & 
IN_MOVED_TO
 ? "moved here" : "changed"));

736 
	`öŸify_ö£π_fûe
(
esc_«me
, 
∑th_buf
);

740 i‡–
evít
->
mask
 & (
IN_DELETE
|
IN_MOVED_FROM
) )

742 
	`DPRINTF
(
E_DEBUG
, 
L_INOTIFY
, "The %s %s was %s.\n",

743 (
evít
->
mask
 & 
IN_ISDIR
 ? "directory" : "file"),

744 
∑th_buf
, (
evít
->
mask
 & 
IN_MOVED_FROM
 ? "movedáway" : "deleted"));

745 i‡–
evít
->
mask
 & 
IN_ISDIR
 )

746 
	`öŸify_ªmove_dúe˘‹y
(
pﬁlfds
[0].
fd
, 
∑th_buf
);

748 
	`öŸify_ªmove_fûe
(
∑th_buf
);

750 
	`‰ì
(
esc_«me
);

752 
i
 +
EVENT_SIZE
 + 
evít
->
Àn
;

755 
	`öŸify_ªmove_w©ches
(
pﬁlfds
[0].
fd
);

756 
quôtög
:

757 
	`˛o£
(
pﬁlfds
[0].
fd
);

760 
	}
}

	@inotify.h

1 #ifde‡
HAVE_INOTIFY


3 
öŸify_ªmove_fûe
(c⁄° * 
∑th
);

6 
°¨t_öŸify
();

	@libav.h

2 #i‡
HAVE_FFMPEG_LIBAVUTIL_AVUTIL_H


3 
	~<ffm≥g/libavutû/avutû.h
>

4 #ñi‡
HAVE_LIBAV_LIBAVUTIL_AVUTIL_H


5 
	~<libav/libavutû/avutû.h
>

6 #ñi‡
HAVE_LIBAVUTIL_AVUTIL_H


7 
	~<libavutû/avutû.h
>

8 #ñi‡
HAVE_FFMPEG_AVUTIL_H


9 
	~<ffm≥g/avutû.h
>

10 #ñi‡
HAVE_LIBAV_AVUTIL_H


11 
	~<libav/avutû.h
>

12 #ñi‡
HAVE_AVUTIL_H


13 
	~<avutû.h
>

16 #i‡
HAVE_FFMPEG_LIBAVCODEC_AVCODEC_H


17 
	~<ffm≥g/libavcodec/avcodec.h
>

18 #ñi‡
HAVE_LIBAV_LIBAVCODEC_AVCODEC_H


19 
	~<libav/libavcodec/avcodec.h
>

20 #ñi‡
HAVE_LIBAVCODEC_AVCODEC_H


21 
	~<libavcodec/avcodec.h
>

22 #ñi‡
HAVE_FFMPEG_AVCODEC_H


23 
	~<ffm≥g/avcodec.h
>

24 #ñi‡
HAVE_LIBAV_AVCODEC_H


25 
	~<libav/avcodec.h
>

26 #ñi‡
HAVE_AVCODEC_H


27 
	~<avcodec.h
>

30 #i‡
HAVE_FFMPEG_LIBAVFORMAT_AVFORMAT_H


31 
	~<ffm≥g/libavf‹m©/avf‹m©.h
>

32 #ñi‡
HAVE_LIBAV_LIBAVFORMAT_AVFORMAT_H


33 
	~<libav/libavf‹m©/avf‹m©.h
>

34 #ñi‡
HAVE_LIBAVFORMAT_AVFORMAT_H


35 
	~<libavf‹m©/avf‹m©.h
>

36 #ñi‡
HAVE_FFMPEG_AVFORMAT_H


37 
	~<ffm≥g/avf‹m©.h
>

38 #ñi‡
HAVE_LIBAV_LIBAVFORMAT_H


39 
	~<libav/avf‹m©.h
>

40 #ñi‡
HAVE_AVFORMAT_H


41 
	~<avf‹m©.h
>

	@linux/inotify-syscalls.h

1 #i‚de‡
_LINUX_INOTIFY_SYSCALLS_H


2 
	#_LINUX_INOTIFY_SYSCALLS_H


	)

4 
	~<sys/sysˇŒ.h
>

6 #i‡
deföed
(
__i386__
)

7 
	#__NR_öŸify_öô
 291

	)

8 
	#__NR_öŸify_add_w©ch
 292

	)

9 
	#__NR_öŸify_rm_w©ch
 293

	)

10 #ñi‡
deföed
(
__x86_64__
)

11 
	#__NR_öŸify_öô
 253

	)

12 
	#__NR_öŸify_add_w©ch
 254

	)

13 
	#__NR_öŸify_rm_w©ch
 255

	)

14 #ñi‡
deföed
(
__powîpc__
Ë|| deföed(
__powîpc64__
)

15 
	#__NR_öŸify_öô
 275

	)

16 
	#__NR_öŸify_add_w©ch
 276

	)

17 
	#__NR_öŸify_rm_w©ch
 277

	)

18 #ñi‡
deföed
 (
__mùs__
)

19 #i‡
_MIPS_SIM
 =
_MIPS_SIM_ABI32


20 
	#__NR_öŸify_öô
 (
__NR_Löux
 + 284)

	)

21 
	#__NR_öŸify_add_w©ch
 (
__NR_Löux
 + 285)

	)

22 
	#__NR_öŸify_rm_w©ch
 (
__NR_Löux
 + 286)

	)

24 #i‡
_MIPS_SIM
 =
_MIPS_SIM_ABI64


25 
	#__NR_öŸify_öô
 (
__NR_Löux
 + 243)

	)

26 
	#__NR_öŸify_add_w©ch
 (
__NR_Löux
 + 243)

	)

27 
	#__NR_öŸify_rm_w©ch
 (
__NR_Löux
 + 243)

	)

29 #i‡
_MIPS_SIM
 =
_MIPS_SIM_NABI32


30 
	#__NR_öŸify_öô
 (
__NR_Löux
 + 247)

	)

31 
	#__NR_öŸify_add_w©ch
 (
__NR_Löux
 + 248)

	)

32 
	#__NR_öŸify_rm_w©ch
 (
__NR_Löux
 + 249)

	)

34 #ñi‡
deföed
 (
__ü64__
)

35 
	#__NR_öŸify_öô
 1277

	)

36 
	#__NR_öŸify_add_w©ch
 1278

	)

37 
	#__NR_öŸify_rm_w©ch
 1279

	)

38 #ñi‡
deföed
 (
__s390__
)

39 
	#__NR_öŸify_öô
 284

	)

40 
	#__NR_öŸify_add_w©ch
 285

	)

41 
	#__NR_öŸify_rm_w©ch
 286

	)

42 #ñi‡
deföed
 (
__Æpha__
)

43 
	#__NR_öŸify_öô
 444

	)

44 
	#__NR_öŸify_add_w©ch
 445

	)

45 
	#__NR_öŸify_rm_w©ch
 446

	)

46 #ñi‡
deföed
 (
__•¨c__
Ë|| deföed (
__•¨c64__
)

47 
	#__NR_öŸify_öô
 151

	)

48 
	#__NR_öŸify_add_w©ch
 152

	)

49 
	#__NR_öŸify_rm_w©ch
 156

	)

50 #ñi‡
deföed
 (
__¨m__
)

51 
	#__NR_öŸify_öô
 (
__NR_SYSCALL_BASE
+316)

	)

52 
	#__NR_öŸify_add_w©ch
 (
__NR_SYSCALL_BASE
+317)

	)

53 
	#__NR_öŸify_rm_w©ch
 (
__NR_SYSCALL_BASE
+318)

	)

54 #ñi‡
deföed
 (
__sh__
)

55 
	#__NR_öŸify_öô
 290

	)

56 
	#__NR_öŸify_add_w©ch
 291

	)

57 
	#__NR_öŸify_rm_w©ch
 292

	)

62 
ölöe
 
	$öŸify_öô
 ()

64  
	`sysˇŒ
 (
__NR_öŸify_öô
);

65 
	}
}

67 
ölöe
 
	$öŸify_add_w©ch
 (
fd
, c⁄° *
«me
, 
__u32
 
mask
)

69  
	`sysˇŒ
 (
__NR_öŸify_add_w©ch
, 
fd
, 
«me
, 
mask
);

70 
	}
}

72 
ölöe
 
	$öŸify_rm_w©ch
 (
fd
, 
__u32
 
wd
)

74  
	`sysˇŒ
 (
__NR_öŸify_rm_w©ch
, 
fd
, 
wd
);

75 
	}
}

	@linux/inotify.h

7 #i‚de‡
_LINUX_INOTIFY_H


8 
	#_LINUX_INOTIFY_H


	)

10 
	~<löux/ty≥s.h
>

18 
	söŸify_evít
 {

19 
__s32
 
	mwd
;

20 
__u32
 
	mmask
;

21 
__u32
 
	mcookõ
;

22 
__u32
 
	mÀn
;

23 
	m«me
[0];

27 
	#IN_ACCESS
 0x00000001

	)

28 
	#IN_MODIFY
 0x00000002

	)

29 
	#IN_ATTRIB
 0x00000004

	)

30 
	#IN_CLOSE_WRITE
 0x00000008

	)

31 
	#IN_CLOSE_NOWRITE
 0x00000010

	)

32 
	#IN_OPEN
 0x00000020

	)

33 
	#IN_MOVED_FROM
 0x00000040

	)

34 
	#IN_MOVED_TO
 0x00000080

	)

35 
	#IN_CREATE
 0x00000100

	)

36 
	#IN_DELETE
 0x00000200

	)

37 
	#IN_DELETE_SELF
 0x00000400

	)

40 
	#IN_UNMOUNT
 0x00002000

	)

41 
	#IN_Q_OVERFLOW
 0x00004000

	)

42 
	#IN_IGNORED
 0x00008000

	)

45 
	#IN_CLOSE
 (
IN_CLOSE_WRITE
 | 
IN_CLOSE_NOWRITE
Ë

	)

46 
	#IN_MOVE
 (
IN_MOVED_FROM
 | 
IN_MOVED_TO
Ë

	)

49 
	#IN_ISDIR
 0x40000000

	)

50 
	#IN_ONESHOT
 0x80000000

	)

57 
	#IN_ALL_EVENTS
 (
IN_ACCESS
 | 
IN_MODIFY
 | 
IN_ATTRIB
 | 
IN_CLOSE_WRITE
 | \

58 
IN_CLOSE_NOWRITE
 | 
IN_OPEN
 | 
IN_MOVED_FROM
 | \

59 
IN_MOVED_TO
 | 
IN_DELETE
 | 
IN_CREATE
 | 
IN_DELETE_SELF
)

	)

61 #ifde‡
__KERNEL__


63 
	~<löux/dˇche.h
>

64 
	~<löux/fs.h
>

65 
	~<löux/c⁄fig.h
>

67 #ifde‡
CONFIG_INOTIFY


69 
öŸify_öode_queue_evít
(
öode
 *, 
__u32
, __u32,

71 
öŸify_díåy_∑ª¡_queue_evít
(
díåy
 *, 
__u32
, __u32,

73 
öŸify_unmou¡_öodes
(
li°_hód
 *);

74 
öŸify_öode_is_dód
(
öode
 *);

75 
u32
 
öŸify_gë_cookõ
();

79 
ölöe
 
	$öŸify_öode_queue_evít
(
öode
 *inode,

80 
__u32
 
mask
, __u32 
cookõ
,

81 c⁄° *
fûíame
)

83 
	}
}

85 
ölöe
 
	$öŸify_díåy_∑ª¡_queue_evít
(
díåy
 *dentry,

86 
__u32
 
mask
, __u32 
cookõ
,

87 c⁄° *
fûíame
)

89 
	}
}

91 
ölöe
 
	$öŸify_unmou¡_öodes
(
li°_hód
 *
li°
)

93 
	}
}

95 
ölöe
 
	$öŸify_öode_is_dód
(
öode
 *inode)

97 
	}
}

99 
ölöe
 
u32
 
	$öŸify_gë_cookõ
()

102 
	}
}

	@log.c

20 
	~"c⁄fig.h
"

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°d¨g.h
>

25 
	~<°rög.h
>

26 
	~<time.h
>

28 
	~"u≤pglobÆv¨s.h
"

29 
	~"log.h
"

31 
FILE
 *
	glog_Â
 = 
NULL
;

32 
	gdeÁu…_log_Àvñ
 = 
E_WARN
;

33 
	glog_Àvñ
[
L_MAX
];

35 *
	gÁcûôy_«me
[] = {

48 *
	gÀvñ_«me
[] = {

60 
	$log_˛o£
()

62 i‡(
log_Â
)

63 
	`f˛o£
(
log_Â
);

64 
	}
}

67 
	$log_öô
(c⁄° *
‚ame
, c⁄° *
debug
)

69 
i
;

70 
FILE
 *
Â
;

71 
log_Àvñ_£t
[
L_MAX
];

73 i‡(
debug
)

75 c⁄° *
rhs
, *
lhs
, *
∆hs
, *
p
;

76 
n
;

77 
Àvñ
, 
Ácûôy
;

78 
	`mem£t
(&
log_Àvñ_£t
, 0, (log_level_set));

79 
rhs
 = 
∆hs
 = 
debug
;

80 
rhs
 && (rh†
	`°rchr
(rhs, '='))) {

81 
rhs
++;

82 
p
 = 
	`°rchr
(
rhs
, ',');

83 
n
 = 
p
 ?Ö - 
rhs
 : 
	`°æí
(rhs);

84 
Àvñ
=0; 
Àvñ_«me
[level];Üevel++) {

85 i‡(!(
	`°∫ˇ£cmp
(
Àvñ_«me
[
Àvñ
], 
rhs
, 
n
)))

88 
lhs
 = 
∆hs
;

89 
rhs
 = 
∆hs
 = 
p
;

90 i‡(!(
Àvñ_«me
[
Àvñ
])) {

95 i‡(*
lhs
==',')Ühs++;

96 
p
 = 
	`°Ωbrk
(
lhs
, ",=");

97 
n
 = 
p
 ?Ö - 
lhs
 : 
	`°æí
(lhs);

98 
Ácûôy
=0; 
Ácûôy_«me
[facility]; facility++) {

99 i‡(!(
	`°∫ˇ£cmp
(
Ácûôy_«me
[
Ácûôy
], 
lhs
, 
n
)))

102 i‡((
Ácûôy_«me
[
Ácûôy
])) {

103 
log_Àvñ
[
Ácûôy
] = 
Àvñ
;

104 
log_Àvñ_£t
[
Ácûôy
] = 1;

106 
lhs
 = 
p
;

107 } *
lhs
 && *lhs==',');

109 
i
=0; i<
L_MAX
; i++)

111 if–!
log_Àvñ_£t
[
i
] )

113 
log_Àvñ
[
i
] = 
deÁu…_log_Àvñ
;

118 
i
=0; i<
L_MAX
; i++)

119 
log_Àvñ
[
i
] = 
deÁu…_log_Àvñ
;

122 i‡(!
‚ame
)

125 i‡(!(
Â
 = 
	`f›í
(
‚ame
, "a")))

127 
log_Â
 = 
Â
;

129 
	}
}

132 
	$log_îr
(
Àvñ
, 
_log_Ácûôy
 
Ácûôy
, *
‚ame
, 
löío
, *
fmt
, ...)

134 
va_li°
 
≠
;

136 i‡(
Àvñ
 &&Üevñ>
log_Àvñ
[
Ácûôy
] &&Üevñ>
E_FATAL
)

139 i‡(!
log_Â
)

140 
log_Â
 = 
°dout
;

143 i‡(!
	`GETFLAG
(
SYSTEMD_MASK
))

145 
time_t
 
t
;

146 
tm
 *tm;

147 
t
 = 
	`time
(
NULL
);

148 
tm
 = 
	`loˇ…ime
(&
t
);

149 
	`Ârötf
(
log_Â
, "[%04d/%02d/%02d %02d:%02d:%02d] ",

150 
tm
->
tm_yór
+1900,Åm->
tm_m⁄
+1,Åm->
tm_mday
,

151 
tm
->
tm_hour
,Åm->
tm_mö
,Åm->
tm_£c
);

154 i‡(
Àvñ
)

155 
	`Ârötf
(
log_Â
, "%s:%d: %s: ", 
‚ame
, 
löío
, 
Àvñ_«me
[
Àvñ
]);

157 
	`Ârötf
(
log_Â
, "%s:%d: ", 
‚ame
, 
löío
);

160 
	`va_°¨t
(
≠
, 
fmt
);

161 i‡(
	`vÂrötf
(
log_Â
, 
fmt
, 
≠
) == -1)

163 
	`va_íd
(
≠
);

166 
	`va_íd
(
≠
);

168 
	`fÊush
(
log_Â
);

170 i‡(
Àvñ
==
E_FATAL
)

171 
	`exô
(-1);

174 
	}
}

	@log.h

21 #i‚de‡
__ERR_H__


22 
	#__ERR_H__


	)

24 
	#E_OFF
 0

	)

25 
	#E_FATAL
 1

	)

26 
	#E_ERROR
 2

	)

27 
	#E_WARN
 3

	)

28 
	#E_INFO
 4

	)

29 
	#E_DEBUG
 5

	)

30 
	#E_MAXDEBUG
 6

	)

32 
	e_log_Ácûôy


34 
	mL_GENERAL
=0,

35 
	mL_ARTWORK
,

36 
	mL_DB_SQL
,

37 
	mL_INOTIFY
,

38 
	mL_SCANNER
,

39 
	mL_METADATA
,

40 
	mL_HTTP
,

41 
	mL_SSDP
,

42 
	mL_TIVO
,

43 
	mL_MAX


46 
log_Àvñ
[
L_MAX
];

47 
log_öô
(c⁄° *
‚ame
, c⁄° *
debug
);

48 
log_˛o£
();

49 
log_îr
(
Àvñ
, 
_log_Ácûôy
 
Ácûôy
, *
‚ame
, 
löío
, *
fmt
, ...);

51 
	#DPRINTF
(
Àvñ
, 
Ácûôy
, 
fmt
, 
¨g
...Ëdÿ{ 
	`log_îr
÷evñ, facûôy, 
__FILE__
, 
__LINE__
, fmt, ##¨g); } 0)

	)

	@metadata.c

18 
	~"c⁄fig.h
"

20 
	~<°dio.h
>

21 
	~<˘y≥.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<libgí.h
>

25 
	~<uni°d.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/∑øm.h
>

29 
	~<f˙é.h
>

31 
	~<libexif/exif-lﬂdî.h
>

32 
	~<j≥glib.h
>

33 
	~<tiffio.h
>

34 
	~<£tjmp.h
>

35 
	~"libav.h
"

37 
	~"u≤pglobÆv¨s.h
"

38 
	~"ègutûs/ègutûs.h
"

39 
	~"image_utûs.h
"

40 
	~"u≤¥ïly∑r£.h
"

41 
	~"tivo_utûs.h
"

42 
	~"mëad©a.h
"

43 
	~"Æbum¨t.h
"

44 
	~"utûs.h
"

45 
	~"sql.h
"

46 
	~"log.h
"

48 #i‚de‡
FF_PROFILE_H264_BASELINE


49 
	#FF_PROFILE_H264_BASELINE
 66

	)

51 #i‚de‡
FF_PROFILE_H264_MAIN


52 
	#FF_PROFILE_H264_MAIN
 77

	)

54 #i‚de‡
FF_PROFILE_H264_HIGH


55 
	#FF_PROFILE_H264_HIGH
 100

	)

57 
	#FF_PROFILE_SKIP
 -100

	)

59 #i‡
LIBAVCODEC_VERSION_MAJOR
 < 53

60 
	#AVMEDIA_TYPE_AUDIO
 
CODEC_TYPE_AUDIO


	)

61 
	#AVMEDIA_TYPE_VIDEO
 
CODEC_TYPE_VIDEO


	)

64 #i‡
LIBAVUTIL_VERSION_INT
 < ((50<<16)+(13<<8)+0)

65 
	#av_°ªº‹
(
x
, 
y
, 
z
Ë
	`¢¥ötf
(y, z, "%d", x)

	)

68 
	#FLAG_TITLE
 0x00000001

	)

69 
	#FLAG_ARTIST
 0x00000002

	)

70 
	#FLAG_ALBUM
 0x00000004

	)

71 
	#FLAG_GENRE
 0x00000008

	)

72 
	#FLAG_COMMENT
 0x00000010

	)

73 
	#FLAG_CREATOR
 0x00000020

	)

74 
	#FLAG_DATE
 0x00000040

	)

75 
	#FLAG_DLNA_PN
 0x00000080

	)

76 
	#FLAG_MIME
 0x00000100

	)

77 
	#FLAG_DURATION
 0x00000200

	)

78 
	#FLAG_RESOLUTION
 0x00000400

	)

79 
	#FLAG_BITRATE
 0x00000800

	)

80 
	#FLAG_FREQUENCY
 0x00001000

	)

81 
	#FLAG_BPS
 0x00002000

	)

82 
	#FLAG_CHANNELS
 0x00004000

	)

83 
	#FLAG_ROTATION
 0x00008000

	)

86 
	eaudio_¥ofûes
 {

87 
	mPROFILE_AUDIO_UNKNOWN
,

88 
	mPROFILE_AUDIO_MP3
,

89 
	mPROFILE_AUDIO_AC3
,

90 
	mPROFILE_AUDIO_WMA_BASE
,

91 
	mPROFILE_AUDIO_WMA_FULL
,

92 
	mPROFILE_AUDIO_WMA_PRO
,

93 
	mPROFILE_AUDIO_MP2
,

94 
	mPROFILE_AUDIO_PCM
,

95 
	mPROFILE_AUDIO_AAC
,

96 
	mPROFILE_AUDIO_AAC_MULT5
,

97 
	mPROFILE_AUDIO_AMR


100 
ölöe
 

101 
	$œv_›í
(
AVF‹m©C⁄ãxt
 **
˘x
, c⁄° *
fûíame
)

103 
ªt
;

105 #i‡
LIBAVFORMAT_VERSION_INT
 >= ((53<<16)+(17<<8)+0)

106 
ªt
 = 
	`avf‹m©_›í_öput
(
˘x
, 
fûíame
, 
NULL
, NULL);

107 i‡(
ªt
 == 0)

109 
ªt
 = 
	`avf‹m©_föd_°ªam_öfo
(*
˘x
, 
NULL
);

110 
ªt
 = (ret >= 0 ? 0 :Ñet);

113 
ªt
 = 
	`av_›í_öput_fûe
(
˘x
, 
fûíame
, 
NULL
, 0, NULL);

114 i‡(
ªt
 == 0)

116 
ªt
 = 
	`av_föd_°ªam_öfo
(*
˘x
);

117 
ªt
 = (ret >= 0 ? 0 :Ñet);

121  
ªt
;

122 
	}
}

124 
ölöe
 

125 
	$œv_˛o£
(
AVF‹m©C⁄ãxt
 *
˘x
)

127 #i‡
LIBAVFORMAT_VERSION_INT
 >= ((53<<16)+(17<<8)+0)

128 
	`avf‹m©_˛o£_öput
(&
˘x
);

130 
	`av_˛o£_öput_fûe
(
˘x
);

132 
	}
}

134 #i‡
LIBAVFORMAT_VERSION_INT
 >= ((52<<16)+(31<<8)+0)

135 #i‡
LIBAVUTIL_VERSION_INT
 < ((51<<16)+(5<<8)+0Ë&& !
deföed
(
FF_API_OLD_METADATA2
)

136 
	#AV_DICT_IGNORE_SUFFIX
 
AV_METADATA_IGNORE_SUFFIX


	)

137 
	#av_di˘_gë
 
av_mëad©a_gë


	)

138 
AVMëad©aTag
 
	tAVDi˘i⁄¨yE¡ry
;

143 
	#MPEG_TS_SYNC_CODE
 0x47

	)

144 
	#MPEG_TS_PACKET_LENGTH
 188

	)

145 
	#MPEG_TS_PACKET_LENGTH_DLNA
 192

	)

147 
	$d a_time°amp_is_¥e£¡
(c⁄° *
fûíame
, *
øw_∑ckë_size
)

149 
buf„r
[3*
MPEG_TS_PACKET_LENGTH_DLNA
];

150 
fd
, 
i
;

153 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

154 if–
fd
 < 0 )

156 
i
 = 
	`ªad
(
fd
, 
buf„r
, 
MPEG_TS_PACKET_LENGTH_DLNA
*3);

157 
	`˛o£
(
fd
);

158 if–
i
 < 0 )

160  
i
 = 0; i < 
MPEG_TS_PACKET_LENGTH_DLNA
; i++ )

162 if–
buf„r
[
i
] =
MPEG_TS_SYNC_CODE
 )

164 i‡(
buf„r
[
i
 + 
MPEG_TS_PACKET_LENGTH_DLNA
] =
MPEG_TS_SYNC_CODE
 &&

165 
buf„r
[
i
 + 
MPEG_TS_PACKET_LENGTH_DLNA
*2] =
MPEG_TS_SYNC_CODE
)

167 *
øw_∑ckë_size
 = 
MPEG_TS_PACKET_LENGTH_DLNA
;

168 i‡(
buf„r
[
i
+
MPEG_TS_PACKET_LENGTH
] == 0x00 &&

169 
buf„r
[
i
+
MPEG_TS_PACKET_LENGTH
+1] == 0x00 &&

170 
buf„r
[
i
+
MPEG_TS_PACKET_LENGTH
+2] == 0x00 &&

171 
buf„r
[
i
+
MPEG_TS_PACKET_LENGTH
+3] == 0x00)

175 } i‡(
buf„r
[
i
 + 
MPEG_TS_PACKET_LENGTH
] =
MPEG_TS_SYNC_CODE
 &&

176 
buf„r
[
i
 + 
MPEG_TS_PACKET_LENGTH
*2] =
MPEG_TS_SYNC_CODE
) {

177 *
øw_∑ckë_size
 = 
MPEG_TS_PACKET_LENGTH
;

182 *
øw_∑ckë_size
 = 0;

184 
	}
}

187 
	$check_f‹_ˇ±i⁄s
(c⁄° *
∑th
, 
öt64_t
 
dëaûID
)

189 *
fûe
 = 
	`mÆloc
(
MAXPATHLEN
);

190 *
id
 = 
NULL
;

192 
	`•rötf
(
fûe
, "%s", 
∑th
);

193 
	`°rù_ext
(
fûe
);

196 if–!
dëaûID
 )

198 
id
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT ID from DETAILS where (PATH > '%q.'ánd PATH <= '%q.z')"

199 "ánd MIME glob 'video/*'Üimô 1", 
fûe
, file);

200 if–
id
 )

203 
dëaûID
 = 
	`°πﬁl
(
id
, 
NULL
, 10);

208 
no_sour˚_video
;

212 
	`°rˇt
(
fûe
, ".srt");

213 if–
	`ac˚ss
(
fûe
, 
R_OK
) == 0 )

215 
	`sql_exec
(
db
, "INSERT into CAPTIONS"

218 " (%Œd, %Q)", 
dëaûID
, 
fûe
);

220 
no_sour˚_video
:

221 if–
id
 )

222 
	`sqlôe3_‰ì
(
id
);

223 
	`‰ì
(
fûe
);

224 
	}
}

227 
	$∑r£_nfo
(c⁄° *
∑th
, 
mëad©a_t
 *
m
)

229 
FILE
 *
nfo
;

230 
buf
[65536];

231 
NameVÆueP¨£rD©a
 
xml
;

232 
°©
 
fûe
;

233 
size_t
 
ƒód
;

234 *
vÆ
, *
vÆ2
;

236 if–
	`°©
(
∑th
, &
fûe
) != 0 ||

237 
fûe
.
°_size
 > 65536 )

239 
	`DPRINTF
(
E_INFO
, 
L_METADATA
, "NŸÖ¨sög vîyÜ¨gê.nfÿfûê%s\n", 
∑th
);

242 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "P¨sög .nfÿfûe: %s\n", 
∑th
);

243 
nfo
 = 
	`f›í
(
∑th
, "r");

244 if–!
nfo
 )

246 
ƒód
 = 
	`‰ód
(&
buf
, 1, (buf), 
nfo
);

248 
	`P¨£NameVÆue
(
buf
, 
ƒód
, &
xml
, 0);

251 
vÆ
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "title");

252 if–
vÆ
 )

254 
vÆ2
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "episodetitle");

255 if–
vÆ2
 )

256 
	`xa•rötf
(&
m
->
tôÀ
, "%†- %s", 
vÆ
, 
vÆ2
);

258 
m
->
tôÀ
 = 
	`°rdup
(
vÆ
);

261 
vÆ
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "plot");

262 if–
vÆ
 )

263 
m
->
commít
 = 
	`°rdup
(
vÆ
);

265 
vÆ
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "capturedate");

266 if–
vÆ
 )

267 
m
->
d©e
 = 
	`°rdup
(
vÆ
);

269 
vÆ
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "genre");

270 if–
vÆ
 )

272 
	`‰ì
(
m
->
gíª
);

273 
m
->
gíª
 = 
	`°rdup
(
vÆ
);

276 
vÆ
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "mime");

277 if–
vÆ
 )

279 
	`‰ì
(
m
->
mime
);

280 
m
->
mime
 = 
	`°rdup
(
vÆ
);

283 
	`CÀ¨NameVÆueLi°
(&
xml
);

284 
	`f˛o£
(
nfo
);

285 
	}
}

288 
	$‰ì_mëad©a
(
mëad©a_t
 *
m
, 
uöt32_t
 
Êags
)

290 if–
Êags
 & 
FLAG_TITLE
 )

291 
	`‰ì
(
m
->
tôÀ
);

292 if–
Êags
 & 
FLAG_ARTIST
 )

293 
	`‰ì
(
m
->
¨ti°
);

294 if–
Êags
 & 
FLAG_ALBUM
 )

295 
	`‰ì
(
m
->
Æbum
);

296 if–
Êags
 & 
FLAG_GENRE
 )

297 
	`‰ì
(
m
->
gíª
);

298 if–
Êags
 & 
FLAG_CREATOR
 )

299 
	`‰ì
(
m
->
¸ót‹
);

300 if–
Êags
 & 
FLAG_DATE
 )

301 
	`‰ì
(
m
->
d©e
);

302 if–
Êags
 & 
FLAG_COMMENT
 )

303 
	`‰ì
(
m
->
commít
);

304 if–
Êags
 & 
FLAG_DLNA_PN
 )

305 
	`‰ì
(
m
->
d a_≤
);

306 if–
Êags
 & 
FLAG_MIME
 )

307 
	`‰ì
(
m
->
mime
);

308 if–
Êags
 & 
FLAG_DURATION
 )

309 
	`‰ì
(
m
->
duøti⁄
);

310 if–
Êags
 & 
FLAG_RESOLUTION
 )

311 
	`‰ì
(
m
->
ªsﬁuti⁄
);

312 if–
Êags
 & 
FLAG_BITRATE
 )

313 
	`‰ì
(
m
->
bôøã
);

314 if–
Êags
 & 
FLAG_FREQUENCY
 )

315 
	`‰ì
(
m
->
‰equícy
);

316 if–
Êags
 & 
FLAG_BPS
 )

317 
	`‰ì
(
m
->
bps
);

318 if–
Êags
 & 
FLAG_CHANNELS
 )

319 
	`‰ì
(
m
->
ch™√ls
);

320 if–
Êags
 & 
FLAG_ROTATION
 )

321 
	`‰ì
(
m
->
rŸ©i⁄
);

322 
	}
}

324 
öt64_t


325 
	$GëFﬁdîMëad©a
(c⁄° *
«me
, c⁄° *
∑th
, c⁄° *
¨ti°
, c⁄° *
gíª
, 
öt64_t
 
Æbum_¨t
)

327 
ªt
;

329 
ªt
 = 
	`sql_exec
(
db
, "INSERT into DETAILS"

333 
«me
, 
∑th
, 
¨ti°
,áπi°, 
gíª
, 
Æbum_¨t
);

334 if–
ªt
 !
SQLITE_OK
 )

335 
ªt
 = 0;

337 
ªt
 = 
	`sqlôe3_œ°_ö£π_rowid
(
db
);

339  
ªt
;

340 
	}
}

342 
öt64_t


343 
	$GëAudioMëad©a
(c⁄° *
∑th
, *
«me
)

345 
ty≥
[4];

346 
œng
[6] = { '\0' };

347 
°©
 
fûe
;

348 
öt64_t
 
ªt
;

349 *
esc_èg
;

350 
i
;

351 
öt64_t
 
Æbum_¨t
 = 0;

352 
s⁄g_mëad©a
 
s⁄g
;

353 
mëad©a_t
 
m
;

354 
uöt32_t
 
‰ì_Êags
 = 
FLAG_MIME
|
FLAG_DURATION
|
FLAG_DLNA_PN
|
FLAG_DATE
;

355 
	`mem£t
(&
m
, '\0', (
mëad©a_t
));

357 i‡–
	`°©
(
∑th
, &
fûe
) != 0 )

359 
	`°rù_ext
(
«me
);

361 if–
	`íds_wôh
(
∑th
, ".mp3") )

363 
	`°r˝y
(
ty≥
, "mp3");

364 
m
.
mime
 = 
	`°rdup
("audio/mpeg");

366 if–
	`íds_wôh
(
∑th
, ".m4a") ||Énds_with(path, ".mp4") ||

367 
	`íds_wôh
(
∑th
, ".aac") ||Énds_with(path, ".m4p") )

369 
	`°r˝y
(
ty≥
, "aac");

370 
m
.
mime
 = 
	`°rdup
("audio/mp4");

372 if–
	`íds_wôh
(
∑th
, ".3gp") )

374 
	`°r˝y
(
ty≥
, "aac");

375 
m
.
mime
 = 
	`°rdup
("audio/3gpp");

377 if–
	`íds_wôh
(
∑th
, ".wma") ||Énds_with(path, ".asf") )

379 
	`°r˝y
(
ty≥
, "asf");

380 
m
.
mime
 = 
	`°rdup
("audio/x-ms-wma");

382 if–
	`íds_wôh
(
∑th
, ".flac") ||Énds_with(path, ".fla") ||Énds_with(path, ".flc") )

384 
	`°r˝y
(
ty≥
, "flc");

385 
m
.
mime
 = 
	`°rdup
("audio/x-flac");

387 if–
	`íds_wôh
(
∑th
, ".wav") )

389 
	`°r˝y
(
ty≥
, "wav");

390 
m
.
mime
 = 
	`°rdup
("audio/x-wav");

392 if–
	`íds_wôh
(
∑th
, ".ogg") ||Énds_with(path, ".oga") )

394 
	`°r˝y
(
ty≥
, "ogg");

395 
m
.
mime
 = 
	`°rdup
("audio/ogg");

397 if–
	`íds_wôh
(
∑th
, ".pcm") )

399 
	`°r˝y
(
ty≥
, "pcm");

400 
m
.
mime
 = 
	`°rdup
("audio/L16");

404 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "Unh™dÀd fûêexãnsi⁄ o¿%s\n", 
∑th
);

408 if–!(*
œng
) )

410 if–!
	`gëív
("LANG") )

411 
	`°r˝y
(
œng
, "en_US");

413 
	`°∫˝yt
(
œng
, 
	`gëív
("LANG"), (lang));

416 if–
	`ªadègs
((*)
∑th
, &
s⁄g
, &
fûe
, 
œng
, 
ty≥
) != 0 )

418 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "C™nŸÉxåa˘Åag†‰om %s!\n", 
∑th
);

419 
	`‰ìègs
(&
s⁄g
);

420 
	`‰ì_mëad©a
(&
m
, 
‰ì_Êags
);

424 if–
s⁄g
.
d a_≤
 )

425 
m
.
d a_≤
 = 
	`°rdup
(
s⁄g
.dlna_pn);

426 if–
s⁄g
.
yór
 )

427 
	`xa•rötf
(&
m
.
d©e
, "%04d-01-01", 
s⁄g
.
yór
);

428 
	`xa•rötf
(&
m
.
duøti⁄
, "%d:%02d:%02d.%03d",

429 (
s⁄g
.
s⁄g_Àngth
/3600000),

430 (
s⁄g
.
s⁄g_Àngth
/60000%60),

431 (
s⁄g
.
s⁄g_Àngth
/1000%60),

432 (
s⁄g
.
s⁄g_Àngth
%1000));

433 if–
s⁄g
.
tôÀ
 && *song.title )

435 
m
.
tôÀ
 = 
	`åim
(
s⁄g
.title);

436 if–(
esc_èg
 = 
	`esˇ≥_èg
(
m
.
tôÀ
, 0)) )

438 
‰ì_Êags
 |
FLAG_TITLE
;

439 
m
.
tôÀ
 = 
esc_èg
;

444 
m
.
tôÀ
 = 
«me
;

446  
i
=
ROLE_START
; i<
N_ROLE
; i++ )

448 if–
s⁄g
.
c⁄åibut‹
[
i
] && *song.contributor[i] )

450 
m
.
¸ót‹
 = 
	`åim
(
s⁄g
.
c⁄åibut‹
[
i
]);

451 if–
	`°æí
(
m
.
¸ót‹
) > 48 )

453 
m
.
¸ót‹
 = 
	`°rdup
("Various Artists");

454 
‰ì_Êags
 |
FLAG_CREATOR
;

456 if–(
esc_èg
 = 
	`esˇ≥_èg
(
m
.
¸ót‹
, 0)) )

458 
m
.
¸ót‹
 = 
esc_èg
;

459 
‰ì_Êags
 |
FLAG_CREATOR
;

461 
m
.
¨ti°
 = m.
¸ót‹
;

466 if–(
i
 !
ROLE_BAND
Ë&& (ò!
ROLE_ALBUMARTIST
) )

468 if–
s⁄g
.
c⁄åibut‹
[
ROLE_BAND
] && *song.contributor[ROLE_BAND] )

470 
i
 = 
ROLE_BAND
;

471 
m
.
¨ti°
 = 
	`åim
(
s⁄g
.
c⁄åibut‹
[
i
]);

472 if–
	`°æí
(
m
.
¨ti°
) > 48 )

474 
m
.
¨ti°
 = 
	`°rdup
("Various Artists");

475 
‰ì_Êags
 |
FLAG_ARTIST
;

477 if–(
esc_èg
 = 
	`esˇ≥_èg
(
m
.
¨ti°
, 0)) )

479 
m
.
¨ti°
 = 
esc_èg
;

480 
‰ì_Êags
 |
FLAG_ARTIST
;

484 if–
s⁄g
.
Æbum
 && *song.album )

486 
m
.
Æbum
 = 
	`åim
(
s⁄g
.album);

487 if–(
esc_èg
 = 
	`esˇ≥_èg
(
m
.
Æbum
, 0)) )

489 
‰ì_Êags
 |
FLAG_ALBUM
;

490 
m
.
Æbum
 = 
esc_èg
;

493 if–
s⁄g
.
gíª
 && *song.genre )

495 
m
.
gíª
 = 
	`åim
(
s⁄g
.genre);

496 if–(
esc_èg
 = 
	`esˇ≥_èg
(
m
.
gíª
, 0)) )

498 
‰ì_Êags
 |
FLAG_GENRE
;

499 
m
.
gíª
 = 
esc_èg
;

502 if–
s⁄g
.
commít
 && *song.comment )

504 
m
.
commít
 = 
	`åim
(
s⁄g
.comment);

505 if–(
esc_èg
 = 
	`esˇ≥_èg
(
m
.
commít
, 0)) )

507 
‰ì_Êags
 |
FLAG_COMMENT
;

508 
m
.
commít
 = 
esc_èg
;

512 
Æbum_¨t
 = 
	`föd_Æbum_¨t
(
∑th
, 
s⁄g
.
image
, s⁄g.
image_size
);

514 
ªt
 = 
	`sql_exec
(
db
, "INSERT into DETAILS"

519 
∑th
, ()
fûe
.
°_size
, fûe.
°_mtime
, 
m
.
duøti⁄
, 
s⁄g
.
ch™√ls
, s⁄g.
bôøã
, s⁄g.
ßm∂î©e
, m.
d©e
,

520 
m
.
tôÀ
, m.
¸ót‹
, m.
¨ti°
, m.
Æbum
, m.
gíª
, m.
commít
, 
s⁄g
.
disc
, s⁄g.
åack
,

521 
m
.
d a_≤
, 
s⁄g
.
mime
?s⁄g.mime:m.mime, 
Æbum_¨t
);

522 if–
ªt
 !
SQLITE_OK
 )

524 
	`Ârötf
(
°dîr
, "Eº‹ in£πög dëaû†f‹ '%s'!\n", 
∑th
);

525 
ªt
 = 0;

529 
ªt
 = 
	`sqlôe3_œ°_ö£π_rowid
(
db
);

531 
	`‰ìègs
(&
s⁄g
);

532 
	`‰ì_mëad©a
(&
m
, 
‰ì_Êags
);

534  
ªt
;

535 
	}
}

538 
jmp_buf
 
	g£tjmp_buf„r
;

540 
	$libj≥g_îr‹_h™dÀr
(
j_comm⁄_±r
 
cöfo
)

542 
cöfo
->
îr
->
	`ouçut_mesßge
 (cinfo);

543 
	`l⁄gjmp
(
£tjmp_buf„r
, 1);

545 
	}
}

547 
öt64_t


548 
	$GëImageMëad©a
(c⁄° *
∑th
, *
«me
)

550 
ExifD©a
 *
ed
;

551 
ExifE¡ry
 *
e
 = 
NULL
;

552 
ExifLﬂdî
 *
l
;

553 
j≥g_decom¥ess_°ru˘
 
cöfo
;

554 
j≥g_îr‹_mgr
 
jîr
;

555 
FILE
 *
öfûe
;

556 
width
=0, 
height
=0, 
thumb
=0;

557 
make
[32], 
modñ
[64] = {'\0'};

558 
b
[1024];

559 
°©
 
fûe
;

560 
öt64_t
 
ªt
;

561 
image_s
 *
im§c
;

562 
mëad©a_t
 
m
;

563 
uöt32_t
 
‰ì_Êags
 = 0xFFFFFFFF;

566 
IMAGE_TYPE_UNKOWN
,

567 
IMAGE_TYPE_JPG
,

568 
IMAGE_TYPE_PNG
,

569 
IMAGE_TYPE_BMP
,

570 
IMAGE_TYPE_GIF
,

571 
IMAGE_TYPE_TIF


572 } 
image_ty≥
 = 
IMAGE_TYPE_UNKOWN
;

574 
	`mem£t
(&
m
, '\0', (
mëad©a_t
));

577 i‡–
	`°©
(
∑th
, &
fûe
) != 0 )

579 
	`°rù_ext
(
«me
);

583 if(
	`íds_wôh
(
∑th
, ".jpg") ||Énds_with(path, ".jpeg"))

585 
image_ty≥
 = 
IMAGE_TYPE_JPG
;

586 
m
.
mime
 = 
	`°rdup
("image/jpeg");

588 i‡(
	`íds_wôh
(
∑th
, ".png"))

590 
image_ty≥
 = 
IMAGE_TYPE_PNG
;

591 
m
.
mime
 = 
	`°rdup
("image/png");

593 i‡(
	`íds_wôh
(
∑th
, ".bmp"))

595 
image_ty≥
 = 
IMAGE_TYPE_BMP
;

596 
m
.
mime
 = 
	`°rdup
("image/bmp");

598 i‡(
	`íds_wôh
(
∑th
, ".gif"))

600 
image_ty≥
 = 
IMAGE_TYPE_GIF
;

601 
m
.
mime
 = 
	`°rdup
("image/gif");

603 i‡(
	`íds_wôh
(
∑th
, ".tiff") ||Énds_with(path, ".tif"))

605 
image_ty≥
 = 
IMAGE_TYPE_TIF
;

606 
m
.
mime
 = 
	`°rdup
("image/tif");

610 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "Unh™dÀd fûêexãnsi⁄ o¿%s\n", 
∑th
);

614 
l
 = 
	`exif_lﬂdî_√w
();

615 
	`exif_lﬂdî_wrôe_fûe
(
l
, 
∑th
);

616 
ed
 = 
	`exif_lﬂdî_gë_d©a
(
l
);

617 
	`exif_lﬂdî_uƒef
(
l
);

618 if–!
ed
 )

620 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "gŸÿno_exifd©®⁄ %s\n", 
∑th
);

621 
no_exifd©a
;

624 
e
 = 
	`exif_c⁄ã¡_gë_íåy
 (
ed
->
ifd
[
EXIF_IFD_EXIF
], 
EXIF_TAG_DATE_TIME_ORIGINAL
);

625 if–
e
 || (ê
	`exif_c⁄ã¡_gë_íåy
(
ed
->
ifd
[
EXIF_IFD_EXIF
], 
EXIF_TAG_DATE_TIME_DIGITIZED
)) )

627 
m
.
d©e
 = 
	`°rdup
(
	`exif_íåy_gë_vÆue
(
e
, 
b
, (b)));

628 if–
	`°æí
(
m
.
d©e
) > 10 )

630 
m
.
d©e
[4] = '-';

631 
m
.
d©e
[7] = '-';

632 
m
.
d©e
[10] = 'T';

635 
	`‰ì
(
m
.
d©e
);

636 
m
.
d©e
 = 
NULL
;

641 
	`image_gë_j≥g_d©e_xmp
(
∑th
, &
m
.
d©e
);

645 
e
 = 
	`exif_c⁄ã¡_gë_íåy
(
ed
->
ifd
[
EXIF_IFD_0
], 
EXIF_TAG_MAKE
);

646 if–
e
 )

648 
	`°∫˝yt
(
make
, 
	`exif_íåy_gë_vÆue
(
e
, 
b
, (b)), (make));

649 
e
 = 
	`exif_c⁄ã¡_gë_íåy
(
ed
->
ifd
[
EXIF_IFD_0
], 
EXIF_TAG_MODEL
);

650 if–
e
 )

652 
	`°∫˝yt
(
modñ
, 
	`exif_íåy_gë_vÆue
(
e
, 
b
, (b)), (model));

653 if–!
	`°rˇ£°r
(
modñ
, 
make
) )

654 
	`¢¥ötf
(
modñ
, (modñ), "%†%s", 
make
, 
	`exif_íåy_gë_vÆue
(
e
, 
b
, (b)));

655 
m
.
¸ót‹
 = 
	`esˇ≥_èg
(
	`åim
(
modñ
), 1);

660 
e
 = 
	`exif_c⁄ã¡_gë_íåy
(
ed
->
ifd
[
EXIF_IFD_0
], 
EXIF_TAG_ORIENTATION
);

661 if–
e
 )

663 
rŸ©e
;

664  
	`exif_gë_sh‹t
(
e
->
d©a
, 
	`exif_d©a_gë_byã_‹dî
(
ed
)) )

667 
rŸ©e
 = 180;

670 
rŸ©e
 = 90;

673 
rŸ©e
 = 270;

676 
rŸ©e
 = 0;

679 if–
rŸ©e
 )

680 
	`xa•rötf
(&
m
.
rŸ©i⁄
, "%d", 
rŸ©e
);

683 if–
ed
->
size
 )

686 if–
ed
->
size
 > 12000 )

688 
im§c
 = 
	`image_√w_‰om_j≥g
(
NULL
, 0, (*)
ed
->
d©a
,Éd->
size
, 1, 
ROTATE_NONE
);

689 if–
im§c
 )

691 if–(
im§c
->
width
 <160Ë&& (im§c->
height
 <= 160) )

692 
thumb
 = 1;

693 
	`image_‰ì
(
im§c
);

697 
thumb
 = 1;

701 
	`exif_d©a_uƒef
(
ed
);

703 
no_exifd©a
:

705 
image_ty≥
)

707 
IMAGE_TYPE_JPG
:

709 i‡–
	`image_gë_j≥g_ªsﬁuti⁄
(
∑th
, &
width
, &
height
) != 0 || !width || !height )

711 
öfûe
 = 
	`f›í
(
∑th
, "r");

712 if–
öfûe
 )

714 
cöfo
.
îr
 = 
	`j≥g_°d_îr‹
(&
jîr
);

715 
jîr
.
îr‹_exô
 = 
libj≥g_îr‹_h™dÀr
;

716 
	`j≥g_¸óã_decom¥ess
(&
cöfo
);

717 if–
	`£tjmp
(
£tjmp_buf„r
) )

719 
îr‹
;

721 
	`j≥g_°dio_§c
(&
cöfo
, 
öfûe
);

722 
	`j≥g_ªad_hódî
(&
cöfo
, 
TRUE
);

723 
	`j≥g_°¨t_decom¥ess
(&
cöfo
);

724 
width
 = 
cöfo
.
ouçut_width
;

725 
height
 = 
cöfo
.
ouçut_height
;

726 
îr‹
:

727 
	`j≥g_de°roy_decom¥ess
(&
cöfo
);

728 
	`f˛o£
(
öfûe
);

731 i‡(
width
 > 0 && 
height
 > 0)

733 i‡(
width
 <48 && 
height
 <= 48)

734 
m
.
d a_≤
 = 
	`°rdup
("JPEG_SM_ICO");

735 i‡(
width
 <120 && 
height
 <= 120)

736 
m
.
d a_≤
 = 
	`°rdup
("JPEG_LRG_ICO");

737 i‡(
width
 <160 && 
height
 <= 160)

738 
m
.
d a_≤
 = 
	`°rdup
("JPEG_TN");

739 if–
width
 <640 && 
height
 <= 480 )

740 
m
.
d a_≤
 = 
	`°rdup
("JPEG_SM");

741 if–
width
 <1024 && 
height
 <= 768 )

742 
m
.
d a_≤
 = 
	`°rdup
("JPEG_MED");

743 if–(
width
 <4096 && 
height
 <4096Ë|| !
	`GETFLAG
(
DLNA_STRICT_MASK
) )

744 
m
.
d a_≤
 = 
	`°rdup
("JPEG_LRG");

750 
IMAGE_TYPE_TIF
:

752 
TIFF
 *
tif
 = 
NULL
;

754 
tif
 = 
	`TIFFO≥n
(
∑th
, "r");

755 i‡(!
tif
)

757 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "TIFFO≥¿%†Áûed!\n", 
∑th
);

758 
out
;

761 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
width
) ||

762 !
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
height
))

764 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "TIFFGëFõld(WIDTH, HEIGHTË%†Áûed!\n", 
∑th
);

765 
	`TIFFClo£
(
tif
);

766 
out
;

769 
	`TIFFClo£
(
tif
);

773 
IMAGE_TYPE_PNG
:

774 
IMAGE_TYPE_BMP
:

775 
IMAGE_TYPE_GIF
:

777 
AVF‹m©C⁄ãxt
 *
˘x
 = 
NULL
;

778 
AVCodecC⁄ãxt
 *
vc
 = 
NULL
;

779 
video_°ªam
 = -1;

780 
i
;

782 
ªt
 = 
	`œv_›í
(&
˘x
, 
∑th
);

783 if–
ªt
 != 0 )

785 
îr
[128];

787 
	`av_°ªº‹
(
ªt
, 
îr
, (err));

788 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "O≥nög %†Áûed! [%s]\n", 
∑th
, 
îr
);

789 
out
;

792 
i
 = 0; i < 
˘x
->
nb_°ªams
; i++)

794 i‡(
video_°ªam
 =-1 && 
˘x
->
°ªams
[
i
]->
codec
->
codec_ty≥
 =
AVMEDIA_TYPE_VIDEO
)

796 
video_°ªam
 = 
i
;

797 
vc
 = 
˘x
->
°ªams
[
video_°ªam
]->
codec
;

803 i‡(!
vc
)

805 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "%s\n", 
∑th
);

806 
	`œv_˛o£
(
˘x
);

807 
out
;

810 i‡(
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "image2") != 0)

812 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "%s\n", 
∑th
);

813 
	`œv_˛o£
(
˘x
);

814 
out
;

817 
width
 = 
vc
->width;

818 
height
 = 
vc
->height;

819 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "width: %d, height: %d\n", 
width
, 
height
);

820 i‡(
vc
->
codec_id
 =
CODEC_ID_PNG
)

822 i‡(
width
 <48 && 
height
 <= 48)

824 
m
.
d a_≤
 = 
	`°rdup
("PNG_SM_ICO");

826 i‡(
width
 <120 && 
height
 <= 120)

828 
m
.
d a_≤
 = 
	`°rdup
("PNG_LRG_ICO");

830 i‡(
width
 <160 && 
height
 <= 160)

832 
m
.
d a_≤
 = 
	`°rdup
("PNG_TN");

834 i‡(
width
 <4096 && 
height
 <= 4096)

836 
m
.
d a_≤
 = 
	`°rdup
("PNG_LRG");

839 i‡(
vc
->
codec_id
 =
CODEC_ID_GIF
)

841 i‡(
width
 <1600 && 
height
 <= 1200)

843 
m
.
d a_≤
 = 
	`°rdup
("GIF_LRG");

847 
	`œv_˛o£
(
˘x
);

859 
out
:

860 if–!
width
 || !
height
 )

862 
	`‰ì_mëad©a
(&
m
, 
‰ì_Êags
);

865 
	`xa•rötf
(&
m
.
ªsﬁuti⁄
, "%dx%d", 
width
, 
height
);

867 i‡(
m
.
d a_≤
 =
NULL
)

869 
m
.
d a_≤
 = 
	`°rdup
(
	`mime_to_ext
(m.
mime
));

872 
ªt
 = 
	`sql_exec
(
db
, "INSERT into DETAILS "

877 
∑th
, 
«me
, ()
fûe
.
°_size
, fûe.
°_mtime
, 
m
.
d©e
, m.
ªsﬁuti⁄
,

878 
m
.
rŸ©i⁄
, 
thumb
, m.
¸ót‹
, m.
d a_≤
, m.
mime
);

879 if–
ªt
 !
SQLITE_OK
 )

881 
	`Ârötf
(
°dîr
, "Eº‹ in£πög dëaû†f‹ '%s'!\n", 
∑th
);

882 
ªt
 = 0;

886 
ªt
 = 
	`sqlôe3_œ°_ö£π_rowid
(
db
);

888 
	`‰ì_mëad©a
(&
m
, 
‰ì_Êags
);

890  
ªt
;

891 
	}
}

893 
öt64_t


894 
	$GëVideoMëad©a
(c⁄° *
∑th
, *
«me
)

896 
°©
 
fûe
;

897 
ªt
, 
i
;

898 
tm
 *
modtime
;

899 
AVF‹m©C⁄ãxt
 *
˘x
 = 
NULL
;

900 
AVCodecC⁄ãxt
 *
ac
 = 
NULL
, *
vc
 = NULL;

901 
audio_°ªam
 = -1, 
video_°ªam
 = -1;

902 
audio_¥ofûes
 
audio_¥ofûe
 = 
PROFILE_AUDIO_UNKNOWN
;

903 
fourcc
[4];

904 
öt64_t
 
Æbum_¨t
 = 0;

905 
nfo
[
MAXPATHLEN
], *
ext
;

906 
s⁄g_mëad©a
 
video
;

907 
mëad©a_t
 
m
;

908 
uöt32_t
 
‰ì_Êags
 = 0xFFFFFFFF;

909 *
∑th_˝y
, *
ba£∑th
;

911 
	`mem£t
(&
m
, '\0', (m));

912 
	`mem£t
(&
video
, '\0', (video));

915 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "P¨sög videÿ%s...\n", 
«me
);

916 i‡–
	`°©
(
∑th
, &
fûe
) != 0 )

918 
	`°rù_ext
(
«me
);

921 
ªt
 = 
	`œv_›í
(&
˘x
, 
∑th
);

922 if–
ªt
 != 0 )

924 
îr
[128];

925 
	`av_°ªº‹
(
ªt
, 
îr
, (err));

926 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "O≥nög %†Áûed! [%s]\n", 
∑th
, 
îr
);

930  
i
=0; i<
˘x
->
nb_°ªams
; i++)

932 if–
audio_°ªam
 == -1 &&

933 
˘x
->
°ªams
[
i
]->
codec
->
codec_ty≥
 =
AVMEDIA_TYPE_AUDIO
 )

935 
audio_°ªam
 = 
i
;

936 
ac
 = 
˘x
->
°ªams
[
audio_°ªam
]->
codec
;

939 if–
video_°ªam
 == -1 &&

940 
˘x
->
°ªams
[
i
]->
codec
->
codec_ty≥
 =
AVMEDIA_TYPE_VIDEO
 )

942 
video_°ªam
 = 
i
;

943 
vc
 = 
˘x
->
°ªams
[
video_°ªam
]->
codec
;

947 
∑th_˝y
 = 
	`°rdup
(
∑th
);

948 
ba£∑th
 = 
	`ba£«me
(
∑th_˝y
);

949 if–!
vc
 )

952 
	`œv_˛o£
(
˘x
);

953 if–!
	`is_audio
(
∑th
) )

954 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Fûê%†d€†nŸ c⁄èöá videÿ°ªam.\n", 
ba£∑th
);

955 
	`‰ì
(
∑th_˝y
);

959 if–
ac
 )

961 
Øc_obje˘_ty≥_t
 
Øc_ty≥
 = 
AAC_INVALID
;

962  
ac
->
codec_id
 )

964 
CODEC_ID_MP3
:

965 
audio_¥ofûe
 = 
PROFILE_AUDIO_MP3
;

967 
CODEC_ID_AAC
:

968 if–!
ac
->
exåad©a_size
 ||

969 !
ac
->
exåad©a
 )

971 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "No AACÅype\n");

975 
uöt8_t
 
d©a
;

976 
	`mem˝y
(&
d©a
, 
ac
->
exåad©a
, 1);

977 
Øc_ty≥
 = 
d©a
 >> 3;

979  
Øc_ty≥
 )

982 
AAC_LC
:

983 
AAC_LC_ER
:

984 if–
ac
->
ßm∂e_øã
 < 8000 ||

985 
ac
->
ßm∂e_øã
 > 48000 )

987 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unsupported AAC: sampleÑate isÇot 8000 < %d < 48000\n",

988 
ac
->
ßm∂e_øã
);

992 if–
ac
->
ch™√ls
 <= 2 &&

993 
ac
->
bô_øã
 <= 576000 )

994 
audio_¥ofûe
 = 
PROFILE_AUDIO_AAC
;

995 if–
ac
->
ch™√ls
 <= 6 &&

996 
ac
->
bô_øã
 <= 1440000 )

997 
audio_¥ofûe
 = 
PROFILE_AUDIO_AAC_MULT5
;

999 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unhandled AAC: %d channels, %d bitrate\n",

1000 
ac
->
ch™√ls
,

1001 
ac
->
bô_øã
);

1004 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unh™dÀd AACÅy≥ [%d]\n", 
Øc_ty≥
);

1008 
CODEC_ID_AC3
:

1009 
CODEC_ID_DTS
:

1010 
audio_¥ofûe
 = 
PROFILE_AUDIO_AC3
;

1012 
CODEC_ID_WMAV1
:

1013 
CODEC_ID_WMAV2
:

1015 i‡–
ac
->
bô_øã
 <= 193000 )

1016 
audio_¥ofûe
 = 
PROFILE_AUDIO_WMA_BASE
;

1018 i‡–
ac
->
bô_øã
 <= 385000 )

1019 
audio_¥ofûe
 = 
PROFILE_AUDIO_WMA_FULL
;

1021 #i‡
LIBAVCODEC_VERSION_INT
 > ((51<<16)+(50<<8)+1)

1022 
CODEC_ID_WMAPRO
:

1023 
audio_¥ofûe
 = 
PROFILE_AUDIO_WMA_PRO
;

1026 
CODEC_ID_MP2
:

1027 
audio_¥ofûe
 = 
PROFILE_AUDIO_MP2
;

1029 
CODEC_ID_AMR_NB
:

1030 
audio_¥ofûe
 = 
PROFILE_AUDIO_AMR
;

1033 if–(
ac
->
codec_id
 >
CODEC_ID_PCM_S16LE
) &&

1034 (
ac
->
codec_id
 < 
CODEC_ID_ADPCM_IMA_QT
) )

1035 
audio_¥ofûe
 = 
PROFILE_AUDIO_PCM
;

1037 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unh™dÀdáudiÿcode¯[0x%X]\n", 
ac
->
codec_id
);

1040 
	`xa•rötf
(&
m
.
‰equícy
, "%u", 
ac
->
ßm∂e_øã
);

1041 #i‡
LIBAVCODEC_VERSION_INT
 < (52<<16)

1042 
	`xa•rötf
(&
m
.
bps
, "%u", 
ac
->
bôs_≥r_ßm∂e
);

1044 
	`xa•rötf
(&
m
.
bps
, "%u", 
ac
->
bôs_≥r_coded_ßm∂e
);

1046 
	`xa•rötf
(&
m
.
ch™√ls
, "%u", 
ac
->channels);

1048 if–
vc
 )

1050 
off
;

1051 
duøti⁄
, 
hours
, 
mö
, 
£c
, 
ms
;

1052 
ts_time°amp_t
 
ts_time°amp
 = 
NONE
;

1053 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "C⁄èöî: '%s' [%s]\n", 
˘x
->
if‹m©
->
«me
, 
ba£∑th
);

1054 
	`xa•rötf
(&
m
.
ªsﬁuti⁄
, "%dx%d", 
vc
->
width
, vc->
height
);

1055 if–
˘x
->
bô_øã
 > 8 )

1056 
	`xa•rötf
(&
m
.
bôøã
, "%u", 
˘x
->
bô_øã
 / 8);

1057 if–
˘x
->
duøti⁄
 > 0 ) {

1058 
duøti⁄
 = ()(
˘x
->duøti⁄ / 
AV_TIME_BASE
);

1059 
hours
 = ()(
duøti⁄
 / 3600);

1060 
mö
 = ()(
duøti⁄
 / 60 % 60);

1061 
£c
 = ()(
duøti⁄
 % 60);

1062 
ms
 = ()(
˘x
->
duøti⁄
 / (
AV_TIME_BASE
/1000) % 1000);

1063 
	`xa•rötf
(&
m
.
duøti⁄
, "%d:%02d:%02d.%03d", 
hours
, 
mö
, 
£c
, 
ms
);

1068 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "avi") == 0 )

1070 
	`xa•rötf
(&
m
.
mime
, "video/x-msvideo");

1071 if–
vc
->
codec_id
 =
CODEC_ID_MPEG4
 )

1073 
fourcc
[0] = 
vc
->
codec_èg
 & 0xff;

1074 
fourcc
[1] = 
vc
->
codec_èg
>>8 & 0xff;

1075 
fourcc
[2] = 
vc
->
codec_èg
>>16 & 0xff;

1076 
fourcc
[3] = 
vc
->
codec_èg
>>24 & 0xff;

1077 if–
	`memcmp
(
fourcc
, "XVID", 4) == 0 ||

1078 
	`memcmp
(
fourcc
, "DX50", 4) == 0 ||

1079 
	`memcmp
(
fourcc
, "DIVX", 4) == 0 )

1080 
	`xa•rötf
(&
m
.
¸ót‹
, "DiVX");

1083 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mov,mp4,m4a,3gp,3g2,mj2") == 0 &&

1084 
	`íds_wôh
(
∑th
, ".mov") )

1085 
	`xa•rötf
(&
m
.
mime
, "video/quicktime");

1086 if–
	`°∫cmp
(
˘x
->
if‹m©
->
«me
, "matroska", 8) == 0 )

1087 
	`xa•rötf
(&
m
.
mime
, "video/x-matroska");

1088 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "flv") == 0 )

1089 
	`xa•rötf
(&
m
.
mime
, "video/x-flv");

1090 i‡(
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "rm") == 0)

1091 
	`xa•rötf
(&
m
.
mime
, "video/x-rmvb");

1093 if–
m
.
mime
 )

1095 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "C⁄èöî: %†[%s]\n", 
m
.
mime
, 
ba£∑th
);

1096 
video_no_d a
;

1099  
vc
->
codec_id
 )

1101 
CODEC_ID_MPEG1VIDEO
:

1102 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mpeg") == 0 )

1104 if–(
vc
->
width
 == 352) &&

1105 (
vc
->
height
 <= 288) )

1107 
m
.
d a_≤
 = 
	`°rdup
("MPEG1");

1109 
	`xa•rötf
(&
m
.
mime
, "video/mpeg");

1112 
CODEC_ID_MPEG2VIDEO
:

1113 
m
.
d a_≤
 = 
	`mÆloc
(64);

1114 
off
 = 
	`•rötf
(
m
.
d a_≤
, "MPEG_");

1115 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mpegts") == 0 )

1117 
øw_∑ckë_size
;

1118 
d a_ts_¥e£¡
 = 
	`d a_time°amp_is_¥e£¡
(
∑th
, &
øw_∑ckë_size
);

1119 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Stream %d of %s is %s MPEG2 TSÖacket size %d\n",

1120 
video_°ªam
, 
ba£∑th
, 
m
.
ªsﬁuti⁄
, 
øw_∑ckë_size
);

1121 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "TS_");

1122 if–(
vc
->
width
 >= 1280) &&

1123 (
vc
->
height
 >= 720) )

1125 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HD_NA");

1129 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "SD_");

1130 if–(
vc
->
height
 == 576) ||

1131 (
vc
->
height
 == 288) )

1132 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "EU");

1134 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "NA");

1136 if–
øw_∑ckë_size
 =
MPEG_TS_PACKET_LENGTH_DLNA
 )

1138 i‡(
d a_ts_¥e£¡
)

1139 
ts_time°amp
 = 
VALID
;

1141 
ts_time°amp
 = 
EMPTY
;

1143 if–
øw_∑ckë_size
 !
MPEG_TS_PACKET_LENGTH
 )

1145 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unsupported DLNA TSÖacket size [%d] (%s)\n",

1146 
øw_∑ckë_size
, 
ba£∑th
);

1147 
	`‰ì
(
m
.
d a_≤
);

1148 
m
.
d a_≤
 = 
NULL
;

1150  
ts_time°amp
 )

1152 
NONE
:

1153 
	`xa•rötf
(&
m
.
mime
, "video/mpeg");

1154 if–
m
.
d a_≤
 )

1155 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "_ISO");

1157 
VALID
:

1158 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "_T");

1159 
EMPTY
:

1160 
	`xa•rötf
(&
m
.
mime
, "video/vnd.dlna.mpeg-tts");

1165 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mpeg") == 0 )

1167 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Stream %d of %s is %s MPEG2 PS\n",

1168 
video_°ªam
, 
ba£∑th
, 
m
.
ªsﬁuti⁄
);

1169 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "PS_");

1170 if–(
vc
->
height
 == 576) ||

1171 (
vc
->
height
 == 288) )

1172 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "PAL");

1174 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "NTSC");

1175 
	`xa•rötf
(&
m
.
mime
, "video/mpeg");

1179 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Stream %d of %s [%s] is %sÇon-DLNA MPEG2\n",

1180 
video_°ªam
, 
ba£∑th
, 
˘x
->
if‹m©
->
«me
, 
m
.
ªsﬁuti⁄
);

1181 
	`‰ì
(
m
.
d a_≤
);

1182 
m
.
d a_≤
 = 
NULL
;

1185 
CODEC_ID_H264
:

1186 
m
.
d a_≤
 = 
	`mÆloc
(128);

1187 
off
 = 
	`•rötf
(
m
.
d a_≤
, "AVC_");

1189 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mpegts") == 0 )

1191 
AVR©i⁄Æ
 
di•œy_a•e˘_øtio
;

1192 
Âs
, 
öãæa˚d
;

1193 
øw_∑ckë_size
;

1194 
d a_ts_¥e£¡
 = 
	`d a_time°amp_is_¥e£¡
(
∑th
, &
øw_∑ckë_size
);

1196 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "TS_");

1197 i‡(
vc
->
ßm∂e_a•e˘_øtio
.
num
) {

1198 
	`av_ªdu˚
(&
di•œy_a•e˘_øtio
.
num
, &di•œy_a•e˘_øtio.
dí
,

1199 
vc
->
width
 * vc->
ßm∂e_a•e˘_øtio
.
num
,

1200 
vc
->
height
 * vc->
ßm∂e_a•e˘_øtio
.
dí
,

1203 i‡(
˘x
->
°ªams
[
video_°ªam
]->
r_‰ame_øã
.
dí
)

1204 
Âs
 = 
˘x
->
°ªams
[
video_°ªam
]->
r_‰ame_øã
.
num
 / ctx->°ªams[video_°ªam]->r_‰ame_øã.
dí
;

1206 
Âs
 = 0;

1207 
öãæa˚d
 = 
vc
->
time_ba£
.
dí
 ? (
˘x
->
°ªams
[
video_°ªam
]->
r_‰ame_øã
.
num
 / vc->time_base.den) : 0;

1208 if–((((
vc
->
width
 =1920 || vc->width =1440Ë&& vc->
height
 == 1080) ||

1209 (
vc
->
width
 =720 && vc->
height
 =480)Ë&& 
Âs
 =59 && 
öãæa˚d
) ||

1210 ((
vc
->
width
 =1280 && vc->
height
 =720Ë&& 
Âs
 =59 && !
öãæa˚d
) )

1212 if–(
vc
->
¥ofûe
 =
FF_PROFILE_H264_MAIN
 || vc->¥ofûê=
FF_PROFILE_H264_HIGH
) &&

1213 
audio_¥ofûe
 =
PROFILE_AUDIO_AC3
 )

1215 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HD_60_");

1216 
vc
->
¥ofûe
 = 
FF_PROFILE_SKIP
;

1219 if–((
vc
->
width
 =1920 && vc->
height
 == 1080) ||

1220 (
vc
->
width
 =1440 && vc->
height
 == 1080) ||

1221 (
vc
->
width
 =1280 && vc->
height
 == 720) ||

1222 (
vc
->
width
 =720 && vc->
height
 == 576)) &&

1223 
öãæa˚d
 && 
Âs
 == 50 )

1225 if–(
vc
->
¥ofûe
 =
FF_PROFILE_H264_MAIN
 || vc->¥ofûê=
FF_PROFILE_H264_HIGH
) &&

1226 
audio_¥ofûe
 =
PROFILE_AUDIO_AC3
 )

1228 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HD_50_");

1229 
vc
->
¥ofûe
 = 
FF_PROFILE_SKIP
;

1232  
vc
->
¥ofûe
 )

1234 
FF_PROFILE_H264_BASELINE
:

1235 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BL_");

1236 if–
vc
->
width
 <= 352 &&

1237 
vc
->
height
 <= 288 &&

1238 
vc
->
bô_øã
 <= 384000 )

1240 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "CIF15_");

1243 if–
vc
->
width
 <= 352 &&

1244 
vc
->
height
 <= 288 &&

1245 
vc
->
bô_øã
 <= 3000000 )

1247 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "CIF30_");

1252 
off
 -= 3;

1254 
FF_PROFILE_H264_MAIN
:

1255 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MP_");

1256 if–
vc
->
¥ofûe
 !
FF_PROFILE_H264_BASELINE
 &&

1257 
vc
->
¥ofûe
 !
FF_PROFILE_H264_MAIN
 )

1259 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unknown AVCÖrofile %d;ássuming MP. [%s]\n",

1260 
vc
->
¥ofûe
, 
ba£∑th
);

1262 if–
vc
->
width
 <= 720 &&

1263 
vc
->
height
 <= 576 &&

1264 
vc
->
bô_øã
 <= 10000000 )

1266 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "SD_");

1268 if–
vc
->
width
 <= 1920 &&

1269 
vc
->
height
 <= 1152 &&

1270 
vc
->
bô_øã
 <= 20000000 )

1272 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HD_");

1276 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unsupported h.264 videoÖrofile! [%s, %dx%d, %dbps : %s]\n",

1277 
m
.
d a_≤
, 
vc
->
width
, vc->
height
, vc->
bô_øã
, 
ba£∑th
);

1278 
	`‰ì
(
m
.
d a_≤
);

1279 
m
.
d a_≤
 = 
NULL
;

1282 
FF_PROFILE_H264_HIGH
:

1283 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HP_");

1284 if–
vc
->
width
 <= 1920 &&

1285 
vc
->
height
 <= 1152 &&

1286 
vc
->
bô_øã
 <= 30000000 &&

1287 
audio_¥ofûe
 =
PROFILE_AUDIO_AC3
 )

1289 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HD_");

1293 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unsupported h.264 HP videoÖrofile! [%dbps, %dáudio : %s]\n",

1294 
vc
->
bô_øã
, 
audio_¥ofûe
, 
ba£∑th
);

1295 
	`‰ì
(
m
.
d a_≤
);

1296 
m
.
d a_≤
 = 
NULL
;

1299 
FF_PROFILE_SKIP
:

1302 if–!
m
.
d a_≤
 )

1304  
audio_¥ofûe
 )

1306 
PROFILE_AUDIO_MP3
:

1307 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MPEG1_L3");

1309 
PROFILE_AUDIO_AC3
:

1310 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "AC3");

1312 
PROFILE_AUDIO_AAC
:

1313 
PROFILE_AUDIO_AAC_MULT5
:

1314 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "AAC_MULT5");

1317 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "No DLNAÖrofile found for %s file [%s]\n",

1318 
m
.
d a_≤
, 
ba£∑th
);

1319 
	`‰ì
(
m
.
d a_≤
);

1320 
m
.
d a_≤
 = 
NULL
;

1323 if–!
m
.
d a_≤
 )

1325 if–
øw_∑ckë_size
 =
MPEG_TS_PACKET_LENGTH_DLNA
 )

1327 if–
vc
->
¥ofûe
 =
FF_PROFILE_H264_HIGH
 ||

1328 
d a_ts_¥e£¡
 )

1329 
ts_time°amp
 = 
VALID
;

1331 
ts_time°amp
 = 
EMPTY
;

1333 if–
øw_∑ckë_size
 !
MPEG_TS_PACKET_LENGTH
 )

1335 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unsupported DLNA TSÖacket size [%d] (%s)\n",

1336 
øw_∑ckë_size
, 
ba£∑th
);

1337 
	`‰ì
(
m
.
d a_≤
);

1338 
m
.
d a_≤
 = 
NULL
;

1340  
ts_time°amp
 )

1342 
NONE
:

1343 if–
m
.
d a_≤
 )

1344 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "_ISO");

1346 
VALID
:

1347 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "_T");

1348 
EMPTY
:

1349 
	`xa•rötf
(&
m
.
mime
, "video/vnd.dlna.mpeg-tts");

1354 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mov,mp4,m4a,3gp,3g2,mj2") == 0 )

1356 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MP4_");

1358  
vc
->
¥ofûe
 ) {

1359 
FF_PROFILE_H264_BASELINE
:

1360 if–
vc
->
width
 <= 352 &&

1361 
vc
->
height
 <= 288 )

1363 if–
˘x
->
bô_øã
 < 600000 )

1364 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BL_CIF15_");

1365 if–
˘x
->
bô_øã
 < 5000000 )

1366 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BL_CIF30_");

1368 
mp4_mp_ÁŒback
;

1370 if–
audio_¥ofûe
 =
PROFILE_AUDIO_AMR
 )

1372 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "AMR");

1374 if–
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 )

1376 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "AAC_");

1377 if–
˘x
->
bô_øã
 < 520000 )

1379 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "520");

1381 if–
˘x
->
bô_øã
 < 940000 )

1383 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "940");

1387 
off
 -= 13;

1388 
mp4_mp_ÁŒback
;

1393 
off
 -= 9;

1394 
mp4_mp_ÁŒback
;

1397 if–
vc
->
width
 <= 720 &&

1398 
vc
->
height
 <= 576 )

1400 if–
vc
->
Àvñ
 == 30 &&

1401 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 &&

1402 
˘x
->
bô_øã
 <= 5000000 )

1403 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BL_L3L_SD_AAC");

1404 if–
vc
->
Àvñ
 <= 31 &&

1405 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 &&

1406 
˘x
->
bô_øã
 <= 15000000 )

1407 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BL_L31_HD_AAC");

1409 
mp4_mp_ÁŒback
;

1411 if–
vc
->
width
 <= 1280 &&

1412 
vc
->
height
 <= 720 )

1414 if–
vc
->
Àvñ
 <= 31 &&

1415 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 &&

1416 
˘x
->
bô_øã
 <= 15000000 )

1417 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BL_L31_HD_AAC");

1418 if–
vc
->
Àvñ
 <= 32 &&

1419 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 &&

1420 
˘x
->
bô_øã
 <= 21000000 )

1421 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BL_L32_HD_AAC");

1423 
mp4_mp_ÁŒback
;

1426 
mp4_mp_ÁŒback
;

1428 
FF_PROFILE_H264_MAIN
:

1429 
mp4_mp_ÁŒback
:

1430 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MP_");

1432 if–
vc
->
width
 <= 720 &&

1433 
vc
->
height
 <= 576 &&

1434 
vc
->
bô_øã
 <= 10000000 )

1436 
	`•rötf
(
m
.
d a_≤
+
off
, "SD_");

1437 if–
audio_¥ofûe
 =
PROFILE_AUDIO_AC3
 )

1438 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "AC3");

1439 if–
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 ||

1440 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC_MULT5
 )

1441 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "AAC_MULT5");

1442 if–
audio_¥ofûe
 =
PROFILE_AUDIO_MP3
 )

1443 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MPEG1_L3");

1445 
m
.
d a_≤
[10] = '\0';

1447 if–
vc
->
width
 <= 1280 &&

1448 
vc
->
height
 <= 720 &&

1449 
vc
->
bô_øã
 <= 15000000 &&

1450 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 )

1452 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HD_720p_AAC");

1454 if–
vc
->
width
 <= 1920 &&

1455 
vc
->
height
 <= 1080 &&

1456 
vc
->
bô_øã
 <= 21000000 &&

1457 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 )

1459 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HD_1080i_AAC");

1461 if–
	`°æí
(
m
.
d a_≤
) <= 11 )

1463 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "No DLNAÖrofile found for %s file %s\n",

1464 
m
.
d a_≤
, 
ba£∑th
);

1465 
	`‰ì
(
m
.
d a_≤
);

1466 
m
.
d a_≤
 = 
NULL
;

1469 
FF_PROFILE_H264_HIGH
:

1470 if–
vc
->
width
 <= 1920 &&

1471 
vc
->
height
 <= 1080 &&

1472 
vc
->
bô_øã
 <= 25000000 &&

1473 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 )

1475 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HP_HD_AAC");

1479 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "AVCÖrofile [%d]ÇotÑecognized for file %s\n",

1480 
vc
->
¥ofûe
, 
ba£∑th
);

1481 
	`‰ì
(
m
.
d a_≤
);

1482 
m
.
d a_≤
 = 
NULL
;

1488 
	`‰ì
(
m
.
d a_≤
);

1489 
m
.
d a_≤
 = 
NULL
;

1491 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Såóm %d o‡%†i†h.264\n", 
video_°ªam
, 
ba£∑th
);

1493 
CODEC_ID_MPEG4
:

1494 
fourcc
[0] = 
vc
->
codec_èg
 & 0xff;

1495 
fourcc
[1] = 
vc
->
codec_èg
>>8 & 0xff;

1496 
fourcc
[2] = 
vc
->
codec_èg
>>16 & 0xff;

1497 
fourcc
[3] = 
vc
->
codec_èg
>>24 & 0xff;

1498 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Stream %d of %s is MPEG4 [%c%c%c%c/0x%X]\n",

1499 
video_°ªam
, 
ba£∑th
,

1500 
	`i•röt
(
fourcc
[0]) ? fourcc[0] : '_',

1501 
	`i•röt
(
fourcc
[1]) ? fourcc[1] : '_',

1502 
	`i•röt
(
fourcc
[2]) ? fourcc[2] : '_',

1503 
	`i•röt
(
fourcc
[3]) ? fourcc[3] : '_',

1504 
vc
->
codec_èg
);

1506 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mov,mp4,m4a,3gp,3g2,mj2") == 0 )

1508 
m
.
d a_≤
 = 
	`mÆloc
(128);

1509 
off
 = 
	`•rötf
(
m
.
d a_≤
, "MPEG4_P2_");

1511 if–
	`íds_wôh
(
∑th
, ".3gp") )

1513 
	`xa•rötf
(&
m
.
mime
, "video/3gpp");

1514  
audio_¥ofûe
 )

1516 
PROFILE_AUDIO_AAC
:

1517 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "3GPP_SP_L0B_AAC");

1519 
PROFILE_AUDIO_AMR
:

1520 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "3GPP_SP_L0B_AMR");

1523 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "No DLNAÖrofile found for MPEG4-P2 3GP/0x%X file %s\n",

1524 
ac
->
codec_id
, 
ba£∑th
);

1525 
	`‰ì
(
m
.
d a_≤
);

1526 
m
.
d a_≤
 = 
NULL
;

1532 if–
˘x
->
bô_øã
 <= 1000000 &&

1533 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 )

1535 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MP4_ASP_AAC");

1537 if–
˘x
->
bô_øã
 <= 4000000 &&

1538 
vc
->
width
 <= 640 &&

1539 
vc
->
height
 <= 480 &&

1540 
audio_¥ofûe
 =
PROFILE_AUDIO_AAC
 )

1542 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MP4_SP_VGA_AAC");

1546 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unsupported h.264 videoÖrofile! [%dx%d, %dbps]\n",

1547 
vc
->
width
,

1548 
vc
->
height
,

1549 
˘x
->
bô_øã
);

1550 
	`‰ì
(
m
.
d a_≤
);

1551 
m
.
d a_≤
 = 
NULL
;

1556 
CODEC_ID_WMV3
:

1558 if–
vc
->
exåad©a_size
 > 0 )

1560 if–!((
vc
->
exåad©a
[0] >> 3) & 1) )

1561 
vc
->
Àvñ
 = 0;

1562 if–!((
vc
->
exåad©a
[0] >> 6) & 1) )

1563 
vc
->
¥ofûe
 = 0;

1565 
CODEC_ID_VC1
:

1566 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "asf") != 0 )

1568 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Skùpög DLNAÖ¨sög f‹Ç⁄-ASF VC1 fûê%s\n", 
∑th
);

1571 
m
.
d a_≤
 = 
	`mÆloc
(64);

1572 
off
 = 
	`•rötf
(
m
.
d a_≤
, "WMV");

1573 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Såóm %d o‡%†i†VC1\n", 
video_°ªam
, 
ba£∑th
);

1574 
	`xa•rötf
(&
m
.
mime
, "video/x-ms-wmv");

1575 if–(
vc
->
width
 <= 176) &&

1576 (
vc
->
height
 <= 144) &&

1577 (
vc
->
Àvñ
 == 0) )

1579 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "SPLL_");

1580  
audio_¥ofûe
 )

1582 
PROFILE_AUDIO_MP3
:

1583 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MP3");

1585 
PROFILE_AUDIO_WMA_BASE
:

1586 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BASE");

1589 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "No DLNAÖrofile found for WMVSPLL/0x%X file %s\n",

1590 
audio_¥ofûe
, 
ba£∑th
);

1591 
	`‰ì
(
m
.
d a_≤
);

1592 
m
.
d a_≤
 = 
NULL
;

1596 if–(
vc
->
width
 <= 352) &&

1597 (
vc
->
height
 <= 288) &&

1598 (
vc
->
¥ofûe
 == 0) &&

1599 (
˘x
->
bô_øã
/8 <= 384000) )

1601 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "SPML_");

1602  
audio_¥ofûe
 )

1604 
PROFILE_AUDIO_MP3
:

1605 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MP3");

1607 
PROFILE_AUDIO_WMA_BASE
:

1608 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BASE");

1611 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "No DLNAÖrofile found for WMVSPML/0x%X file %s\n",

1612 
audio_¥ofûe
, 
ba£∑th
);

1613 
	`‰ì
(
m
.
d a_≤
);

1614 
m
.
d a_≤
 = 
NULL
;

1618 if–(
vc
->
width
 <= 720) &&

1619 (
vc
->
height
 <= 576) &&

1620 (
˘x
->
bô_øã
/8 <= 10000000) )

1622 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "MED_");

1623  
audio_¥ofûe
 )

1625 
PROFILE_AUDIO_WMA_PRO
:

1626 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "PRO");

1628 
PROFILE_AUDIO_WMA_FULL
:

1629 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "FULL");

1631 
PROFILE_AUDIO_WMA_BASE
:

1632 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "BASE");

1635 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "No DLNAÖrofile found for WMVMED/0x%X file %s\n",

1636 
audio_¥ofûe
, 
ba£∑th
);

1637 
	`‰ì
(
m
.
d a_≤
);

1638 
m
.
d a_≤
 = 
NULL
;

1642 if–(
vc
->
width
 <= 1920) &&

1643 (
vc
->
height
 <= 1080) &&

1644 (
˘x
->
bô_øã
/8 <= 20000000) )

1646 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "HIGH_");

1647  
audio_¥ofûe
 )

1649 
PROFILE_AUDIO_WMA_PRO
:

1650 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "PRO");

1652 
PROFILE_AUDIO_WMA_FULL
:

1653 
off
 +
	`•rötf
(
m
.
d a_≤
+off, "FULL");

1656 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "No DLNAÖrofile found for WMVHIGH/0x%X file %s\n",

1657 
audio_¥ofûe
, 
ba£∑th
);

1658 
	`‰ì
(
m
.
d a_≤
);

1659 
m
.
d a_≤
 = 
NULL
;

1664 
CODEC_ID_MSMPEG4V3
:

1665 
	`xa•rötf
(&
m
.
mime
, "video/x-msvideo");

1667 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Stream %d of %s is %s [type %d]\n",

1668 
video_°ªam
, 
ba£∑th
, 
m
.
ªsﬁuti⁄
, 
vc
->
codec_id
);

1673 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "asf") == 0 )

1675 if–
	`ªadègs
((*)
∑th
, &
video
, &
fûe
, "en_US", "asf") == 0 )

1677 if–
video
.
tôÀ
 && *video.title )

1679 
m
.
tôÀ
 = 
	`esˇ≥_èg
(
	`åim
(
video
.title), 1);

1681 if–
video
.
gíª
 && *video.genre )

1683 
m
.
gíª
 = 
	`esˇ≥_èg
(
	`åim
(
video
.genre), 1);

1685 if–
video
.
c⁄åibut‹
[
ROLE_TRACKARTIST
] && *video.contributor[ROLE_TRACKARTIST] )

1687 
m
.
¨ti°
 = 
	`esˇ≥_èg
(
	`åim
(
video
.
c⁄åibut‹
[
ROLE_TRACKARTIST
]), 1);

1689 if–
video
.
c⁄åibut‹
[
ROLE_ALBUMARTIST
] && *video.contributor[ROLE_ALBUMARTIST] )

1691 
m
.
¸ót‹
 = 
	`esˇ≥_èg
(
	`åim
(
video
.
c⁄åibut‹
[
ROLE_ALBUMARTIST
]), 1);

1695 
m
.
¸ót‹
 = m.
¨ti°
;

1696 
‰ì_Êags
 &~
FLAG_CREATOR
;

1700 #i‚de‡
NETGEAR


1701 #i‡
LIBAVFORMAT_VERSION_INT
 >= ((52<<16)+(31<<8)+0)

1702 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mov,mp4,m4a,3gp,3g2,mj2") == 0 )

1704 if–
˘x
->
mëad©a
 )

1706 
AVDi˘i⁄¨yE¡ry
 *
èg
 = 
NULL
;

1709  (
èg
 = 
	`av_di˘_gë
(
˘x
->
mëad©a
, "",Åag, 
AV_DICT_IGNORE_SUFFIX
)) )

1712 if–
	`°rcmp
(
èg
->
key
, "title") == 0 )

1713 
m
.
tôÀ
 = 
	`esˇ≥_èg
(
	`åim
(
èg
->
vÆue
), 1);

1714 if–
	`°rcmp
(
èg
->
key
, "genre") == 0 )

1715 
m
.
gíª
 = 
	`esˇ≥_èg
(
	`åim
(
èg
->
vÆue
), 1);

1716 if–
	`°rcmp
(
èg
->
key
, "artist") == 0 )

1717 
m
.
¨ti°
 = 
	`esˇ≥_èg
(
	`åim
(
èg
->
vÆue
), 1);

1718 if–
	`°rcmp
(
èg
->
key
, "comment") == 0 )

1719 
m
.
commít
 = 
	`esˇ≥_èg
(
	`åim
(
èg
->
vÆue
), 1);

1725 
video_no_d a
:

1727 #ifde‡
TIVO_SUPPORT


1728 if–
	`íds_wôh
(
∑th
, ".TiVo"Ë&& 
	`is_tivo_fûe
(path) )

1730 if–
m
.
d a_≤
 )

1732 
	`‰ì
(
m
.
d a_≤
);

1733 
m
.
d a_≤
 = 
NULL
;

1735 
m
.
mime
 = 
	`ªÆloc
(m.mime, 21);

1736 
	`°r˝y
(
m
.
mime
, "video/x-tivo-mpeg");

1740 
	`°r˝y
(
nfo
, 
∑th
);

1741 
ext
 = 
	`°ºchr
(
nfo
, '.');

1742 if–
ext
 )

1744 
	`°r˝y
(
ext
+1, "nfo");

1745 if–
	`ac˚ss
(
nfo
, 
F_OK
) == 0 )

1747 
	`∑r£_nfo
(
nfo
, &
m
);

1751 if–!
m
.
mime
 )

1753 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "avi") == 0 )

1754 
	`xa•rötf
(&
m
.
mime
, "video/x-msvideo");

1755 if–
	`°∫cmp
(
˘x
->
if‹m©
->
«me
, "mpeg", 4) == 0 )

1756 
	`xa•rötf
(&
m
.
mime
, "video/mpeg");

1757 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "asf") == 0 )

1758 
	`xa•rötf
(&
m
.
mime
, "video/x-ms-wmv");

1759 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "mov,mp4,m4a,3gp,3g2,mj2") == 0 )

1760 if–
	`íds_wôh
(
∑th
, ".mov") )

1761 
	`xa•rötf
(&
m
.
mime
, "video/quicktime");

1763 
	`xa•rötf
(&
m
.
mime
, "video/mp4");

1764 if–
	`°∫cmp
(
˘x
->
if‹m©
->
«me
, "matroska", 8) == 0 )

1765 
	`xa•rötf
(&
m
.
mime
, "video/x-matroska");

1766 if–
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "flv") == 0 )

1767 
	`xa•rötf
(&
m
.
mime
, "video/x-flv");

1768 i‡(
	`°rcmp
(
˘x
->
if‹m©
->
«me
, "rm") == 0)

1769 
	`xa•rötf
(&
m
.
mime
, "video/x-rmvb");

1771 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "%s: Unh™dÀd f‹m©: %s\n", 
∑th
, 
˘x
->
if‹m©
->
«me
);

1773 
	`œv_˛o£
(
˘x
);

1775 if–!
m
.
d©e
 )

1777 
m
.
d©e
 = 
	`mÆloc
(20);

1778 
modtime
 = 
	`loˇ…ime
(&
fûe
.
°_mtime
);

1779 
	`°r·ime
(
m
.
d©e
, 20, "%FT%T", 
modtime
);

1782 if–!
m
.
tôÀ
 )

1783 
m
.
tôÀ
 = 
	`°rdup
(
«me
);

1785 
Æbum_¨t
 = 
	`föd_Æbum_¨t
(
∑th
, 
video
.
image
, video.
image_size
);

1786 
	`‰ìègs
(&
video
);

1788 
ªt
 = 
	`sql_exec
(
db
, "INSERT into DETAILS"

1793 
∑th
, ()
fûe
.
°_size
, fûe.
°_mtime
, 
m
.
duøti⁄
,

1794 
m
.
d©e
, m.
ch™√ls
, m.
bôøã
, m.
‰equícy
, m.
ªsﬁuti⁄
,

1795 
m
.
tôÀ
, m.
¸ót‹
, m.
¨ti°
, m.
gíª
, m.
commít
, m.
d a_≤
,

1796 
m
.
mime
, 
Æbum_¨t
);

1797 if–
ªt
 !
SQLITE_OK
 )

1799 
	`Ârötf
(
°dîr
, "Eº‹ in£πög dëaû†f‹ '%s'!\n", 
∑th
);

1800 
ªt
 = 0;

1804 
ªt
 = 
	`sqlôe3_œ°_ö£π_rowid
(
db
);

1805 
	`check_f‹_ˇ±i⁄s
(
∑th
, 
ªt
);

1807 
	`‰ì_mëad©a
(&
m
, 
‰ì_Êags
);

1808 
	`‰ì
(
∑th_˝y
);

1810  
ªt
;

1811 
	}
}

	@metadata.h

24 #i‚de‡
__METADATA_H__


25 
	#__METADATA_H__


	)

27 
	smëad©a_s
 {

28 *
	mtôÀ
;

29 *
	m¨ti°
;

30 *
	m¸ót‹
;

31 *
	mÆbum
;

32 *
	mgíª
;

33 *
	mcommít
;

34 *
	mch™√ls
;

35 *
	mbôøã
;

36 *
	m‰equícy
;

37 *
	mbps
;

38 *
	mªsﬁuti⁄
;

39 *
	mrŸ©i⁄
;

40 *
	mduøti⁄
;

41 *
	md©e
;

42 *
	mmime
;

43 *
	md a_≤
;

44 } 
	tmëad©a_t
;

47 
	mAAC_INVALID
 = 0,

48 
	mAAC_MAIN
 = 1,

49 
	mAAC_LC
 = 2,

50 
	mAAC_SSR
 = 3,

51 
	mAAC_LTP
 = 4,

52 
	mAAC_HE
 = 5,

53 
	mAAC_SCALE
 = 6,

54 
	mAAC_TWINVQ
 = 7,

55 
	mAAC_CELP
 = 8,

56 
	mAAC_HVXC
 = 9,

57 
	mAAC_TTSI
 = 12,

58 
	mAAC_MS
 = 13,

59 
	mAAC_WAVE
 = 14,

60 
	mAAC_MIDI
 = 15,

61 
	mAAC_FX
 = 16,

62 
	mAAC_LC_ER
 = 17,

63 
	mAAC_LTP_ER
 = 19,

64 
	mAAC_SCALE_ER
 = 20,

65 
	mAAC_TWINVQ_ER
 = 21,

66 
	mAAC_BSAC_ER
 = 22,

67 
	mAAC_LD_ER
 = 23,

68 
	mAAC_CELP_ER
 = 24,

69 
	mAAC_HXVC_ER
 = 25,

70 
	mAAC_HILN_ER
 = 26,

71 
	mAAC_PARAM_ER
 = 27,

72 
	mAAC_SSC
 = 28,

73 
	mAAC_HE_L3
 = 31,

74 } 
	tØc_obje˘_ty≥_t
;

77 
	mNONE
,

78 
	mEMPTY
,

79 
	mVALID


80 } 
	tts_time°amp_t
;

83 
íds_wôh
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

86 
check_f‹_ˇ±i⁄s
(c⁄° *
∑th
, 
öt64_t
 
dëaûID
);

88 
öt64_t


89 
GëFﬁdîMëad©a
(c⁄° *
«me
, c⁄° *
∑th
, c⁄° *
¨ti°
, c⁄° *
gíª
, 
öt64_t
 
Æbum_¨t
);

91 
öt64_t


92 
GëAudioMëad©a
(c⁄° *
∑th
, *
«me
);

94 
öt64_t


95 
GëImageMëad©a
(c⁄° *
∑th
, *
«me
);

97 
öt64_t


98 
GëVideoMëad©a
(c⁄° *
∑th
, *
«me
);

	@minidlna.c

49 
	~<°dlib.h
>

50 
	~<uni°d.h
>

51 
	~<°rög.h
>

52 
	~<°dio.h
>

53 
	~<˘y≥.h
>

54 
	~<sys/ty≥s.h
>

55 
	~<sys/sockë.h
>

56 
	~<sys/waô.h
>

57 
	~<sys/fûe.h
>

58 
	~<sys/time.h
>

59 
	~<sys/∑øm.h
>

60 
	~<sys/°©.h
>

61 
	~<√töë/ö.h
>

62 
	~<¨∑/öë.h
>

63 
	~<f˙é.h
>

64 
	~<time.h
>

65 
	~<sig«l.h
>

66 
	~<î∫o.h
>

67 
	~<±hªad.h
>

68 
	~<libgí.h
>

69 
	~<pwd.h
>

71 
	~"c⁄fig.h
"

73 #ifde‡
ENABLE_NLS


74 
	~<loˇÀ.h
>

75 
	~<liböé.h
>

78 
	~"u≤pglobÆv¨s.h
"

79 
	~"sql.h
"

80 
	~"u≤phâp.h
"

81 
	~"u≤pdescgí.h
"

82 
	~"möid ≠©h.h
"

83 
	~"gëiÁddr.h
"

84 
	~"u≤psﬂp.h
"

85 
	~"›ti⁄s.h
"

86 
	~"utûs.h
"

87 
	~"möissdp.h
"

88 
	~"möid ©y≥s.h
"

89 
	~"d´m⁄ize.h
"

90 
	~"u≤≥víts.h
"

91 
	~"sˇ¬î.h
"

92 
	~"öŸify.h
"

93 
	~"log.h
"

94 
	~"tivo_bóc⁄.h
"

95 
	~"tivo_utûs.h
"

97 #i‡
SQLITE_VERSION_NUMBER
 < 3005001

99 
	#sqlôe3_thªadß„
(Ë0

	)

102 
g√t_ubus_öô
();

103 
g√t_ubus_exô
();

108 
	$O≥nAndC⁄fHTTPSockë
(
p‹t
)

110 
s
;

111 
i
 = 1;

112 
sockaddr_ö
 
li°í«me
;

115 
	`mem£t
(&
˛õ¡s
, 0, (
˛õ¡_ˇche_s
));

117 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

118 i‡(
s
 < 0)

120 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "sockë(hâp): %s\n", 
	`°ªº‹
(
î∫o
));

124 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
i
, (i)) < 0)

125 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "£tsock›t(hâp, SO_REUSEADDR): %s\n", 
	`°ªº‹
(
î∫o
));

127 
	`mem£t
(&
li°í«me
, 0, (
sockaddr_ö
));

128 
li°í«me
.
sö_Ámûy
 = 
AF_INET
;

129 
li°í«me
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

130 
li°í«me
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

132 i‡(
	`böd
(
s
, (
sockaddr
 *)&
li°í«me
, (
sockaddr_ö
)) < 0)

134 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "böd(hâp): %s\n", 
	`°ªº‹
(
î∫o
));

135 
	`˛o£
(
s
);

139 i‡(
	`li°í
(
s
, 6) < 0)

141 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "li°í(hâp): %s\n", 
	`°ªº‹
(
î∫o
));

142 
	`˛o£
(
s
);

146  
s
;

147 
	}
}

152 
	$sigãrm
(
sig
)

155 
	`sig«l
(
sig
, 
SIG_IGN
);

157 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "ª˚ived sig«»%d, good-bye\n", 
sig
);

159 
quôtög
 = 1;

161 
	}
}

164 
	$sigchld
(
sig
)

166 i‡(!
sˇ¬ög
)

167 
	`sig«l
(
SIGCHLD
, 
SIG_IGN
);

168 
	`waôpid
(-1, 
NULL
, 
WNOHANG
);

169 
	}
}

173 
	$£t_°¨tup_time
()

175 
°¨tup_time
 = 
	`time
(
NULL
);

176 
	}
}

185 
	$∑r£œ«ddr
(
œn_addr_s
 *
œn_addr
, c⁄° *
°r
)

187 c⁄° * 
p
;

188 
nbôs
 = 24;

189 
n
;

190 
p
 = 
°r
;

191 *
p
 && *∞!'/' && !
	`is•a˚
(*p))

192 
p
++;

193 
n
 = 
p
 - 
°r
;

194 if(*
p
 == '/')

196 
nbôs
 = 
	`©oi
(++
p
);

197 *
p
 && !
	`is•a˚
(*p))

198 
p
++;

200 if(
n
>15)

202 
	`DPRINTF
(
E_OFF
, 
L_GENERAL
, "Eº‹Ö¨sögáddªss/mask: %s\n", 
°r
);

205 
	`mem˝y
(
œn_addr
->
°r
, så, 
n
);

206 
œn_addr
->
°r
[
n
] = '\0';

207 if(!
	`öë_©⁄
(
œn_addr
->
°r
, &œn_addr->
addr
))

209 
	`DPRINTF
(
E_OFF
, 
L_GENERAL
, "Eº‹Ö¨sögáddªss: %s\n", 
°r
);

212 
œn_addr
->
mask
.
s_addr
 = 
	`ht⁄l
(
nbôs
 ? (0xffffffff << (32 -Çbits)) : 0);

214 
	}
}

217 
	$gë‰õndly«me
(*
buf
, 
Àn
)

219 *
p
 = 
NULL
;

220 
hn
[256];

221 
off
;

223 i‡(
	`gëho°«me
(
hn
, (hn)) == 0)

225 
	`°∫˝yt
(
buf
, 
hn
, 
Àn
);

226 
p
 = 
	`°rchr
(
buf
, '.');

227 i‡(
p
)

228 *
p
 = '\0';

231 
	`°r˝y
(
buf
, "Unknown");

233 
off
 = 
	`°æí
(
buf
);

234 
off
 +
	`¢¥ötf
(
buf
+off, 
Àn
-off, ": ");

235 #ifde‡
READYNAS


236 
FILE
 *
öfo
;

237 
ibuf
[64], *
key
, *
vÆ
;

238 
	`¢¥ötf
(
buf
+
off
, 
Àn
-off, "ReadyNAS");

239 
öfo
 = 
	`f›í
("/proc/sys/dev/boot/info", "r");

240 i‡(!
öfo
)

242 (
vÆ
 = 
	`fgës
(
ibuf
, 64, 
öfo
)Ë!
NULL
)

244 
key
 = 
	`°r£p
(&
vÆ
, ": \t");

245 
vÆ
 = 
	`åim
(val);

246 i‡(
	`°rcmp
(
key
, "model") == 0)

248 
	`¢¥ötf
(
buf
+
off
, 
Àn
-off, "%s", 
vÆ
);

249 
key
 = 
	`°rchr
(
vÆ
, ' ');

250 i‡(
key
)

252 
	`°∫˝yt
(
modñnumbî
, 
key
+1, 
MODELNUMBER_MAX_LEN
);

253 *
key
 = '\0';

255 
	`¢¥ötf
(
modñ«me
, 
MODELNAME_MAX_LEN
,

256 "Wödow†Medü C⁄√˘ com∑tibÀ (%s)", 
vÆ
);

258 i‡(
	`°rcmp
(
key
, "serial") == 0)

260 
	`°∫˝yt
(
£rü umbî
, 
vÆ
, 
SERIALNUMBER_MAX_LEN
);

261 i‡(
£rü umbî
[0] == '\0')

263 
mac_°r
[13];

264 i‡(
	`gësyshwaddr
(
mac_°r
, (mac_str)) == 0)

265 
	`°r˝y
(
£rü umbî
, 
mac_°r
);

267 
	`°r˝y
(
£rü umbî
, "0");

272 
	`f˛o£
(
öfo
);

273 #i‡
PNPX


274 
	`mem˝y
(
≤px_hwid
+4, "01F2", 4);

275 i‡(
	`°rcmp
(
modñnumbî
, "NVX") == 0)

276 
	`mem˝y
(
≤px_hwid
+17, "0101", 4);

277 i‡(
	`°rcmp
(
modñnumbî
, "Pro") == 0 ||

278 
	`°rcmp
(
modñnumbî
, "Pro 6") == 0 ||

279 
	`°∫cmp
(
modñnumbî
, "Ultra 6", 7) == 0)

280 
	`mem˝y
(
≤px_hwid
+17, "0102", 4);

281 i‡(
	`°rcmp
(
modñnumbî
, "Pro 2") == 0 ||

282 
	`°∫cmp
(
modñnumbî
, "Ultra 2", 7) == 0)

283 
	`mem˝y
(
≤px_hwid
+17, "0103", 4);

284 i‡(
	`°rcmp
(
modñnumbî
, "Pro 4") == 0 ||

285 
	`°∫cmp
(
modñnumbî
, "Ultra 4", 7) == 0)

286 
	`mem˝y
(
≤px_hwid
+17, "0104", 4);

287 i‡(
	`°rcmp
(
modñnumbî
+1, "100") == 0)

288 
	`mem˝y
(
≤px_hwid
+17, "0105", 4);

289 i‡(
	`°rcmp
(
modñnumbî
+1, "200") == 0)

290 
	`mem˝y
(
≤px_hwid
+17, "0106", 4);

292 i‡(
	`°rcmp
(
modñnumbî
, "Duo v2") == 0)

293 
	`mem˝y
(
≤px_hwid
+17, "0108", 4);

294 i‡(
	`°rcmp
(
modñnumbî
, "NV+ v2") == 0)

295 
	`mem˝y
(
≤px_hwid
+17, "0109", 4);

298 * 
log«me
;

299 
log«me
 = 
	`gëív
("LOGNAME");

300 #i‚de‡
STATIC


301 i‡(!
log«me
)

303 
∑sswd
 * 
pwít
;

304 
pwít
 = 
	`gëpwuid
(
	`gëuid
());

305 i‡(
pwít
)

306 
log«me
 = 
pwít
->
pw_«me
;

309 
	`¢¥ötf
(
buf
+
off
, 
Àn
-off, "%s", 
log«me
?logname:"Unknown");

311 
	}
}

314 
	$›í_db
(
sqlôe3
 **
sq3
)

316 
∑th
[
PATH_MAX
];

317 
√w_db
 = 0;

319 
	`¢¥ötf
(
∑th
, ’©h), "%s/fûes.db", 
db_∑th
);

320 i‡(
	`ac˚ss
(
∑th
, 
F_OK
) != 0)

322 
√w_db
 = 1;

323 
	`make_dú
(
db_∑th
, 
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
);

325 i‡(
	`sqlôe3_›í
(
∑th
, &
db
Ë!
SQLITE_OK
)

326 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "ERROR: FailedÅo open sqlite database! Exiting...\n");

327 i‡(
sq3
)

328 *
sq3
 = 
db
;

329 
	`sqlôe3_busy_timeout
(
db
, 5000);

330 
	`sql_exec
(
db
, "pragmaÖage_size = 4096");

331 
	`sql_exec
(
db
, "pragma journal_mode = OFF");

332 
	`sql_exec
(
db
, "pragma synchronous = OFF;");

333 
	`sql_exec
(
db
, "pragma default_cache_size = 8192;");

335  
√w_db
;

336 
	}
}

339 
	$check_db
(
sqlôe3
 *
db
, 
√w_db
, 
pid_t
 *
sˇ¬î_pid
)

341 
medü_dú_s
 *
medü_∑th
 = 
NULL
;

342 
cmd
[
PATH_MAX
*2];

343 **
ªsu…
;

344 
i
, 
rows
 = 0;

345 
ªt
;

347 i‡(!
√w_db
)

350 
medü_∑th
 = 
medü_dús
;

351 
medü_∑th
)

353 
ªt
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT TIMESTAMP from DETAILS whîêPATH = %Q", 
medü_∑th
->
∑th
);

354 i‡(
ªt
 !
medü_∑th
->
ty≥s
)

356 
ªt
 = 1;

357 
ªsˇn
;

359 
medü_∑th
 = medü_∑th->
√xt
;

362 
	`sql_gë_èbÀ
(
db
, "SELECT VALUE from SETTINGS whîêKEY = 'medü_dú'", &
ªsu…
, &
rows
, 
NULL
);

363 
i
=1; i <
rows
; i++)

365 
medü_∑th
 = 
medü_dús
;

366 
medü_∑th
)

368 i‡(
	`°rcmp
(
ªsu…
[
i
], 
medü_∑th
->
∑th
) == 0)

370 
medü_∑th
 = medü_∑th->
√xt
;

372 i‡(!
medü_∑th
)

374 
ªt
 = 2;

375 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

376 
ªsˇn
;

379 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

382 
ªt
 = 
	`db_upgøde
(
db
);

383 i‡(
ªt
 != 0)

385 
ªsˇn
:

386 i‡(
ªt
 < 0)

387 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "Cª©ögÇew d©aba£áà%s/fûes.db\n", 
db_∑th
);

388 i‡(
ªt
 == 1)

389 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "New media_dir detected;Ñescanning...\n");

390 i‡(
ªt
 == 2)

391 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "Removed media_dir detected;Ñescanning...\n");

393 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "Database version mismatch;ÇeedÅoÑecreate...\n");

394 
	`sqlôe3_˛o£
(
db
);

396 
	`¢¥ötf
(
cmd
, (cmd), "rm -r‡%s/fûes.db %s/¨t_ˇche", 
db_∑th
, db_path);

397 i‡(
	`sy°em
(
cmd
) != 0)

398 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FailedÅo clean old file cache! Exiting...\n");

400 
	`›í_db
(&
db
);

401 i‡(
	`Cª©eD©aba£
() != 0)

402 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "ERROR: FailedÅo create sqlite database! Exiting...\n");

403 #i‡
USE_FORK


404 
sˇ¬ög
 = 1;

405 
	`sqlôe3_˛o£
(
db
);

406 *
sˇ¬î_pid
 = 
	`f‹k
();

407 
	`›í_db
(&
db
);

408 i‡(!(*
sˇ¬î_pid
))

410 
	`°¨t_sˇ¬î
();

411 
	`sqlôe3_˛o£
(
db
);

412 
	`log_˛o£
();

413 
	`‰ì›ti⁄s
();

414 
	`exô
(
EXIT_SUCCESS
);

417 
	`°¨t_sˇ¬î
();

420 
	}
}

423 
	$wrôïidfûe
(c⁄° *
‚ame
, 
pid
, 
uid_t
 
uid
)

425 
FILE
 *
pidfûe
;

426 
°©
 
°
;

427 
∑th
[
PATH_MAX
], *
dú
;

428 
ªt
 = 0;

430 if(!
‚ame
 || *fname == '\0')

434 
	`°∫˝yt
(
∑th
, 
‚ame
, (path));

435 
dú
 = 
	`dú«me
(
∑th
);

436 i‡(
	`°©
(
dú
, &
°
) == 0)

438 i‡(!
	`S_ISDIR
(
°
.
°_mode
))

440 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "PidfileÖath isÇotá directory: %s\n",

441 
‚ame
);

447 i‡(
	`make_dú
(
dú
, 
S_IRWXU
|
S_IRGRP
|
S_IXGRP
|
S_IROTH
|
S_IXOTH
) != 0)

449 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "UnableÅo createÖidfile directory: %s\n",

450 
‚ame
);

453 i‡(
uid
 >= 0)

455 i‡(
	`chown
(
dú
, 
uid
, -1) != 0)

456 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "UnableÅo changeÖidfile ownership: %s\n",

457 
dú
, 
	`°ªº‹
(
î∫o
));

461 
pidfûe
 = 
	`f›í
(
‚ame
, "w");

462 i‡(!
pidfûe
)

464 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "UnableÅo openÖidfile for writing %s: %s\n",

465 
‚ame
, 
	`°ªº‹
(
î∫o
));

469 i‡(
	`Ârötf
(
pidfûe
, "%d\n", 
pid
) <= 0)

471 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
,

472 "U«bÀÅÿwrôêtÿpidfûê%s: %s\n", 
‚ame
);

473 
ªt
 = -1;

475 i‡(
uid
 >= 0)

477 i‡(
	`fchown
(
	`fûío
(
pidfûe
), 
uid
, -1) != 0)

478 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "UnableÅo changeÖidfile ownership: %s\n",

479 
pidfûe
, 
	`°ªº‹
(
î∫o
));

482 
	`f˛o£
(
pidfûe
);

484  
ªt
;

485 
	}
}

496 
	$öô
(
¨gc
, **
¨gv
)

498 
i
;

499 
pid
;

500 
debug_Êag
 = 0;

501 
vîbo£_Êag
 = 0;

502 
›ti⁄s_Êag
 = 0;

503 
siga˘i⁄
 
ß
;

504 c⁄° * 
¥esuæ
 = 
NULL
;

505 c⁄° * 
›ti⁄sfûe
 = "/etc/minidlna.conf";

506 
mac_°r
[13];

507 *
°rög
, *
w‹d
;

508 *
∑th
;

509 
buf
[
PATH_MAX
];

510 
ù_addr
[
INET_ADDRSTRLEN
 + 3] = {'\0'};

511 
log_°r
[75] = "general,artwork,database,inotify,scanner,metadata,http,ssdp,tivo=warn";

512 *
log_Àvñ
 = 
NULL
;

513 
medü_dú_s
 *
medü_dú
;

514 
medü_ty≥s
 
ty≥s
;

515 
uid_t
 
uid
 = -1;

516 
cou¡
;

517 
gíabÀ
;

520 
i
=2; i<
¨gc
; i++)

522 i‡(
	`°rcmp
(
¨gv
[
i
-1], "-f") == 0)

524 
›ti⁄sfûe
 = 
¨gv
[
i
];

525 
›ti⁄s_Êag
 = 1;

531 i‡(
	`gësyshwaddr
(
mac_°r
, (mac_str)) < 0)

533 
	`DPRINTF
(
E_OFF
, 
L_GENERAL
, "No MACáddress found. Falling backÅo generic UUID.\n");

534 
	`°r˝y
(
mac_°r
, "554e4b4e4f57");

536 
	`°r˝y
(
uuidvÆue
+5, "4d696e69-444c-164e-9d41-");

537 
	`°∫ˇt
(
uuidvÆue
, 
mac_°r
, 12);

539 
	`gë‰õndly«me
(
‰õndly_«me
, 
FRIENDLYNAME_MAX_LEN
);

541 
ru¡ime_v¨s
.
p‹t
 = -1;

542 
ru¡ime_v¨s
.
nŸify_öãrvÆ
 = 895;

543 
ru¡ime_v¨s
.
roŸ_c⁄èöî
 = 
NULL
;

547 i‡(
	`ªad›ti⁄sfûe
(
›ti⁄sfûe
) < 0)

550 if(
	`ac˚ss
(
›ti⁄sfûe
, 
F_OK
Ë=0 || 
›ti⁄s_Êag
)

551 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "Eº‹Ñódög c⁄figuøti⁄ fûê%s\n", 
›ti⁄sfûe
);

554 
i
=0; i<
num_›ti⁄s
; i++)

556 
¨y_›ti⁄s
[
i
].
id
)

558 
UPNPIFNAME
:

559 
°rög
 = 
¨y_›ti⁄s
[
i
].
vÆue
; (
w‹d
 = 
	`°πok
(°rög, ",")); såög = 
NULL
)

561 i‡(
n_œn_addr
 < 
MAX_LAN_ADDR
)

563 i‡(
	`gëiÁddr
(
w‹d
, 
ù_addr
, (ip_addr)) >= 0)

565 i‡(*
ù_addr
 && 
	`∑r£œ«ddr
(&
œn_addr
[
n_œn_addr
], ip_addr) == 0)

566 i‡(
n_œn_addr
 < 
MAX_LAN_ADDR
)

567 
n_œn_addr
++;

571 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Too manyÜistening ips (max: %d), ignoring %s\n",

572 
MAX_LAN_ADDR
, 
w‹d
);

575 
UPNPLISTENING_IP
:

576 i‡(
n_œn_addr
 < 
MAX_LAN_ADDR
)

578 i‡(
	`∑r£œ«ddr
(&
œn_addr
[
n_œn_addr
], 
¨y_›ti⁄s
[
i
].
vÆue
) == 0)

579 
n_œn_addr
++;

582 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Too manyÜistening ips (max: %d), ignoring %s\n",

583 
MAX_LAN_ADDR
, 
¨y_›ti⁄s
[
i
].
vÆue
);

585 
UPNPPORT
:

586 
ru¡ime_v¨s
.
p‹t
 = 
	`©oi
(
¨y_›ti⁄s
[
i
].
vÆue
);

588 
UPNPPRESENTATIONURL
:

589 
¥esuæ
 = 
¨y_›ti⁄s
[
i
].
vÆue
;

591 
UPNPNOTIFY_INTERVAL
:

592 
ru¡ime_v¨s
.
nŸify_öãrvÆ
 = 
	`©oi
(
¨y_›ti⁄s
[
i
].
vÆue
);

594 
UPNPSERIAL
:

595 
	`°∫˝yt
(
£rü umbî
, 
¨y_›ti⁄s
[
i
].
vÆue
, 
SERIALNUMBER_MAX_LEN
);

597 
UPNPMODEL_NAME
:

598 
	`°∫˝yt
(
modñ«me
, 
¨y_›ti⁄s
[
i
].
vÆue
, 
MODELNAME_MAX_LEN
);

600 
UPNPMODEL_NUMBER
:

601 
	`°∫˝yt
(
modñnumbî
, 
¨y_›ti⁄s
[
i
].
vÆue
, 
MODELNUMBER_MAX_LEN
);

603 
UPNPFRIENDLYNAME
:

604 
	`°∫˝yt
(
‰õndly_«me
, 
¨y_›ti⁄s
[
i
].
vÆue
, 
FRIENDLYNAME_MAX_LEN
);

606 
UPNPMEDIADIR
:

607 
ty≥s
 = 
ALL_MEDIA
;

608 
gíabÀ
 = 0;

609 
∑th
 = 
¨y_›ti⁄s
[
i
].
vÆue
;

610 
w‹d
 = 
	`°rchr
(
∑th
, ',');

611 i‡(
w‹d
 && (
	`ac˚ss
(
∑th
, 
F_OK
) != 0))

614 
cou¡
 = 0;

615 *
∑th
)

617 i‡(*
∑th
 == ',')

619 
cou¡
++;

620 i‡(
cou¡
 >= 2)

622 
∑th
++;

626 i‡(*
∑th
 == 'A' || *path == 'a')

627 
ty≥s
 |
TYPE_AUDIO
;

628 i‡(*
∑th
 == 'V' || *path == 'v')

629 
ty≥s
 |
TYPE_VIDEO
;

630 i‡(*
∑th
 == 'P' || *path == 'p')

631 
ty≥s
 |
TYPE_IMAGES
;

632 i‡(*
∑th
 == 'G' || *path == 'g')

633 
gíabÀ
 = 1;

634 i‡(*
∑th
 == '/')

637 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "Media directoryÉntryÇot understood [%s]\n",

638 
¨y_›ti⁄s
[
i
].
vÆue
);

639 
∑th
++;

642 
∑th
 = 
	`ªÆ∑th
’©h, 
buf
);

643 i‡(!
∑th
 || 
	`ac˚ss
’©h, 
F_OK
) != 0)

645 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Media directory \"%s\"Çotáccessible [%s]\n",

646 
¨y_›ti⁄s
[
i
].
vÆue
, 
	`°ªº‹
(
î∫o
));

649 
medü_dú
 = 
	`ˇŒoc
(1, (
medü_dú_s
));

650 
medü_dú
->
∑th
 = 
	`°rdup
(path);

651 
medü_dú
->
ty≥s
 =Åypes;

652 
medü_dú
->
gíabÀ
 = genable;

653 i‡(
medü_dús
)

655 
medü_dú_s
 *
Æl_dús
 = 
medü_dús
;

656  
Æl_dús
->
√xt
 )

657 
Æl_dús
 =áŒ_dús->
√xt
;

658 
Æl_dús
->
√xt
 = 
medü_dú
;

661 
medü_dús
 = 
medü_dú
;

663 
UPNPALBUMART_NAMES
:

664 
°rög
 = 
¨y_›ti⁄s
[
i
].
vÆue
; (
w‹d
 = 
	`°πok
(°rög, "/")); såög = 
NULL
)

666 
Æbum_¨t_«me_s
 * 
this_«me
 = 
	`ˇŒoc
(1, (album_art_name_s));

667 
Àn
 = 
	`°æí
(
w‹d
);

668 i‡(
w‹d
[
Àn
-1] == '*')

670 
w‹d
[
Àn
-1] = '\0';

671 
this_«me
->
wûdˇrd
 = 1;

673 
this_«me
->
«me
 = 
	`°rdup
(
w‹d
);

674 i‡(
Æbum_¨t_«mes
)

676 
Æbum_¨t_«me_s
 * 
Æl_«mes
 = 
Æbum_¨t_«mes
;

677  
Æl_«mes
->
√xt
 )

678 
Æl_«mes
 =áŒ_«mes->
√xt
;

679 
Æl_«mes
->
√xt
 = 
this_«me
;

682 
Æbum_¨t_«mes
 = 
this_«me
;

685 
UPNPDBDIR
:

686 
∑th
 = 
	`ªÆ∑th
(
¨y_›ti⁄s
[
i
].
vÆue
, 
buf
);

687 i‡(!
∑th
)

688 
∑th
 = (
¨y_›ti⁄s
[
i
].
vÆue
);

689 
	`make_dú
(
∑th
, 
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
);

690 i‡(
	`ac˚ss
(
∑th
, 
F_OK
) != 0)

691 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "D©aba£Ö©hÇŸác˚ssibÀ! [%s]\n", 
∑th
);

692 
	`°∫˝yt
(
db_∑th
, 
∑th
, 
PATH_MAX
);

694 
UPNPLOGDIR
:

695 
∑th
 = 
	`ªÆ∑th
(
¨y_›ti⁄s
[
i
].
vÆue
, 
buf
);

696 i‡(!
∑th
)

697 
∑th
 = (
¨y_›ti⁄s
[
i
].
vÆue
);

698 
	`make_dú
(
∑th
, 
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
);

699 i‡(
	`ac˚ss
(
∑th
, 
F_OK
) != 0)

700 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "LogÖ©hÇŸác˚ssibÀ! [%s]\n", 
∑th
);

701 
	`°∫˝yt
(
log_∑th
, 
∑th
, 
PATH_MAX
);

703 
UPNPLOGLEVEL
:

704 
log_Àvñ
 = 
¨y_›ti⁄s
[
i
].
vÆue
;

706 
UPNPINOTIFY
:

707 i‡((
	`°rcmp
(
¨y_›ti⁄s
[
i
].
vÆue
, "yes"Ë!0Ë&& !
	`©oi
(ary_options[i].value))

708 
	`CLEARFLAG
(
INOTIFY_MASK
);

710 
ENABLE_TIVO
:

711 i‡((
	`°rcmp
(
¨y_›ti⁄s
[
i
].
vÆue
, "yes"Ë=0Ë|| 
	`©oi
(ary_options[i].value))

712 
	`SETFLAG
(
TIVO_MASK
);

714 
ENABLE_DLNA_STRICT
:

715 i‡((
	`°rcmp
(
¨y_›ti⁄s
[
i
].
vÆue
, "yes"Ë=0Ë|| 
	`©oi
(ary_options[i].value))

716 
	`SETFLAG
(
DLNA_STRICT_MASK
);

718 
ROOT_CONTAINER
:

719 
¨y_›ti⁄s
[
i
].
vÆue
[0]) {

721 
ru¡ime_v¨s
.
roŸ_c⁄èöî
 = 
NULL
;

725 
ru¡ime_v¨s
.
roŸ_c⁄èöî
 = 
BROWSEDIR_ID
;

729 
ru¡ime_v¨s
.
roŸ_c⁄èöî
 = 
MUSIC_ID
;

733 
ru¡ime_v¨s
.
roŸ_c⁄èöî
 = 
VIDEO_ID
;

737 
ru¡ime_v¨s
.
roŸ_c⁄èöî
 = 
IMAGE_ID
;

740 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "InvalidÑoot container! [%s]\n",

741 
¨y_›ti⁄s
[
i
].
vÆue
);

745 
UPNPMINISSDPDSOCKET
:

746 
möissdpdsockë∑th
 = 
¨y_›ti⁄s
[
i
].
vÆue
;

748 
UPNPUUID
:

749 
	`°r˝y
(
uuidvÆue
+5, 
¨y_›ti⁄s
[
i
].
vÆue
);

751 
USER_ACCOUNT
:

752 
uid
 = 
	`°πﬁ
(
¨y_›ti⁄s
[
i
].
vÆue
, &
°rög
, 0);

753 i‡(*
°rög
)

756 
∑sswd
 *
íåy
 = 
	`gëpw«m
(
¨y_›ti⁄s
[
i
].
vÆue
);

757 i‡(!
íåy
)

758 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "Bad u£∏'%s'.\n", 
¨gv
[
i
]);

759 
uid
 = 
íåy
->
pw_uid
;

763 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Unknown option in file %s\n",

764 
›ti⁄sfûe
);

767 i‡(
log_∑th
[0] == '\0')

769 i‡(
db_∑th
[0] == '\0')

770 
	`°∫˝yt
(
log_∑th
, 
DEFAULT_LOG_PATH
, 
PATH_MAX
);

772 
	`°∫˝yt
(
log_∑th
, 
db_∑th
, 
PATH_MAX
);

774 i‡(
db_∑th
[0] == '\0')

775 
	`°∫˝yt
(
db_∑th
, 
DEFAULT_DB_PATH
, 
PATH_MAX
);

778 
i
=1; i<
¨gc
; i++)

780 i‡(
¨gv
[
i
][0] != '-')

782 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "Unknow¿›ti⁄: %s\n", 
¨gv
[
i
]);

784 i‡(
	`°rcmp
(
¨gv
[
i
], "--help") == 0)

786 
ru¡ime_v¨s
.
p‹t
 = 0;

789 
¨gv
[
i
][1])

792 i‡(
i
+1 < 
¨gc
)

793 
ru¡ime_v¨s
.
nŸify_öãrvÆ
 = 
	`©oi
(
¨gv
[++
i
]);

795 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

798 i‡(
i
+1 < 
¨gc
)

799 
	`°∫˝yt
(
£rü umbî
, 
¨gv
[++
i
], 
SERIALNUMBER_MAX_LEN
);

801 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

804 i‡(
i
+1 < 
¨gc
)

805 
	`°∫˝yt
(
modñnumbî
, 
¨gv
[++
i
], 
MODELNUMBER_MAX_LEN
);

807 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

810 i‡(
i
+1 < 
¨gc
)

811 
ru¡ime_v¨s
.
p‹t
 = 
	`©oi
(
¨gv
[++
i
]);

813 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

816 i‡(
i
+1 < 
¨gc
)

818 i‡(
¨gv
[++
i
][0] != '/')

819 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯ªquúe†™ábsﬁuã fûíame.\n", 
¨gv
[
i
-1][1]);

821 
pidfûíame
 = 
¨gv
[
i
];

824 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

827 
debug_Êag
 = 1;

829 
vîbo£_Êag
 = 1;

832 
	`SETFLAG
(
NO_PLAYLIST_MASK
);

835 i‡(
i
+1 < 
¨gc
)

836 
¥esuæ
 = 
¨gv
[++
i
];

838 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

841 i‡(
i
+1 < 
¨gc
)

843 
addªss_Æªady_thîe
 = 0;

844 
j
;

845 
i
++;

846 
j
=0; j<
n_œn_addr
; j++)

848 
œn_addr_s
 
tm∑ddr
;

849 
	`∑r£œ«ddr
(&
tm∑ddr
, 
¨gv
[
i
]);

850 if(0 =
	`°rcmp
(
œn_addr
[
j
].
°r
, 
tm∑ddr
.str))

851 
addªss_Æªady_thîe
 = 1;

853 i‡(
addªss_Æªady_thîe
)

855 i‡(
n_œn_addr
 < 
MAX_LAN_ADDR
)

857 i‡(
	`∑r£œ«ddr
(&
œn_addr
[
n_œn_addr
], 
¨gv
[
i
]) == 0)

858 
n_œn_addr
++;

861 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Too manyÜistening ips (max: %d), ignoring %s\n",

862 
MAX_LAN_ADDR
, 
¨gv
[
i
]);

865 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

868 i‡(
i
+1 < 
¨gc
)

870 
addªss_Æªady_thîe
 = 0;

871 
j
;

872 
i
++;

873 i‡(
	`gëiÁddr
(
¨gv
[
i
], 
ù_addr
, (ip_addr)) < 0)

874 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "RequiredÇetwork interface '%s'Çot found.\n",

875 
¨gv
[
i
]);

876 
j
=0; j<
n_œn_addr
; j++)

878 
œn_addr_s
 
tm∑ddr
;

879 
	`∑r£œ«ddr
(&
tm∑ddr
, 
ù_addr
);

880 if(
	`°rcmp
(
œn_addr
[
j
].
°r
, 
tm∑ddr
.str) == 0)

881 
addªss_Æªady_thîe
 = 1;

883 i‡(
addªss_Æªady_thîe
)

885 i‡(
n_œn_addr
 < 
MAX_LAN_ADDR
)

887 if(
	`∑r£œ«ddr
(&
œn_addr
[
n_œn_addr
], 
ù_addr
) == 0)

888 
n_œn_addr
++;

891 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Too manyÜistening ips (max: %d), ignoring %s\n",

892 
MAX_LAN_ADDR
, 
¨gv
[
i
]);

895 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

898 
i
++;

901 
ru¡ime_v¨s
.
p‹t
 = 0;

904 
	`¢¥ötf
(
buf
, (buf), "rm -r‡%s/fûes.db %s/¨t_ˇche", 
db_∑th
, db_path);

905 i‡(
	`sy°em
(
buf
) != 0)

906 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FailedÅo clean old file cache. EXITING\n");

909 i‡(
i
+1 !
¨gc
)

911 
i
++;

912 
uid
 = 
	`°πﬁ
(
¨gv
[
i
], &
°rög
, 0);

913 i‡(*
°rög
)

916 
∑sswd
 *
íåy
 = 
	`gëpw«m
(
¨gv
[
i
]);

917 i‡(!
íåy
)

918 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "Bad u£∏'%s'.\n", 
¨gv
[
i
]);

919 
uid
 = 
íåy
->
pw_uid
;

923 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "O±i⁄ -%¯èke†⁄ê¨gumít.\n", 
¨gv
[
i
][1]);

926 #ifde‡
__löux__


928 
	`SETFLAG
(
SYSTEMD_MASK
);

932 
	`¥ötf
("Vîsi⁄ " 
MINIDLNA_VERSION
 "\n");

933 
	`exô
(0);

936 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Unknow¿›ti⁄: %s\n", 
¨gv
[
i
]);

940 i‡(
n_œn_addr
 < 1)

942 i‡(
	`gësyßddrs
() <= 0)

943 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "No IPáddressáutomatically detected!\n");

946 i‡(!
n_œn_addr
 || 
ru¡ime_v¨s
.
p‹t
 <= 0)

948 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "Usage:\n\t"

963 #ifde‡
__löux__


967 
¨gv
[0], 
pidfûíame
);

971 i‡(
vîbo£_Êag
)

973 
	`°r˝y
(
log_°r
+65, "debug");

974 
log_Àvñ
 = 
log_°r
;

976 i‡(!
log_Àvñ
)

977 
log_Àvñ
 = 
log_°r
;

980 
∑th
 = 
NULL
;

981 i‡(
debug_Êag
)

983 
pid
 = 
	`gëpid
();

984 
	`°r˝y
(
log_°r
+65, "maxdebug");

985 
log_Àvñ
 = 
log_°r
;

987 i‡(
	`GETFLAG
(
SYSTEMD_MASK
))

989 
pid
 = 
	`gëpid
();

993 
pid
 = 
	`d´m⁄ize
();

994 #ifde‡
READYNAS


995 
	`u∆ök
("/ramfs/.upnp-av_scan");

996 
∑th
 = "/var/log/upnp-av.log";

998 i‡(
	`ac˚ss
(
db_∑th
, 
F_OK
) != 0)

999 
	`make_dú
(
db_∑th
, 
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
);

1000 
	`¢¥ötf
(
buf
, (buf), "%s/möid a.log", 
log_∑th
);

1001 
∑th
 = 
buf
;

1004 
	`log_öô
(
∑th
, 
log_Àvñ
);

1006 i‡(
	`checkf‹ru¬ög
(
pidfûíame
) < 0)

1008 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "MiniDLNA isálreadyÑunning. EXITING.\n");

1012 
	`£t_°¨tup_time
();

1015 i‡(
¥esuæ
)

1016 
	`°∫˝yt
(
¥e£¡©i⁄uæ
, 
¥esuæ
, 
PRESENTATIONURL_MAX_LEN
);

1018 
	`°r˝y
(
¥e£¡©i⁄uæ
, "/");

1021 
	`mem£t
(&
ß
, 0, (
siga˘i⁄
));

1022 
ß
.
ß_h™dÀr
 = 
sigãrm
;

1023 i‡(
	`siga˘i⁄
(
SIGTERM
, &
ß
, 
NULL
))

1024 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FaûedÅÿ£à%†h™dÀr. EXITING.\n", 
SIGTERM
);

1025 i‡(
	`siga˘i⁄
(
SIGINT
, &
ß
, 
NULL
))

1026 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FaûedÅÿ£à%†h™dÀr. EXITING.\n", 
SIGINT
);

1027 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
)

1028 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FaûedÅÿ£à%†h™dÀr. EXITING.\n", 
SIGPIPE
);

1030 i‡(
	`wrôïidfûe
(
pidfûíame
, 
pid
, 
uid
) != 0)

1031 
pidfûíame
 = 
NULL
;

1033 i‡(
uid
 !-1 && 
	`£tuid
(uid) == -1)

1034 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FailedÅo switchÅo uid '%d'. [%s] EXITING.\n",

1035 
uid
, 
	`°ªº‹
(
î∫o
));

1038 
	}
}

1043 
	$maö
(
¨gc
, **
¨gv
)

1045 
ªt
, 
i
;

1046 
sudp
 = -1, 
shâ∂
 = -1;

1047 
¢Ÿify
[
MAX_LAN_ADDR
];

1048 
	`LIST_HEAD
(
hâ∂i°hód
, 
u≤phâp
Ë
u≤phâphód
;

1049 
u≤phâp
 * 
e
 = 0;

1050 
u≤phâp
 * 
√xt
;

1051 
fd_£t
 
ªad£t
;

1052 
fd_£t
 
wrôe£t
;

1053 
timevÆ
 
timeout
, 
timeofday
, 
œ°nŸifytime
 = {0, 0};

1054 
time_t
 
œ°upd©ëime
 = 0;

1055 
max_fd
 = -1;

1056 
œ°_ch™ge˙t
 = 0;

1057 
pid_t
 
sˇ¬î_pid
 = 0;

1058 
±hªad_t
 
öŸify_thªad
 = 0;

1059 #ifde‡
TIVO_SUPPORT


1060 
uöt8_t
 
bóc⁄_öãrvÆ
 = 5;

1061 
sbóc⁄
 = -1;

1062 
sockaddr_ö
 
tivo_bˇ°
;

1063 
timevÆ
 
œ°bóc⁄time
 = {0, 0};

1066 
i
 = 0; i < 
L_MAX
; i++)

1067 
log_Àvñ
[
i
] = 
E_WARN
;

1068 #ifde‡
ENABLE_NLS


1069 
	`£éoˇÀ
(
LC_MESSAGES
, "");

1070 
	`£éoˇÀ
(
LC_CTYPE
, "en_US.utf8");

1071 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "UsögÜoˇÀ dú %s\n", 
	`bödãxtdomaö
("möid a", 
	`gëív
("TEXTDOMAINDIR")));

1072 
	`ãxtdomaö
("minidlna");

1075 
ªt
 = 
	`öô
(
¨gc
, 
¨gv
);

1076 i‡(
ªt
 != 0)

1079 
ªt
 = 
	`g√t_ubus_öô
();

1080 i‡(
ªt
 != 0)

1082 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "ConnectÅo UBus failed\n");

1086 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "Sèπög " 
SERVER_NAME
 " vîsi⁄ " 
MINIDLNA_VERSION
 ".\n");

1087 i‡(
	`sqlôe3_libvîsi⁄_numbî
() < 3005001)

1089 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "SQLiteÜibrary is old. Please use version 3.5.1 orÇewer.\n");

1092 
	`LIST_INIT
(&
u≤phâphód
);

1094 
ªt
 = 
	`›í_db
(
NULL
);

1095 i‡(
ªt
 == 0)

1097 
upd©eID
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT VALUE from SETTINGS where KEY = 'UPDATE_ID'");

1098 i‡(
upd©eID
 == -1)

1099 
ªt
 = -1;

1101 
	`check_db
(
db
, 
ªt
, &
sˇ¬î_pid
);

1102 
	`sig«l
(
SIGCHLD
, &
sigchld
);

1103 #ifde‡
HAVE_INOTIFY


1104 if–
	`GETFLAG
(
INOTIFY_MASK
) )

1106 i‡(!
	`sqlôe3_thªadß„
(Ë|| 
	`sqlôe3_libvîsi⁄_numbî
() < 3005001)

1107 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "SQLiteÜibrary isÇotÅhreadsafe! "

1109 i‡(
	`±hªad_¸óã
(&
öŸify_thªad
, 
NULL
, 
°¨t_öŸify
, NULL) != 0)

1110 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "ERROR:Öthread_create() failed for start_inotify. EXITING\n");

1113 
i
 = 0; i < 
n_œn_addr
; i++)

1115 
	`DPRINTF
(
E_INFO
, 
L_GENERAL
, "Enabled interface %s/%s\n",

1116 
œn_addr
[
i
].
°r
, 
	`öë_¡ﬂ
÷™_addr[i].
mask
));

1119 
sudp
 = 
	`O≥nAndC⁄fSSDPRe˚iveSockë
();

1120 i‡(
sudp
 < 0)

1122 
	`DPRINTF
(
E_INFO
, 
L_GENERAL
, "FailedÅo open socket forÑeceiving SSDP. TryingÅo use MiniSSDPd\n");

1123 i‡(
	`SubmôSîvi˚sToMöiSSDPD
(
œn_addr
[0].
°r
, 
ru¡ime_v¨s
.
p‹t
) < 0)

1124 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FailedÅo connectÅo MiniSSDPd. EXITING");

1127 
shâ∂
 = 
	`O≥nAndC⁄fHTTPSockë
(
ru¡ime_v¨s
.
p‹t
);

1128 i‡(
shâ∂
 < 0)

1129 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FailedÅo open socket for HTTP. EXITING\n");

1130 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "HTTPÜi°íög o¿p‹à%d\n", 
ru¡ime_v¨s
.
p‹t
);

1133 i‡(
	`O≥nAndC⁄fSSDPNŸifySockës
(
¢Ÿify
) < 0)

1134 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FailedÅo open sockets for sending SSDPÇotify "

1137 #ifde‡
TIVO_SUPPORT


1138 i‡(
	`GETFLAG
(
TIVO_MASK
))

1140 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "TiVo support isÉnabled.\n");

1142 
ªt
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tiv‹™dom", 1, 
SQLITE_UTF8
, 
NULL
, &
TiVoR™domSìdFunc
, NULL, NULL);

1143 i‡(
ªt
 !
SQLITE_OK
)

1144 
	`DPRINTF
(
E_ERROR
, 
L_TIVO
, "ERROR: FailedÅoádd sqliteÑandomize function for TiVo!\n");

1146 
sbóc⁄
 = 
	`O≥nAndC⁄fTivoBóc⁄Sockë
();

1147 if(
sbóc⁄
 < 0)

1148 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FailedÅo open sockets for sending Tivo beaconÇotify "

1150 
tivo_bˇ°
.
sö_Ámûy
 = 
AF_INET
;

1151 
tivo_bˇ°
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
	`gëBˇ°Addªss
());

1152 
tivo_bˇ°
.
sö_p‹t
 = 
	`ht⁄s
(2190);

1155 
sbóc⁄
 = -1;

1158 
	`SídSSDPGoodbye
(
¢Ÿify
, 
n_œn_addr
);

1161 !
quôtög
)

1165 i‡(
	`gëtimeofday
(&
timeofday
, 0) < 0)

1167 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "gëtimeofday(): %s\n", 
	`°ªº‹
(
î∫o
));

1168 
timeout
.
tv_£c
 = 
ru¡ime_v¨s
.
nŸify_öãrvÆ
;

1169 
timeout
.
tv_u£c
 = 0;

1174 i‡(
timeofday
.
tv_£c
 >(
œ°nŸifytime
.tv_£¯+ 
ru¡ime_v¨s
.
nŸify_öãrvÆ
))

1176 
	`SídSSDPNŸifõs2
(
¢Ÿify
,

1177 ()
ru¡ime_v¨s
.
p‹t
,

1178 (
ru¡ime_v¨s
.
nŸify_öãrvÆ
 << 1)+10);

1179 
	`mem˝y
(&
œ°nŸifytime
, &
timeofday
, (
timevÆ
));

1180 
timeout
.
tv_£c
 = 
ru¡ime_v¨s
.
nŸify_öãrvÆ
;

1181 
timeout
.
tv_u£c
 = 0;

1185 
timeout
.
tv_£c
 = 
œ°nŸifytime
.tv_£¯+ 
ru¡ime_v¨s
.
nŸify_öãrvÆ


1186 - 
timeofday
.
tv_£c
;

1187 i‡(
timeofday
.
tv_u£c
 > 
œ°nŸifytime
.tv_usec)

1189 
timeout
.
tv_u£c
 = 1000000 + 
œ°nŸifytime
.tv_usec

1190 - 
timeofday
.
tv_u£c
;

1191 
timeout
.
tv_£c
--;

1194 
timeout
.
tv_u£c
 = 
œ°nŸifytime
.tv_u£¯- 
timeofday
.tv_usec;

1196 #ifde‡
TIVO_SUPPORT


1197 i‡(
	`GETFLAG
(
TIVO_MASK
))

1199 i‡(
timeofday
.
tv_£c
 >(
œ°bóc⁄time
.tv_£¯+ 
bóc⁄_öãrvÆ
))

1201 
	`£ndBóc⁄Mesßge
(
sbóc⁄
, &
tivo_bˇ°
, (
sockaddr_ö
), 1);

1202 
	`mem˝y
(&
œ°bóc⁄time
, &
timeofday
, (
timevÆ
));

1203 i‡(
timeout
.
tv_£c
 > 
bóc⁄_öãrvÆ
)

1205 
timeout
.
tv_£c
 = 
bóc⁄_öãrvÆ
;

1206 
timeout
.
tv_u£c
 = 0;

1210 i‡(
bóc⁄_öãrvÆ
 =5 && (
timeofday
.
tv_£c
 - 
°¨tup_time
) > 60)

1211 
bóc⁄_öãrvÆ
 = 60;

1213 i‡(
timeout
.
tv_£c
 > (
œ°bóc⁄time
.tv_£¯+ 
bóc⁄_öãrvÆ
 + 1 - 
timeofday
.tv_sec))

1214 
timeout
.
tv_£c
 = 
œ°bóc⁄time
.tv_£¯+ 
bóc⁄_öãrvÆ
 - 
timeofday
.tv_sec;

1219 i‡(
sˇ¬ög
)

1221 i‡(!
sˇ¬î_pid
 || 
	`kûl
(scanner_pid, 0) != 0)

1223 
sˇ¬ög
 = 0;

1224 
upd©eID
++;

1229 
	`FD_ZERO
(&
ªad£t
);

1231 i‡(
sudp
 >= 0)

1233 
	`FD_SET
(
sudp
, &
ªad£t
);

1234 
max_fd
 = 
	`MAX
(max_fd, 
sudp
);

1237 i‡(
shâ∂
 >= 0)

1239 
	`FD_SET
(
shâ∂
, &
ªad£t
);

1240 
max_fd
 = 
	`MAX
(max_fd, 
shâ∂
);

1242 #ifde‡
TIVO_SUPPORT


1243 i‡(
sbóc⁄
 >= 0)

1245 
	`FD_SET
(
sbóc⁄
, &
ªad£t
);

1246 
max_fd
 = 
	`MAX
(max_fd, 
sbóc⁄
);

1249 
i
 = 0;

1250 
e
 = 
u≤phâphód
.
lh_fú°
;É !
NULL
;É =É->
íåõs
.
À_√xt
)

1252 i‡((
e
->
sockë
 >0Ë&& (e->
°©e
 <= 2))

1254 
	`FD_SET
(
e
->
sockë
, &
ªad£t
);

1255 
max_fd
 = 
	`MAX
(max_fd, 
e
->
sockë
);

1256 
i
++;

1259 #ifde‡
DEBUG


1261 i‡(
i
 > 1)

1262 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "%dá˘ivêöcomög HTTP c⁄√˘i⁄s\n", 
i
);

1264 
	`FD_ZERO
(&
wrôe£t
);

1265 
	`u≤≥víts_£À˘fds
(&
ªad£t
, &
wrôe£t
, &
max_fd
);

1267 
ªt
 = 
	`£À˘
(
max_fd
+1, &
ªad£t
, &
wrôe£t
, 0, &
timeout
);

1268 i‡(
ªt
 < 0)

1270 if(
quôtög
Ë
shutdown
;

1271 if(
î∫o
 =
EINTR
) ;

1272 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "£À˘◊Œ): %s\n", 
	`°ªº‹
(
î∫o
));

1273 
	`DPRINTF
(
E_FATAL
, 
L_GENERAL
, "FailedÅo select open sockets. EXITING\n");

1275 
	`u≤≥víts_¥o˚ssfds
(&
ªad£t
, &
wrôe£t
);

1277 i‡(
sudp
 >0 && 
	`FD_ISSET
(sudp, &
ªad£t
))

1280 
	`Pro˚ssSSDPReque°
(
sudp
, ()
ru¡ime_v¨s
.
p‹t
);

1282 #ifde‡
TIVO_SUPPORT


1283 i‡(
sbóc⁄
 >0 && 
	`FD_ISSET
(sbóc⁄, &
ªad£t
))

1286 
	`Pro˚ssTiVoBóc⁄
(
sbóc⁄
);

1291 i‡(
i
 && (
timeofday
.
tv_£c
 >(
œ°upd©ëime
 + 2)))

1293 i‡(
sˇ¬ög
 || 
	`sqlôe3_tŸÆ_ch™ges
(
db
Ë!
œ°_ch™ge˙t
)

1295 
upd©eID
++;

1296 
œ°_ch™ge˙t
 = 
	`sqlôe3_tŸÆ_ch™ges
(
db
);

1297 
	`u≤p_evít_v¨_ch™ge_nŸify
(
EC⁄ã¡Dúe˘‹y
);

1298 
œ°upd©ëime
 = 
timeofday
.
tv_£c
;

1302 
e
 = 
u≤phâphód
.
lh_fú°
;É !
NULL
;É =É->
íåõs
.
À_√xt
)

1304 i‡((
e
->
sockë
 >0Ë&& (e->
°©e
 <2Ë&& (
	`FD_ISSET
”->sockë, &
ªad£t
)))

1305 
	`Pro˚ss_u≤phâp
(
e
);

1308 i‡(
shâ∂
 >0 && 
	`FD_ISSET
(shâ∂, &
ªad£t
))

1310 
shâp
;

1311 
sockÀn_t
 
˛õ¡«mñí
;

1312 
sockaddr_ö
 
˛õ¡«me
;

1313 
˛õ¡«mñí
 = (
sockaddr_ö
);

1314 
shâp
 = 
	`ac˚±
(
shâ∂
, (
sockaddr
 *)&
˛õ¡«me
, &
˛õ¡«mñí
);

1315 i‡(
shâp
<0)

1317 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "ac˚±(hâp): %s\n", 
	`°ªº‹
(
î∫o
));

1321 
u≤phâp
 * 
tmp
 = 0;

1322 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "HTTP connection from %s:%d\n",

1323 
	`öë_¡ﬂ
(
˛õ¡«me
.
sö_addr
),

1324 
	`¡ohs
(
˛õ¡«me
.
sö_p‹t
) );

1330 
tmp
 = 
	`New_u≤phâp
(
shâp
);

1331 i‡(
tmp
)

1333 
tmp
->
˛õ¡addr
 = 
˛õ¡«me
.
sö_addr
;

1334 
	`LIST_INSERT_HEAD
(&
u≤phâphód
, 
tmp
, 
íåõs
);

1338 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "New_upnphttp() failed\n");

1339 
	`˛o£
(
shâp
);

1344 
e
 = 
u≤phâphód
.
lh_fú°
;É !
NULL
;É = 
√xt
)

1346 
√xt
 = 
e
->
íåõs
.
À_√xt
;

1347 if(
e
->
°©e
 >= 100)

1349 
	`LIST_REMOVE
(
e
, 
íåõs
);

1350 
	`Dñëe_u≤phâp
(
e
);

1355 
shutdown
:

1357 i‡(
sˇ¬ög
 && 
sˇ¬î_pid
)

1358 
	`kûl
(
sˇ¬î_pid
, 9);

1361 
u≤phâphód
.
lh_fú°
 !
NULL
)

1363 
e
 = 
u≤phâphód
.
lh_fú°
;

1364 
	`LIST_REMOVE
(
e
, 
íåõs
);

1365 
	`Dñëe_u≤phâp
(
e
);

1367 i‡(
sudp
 >= 0)

1368 
	`˛o£
(
sudp
);

1369 i‡(
shâ∂
 >= 0)

1370 
	`˛o£
(
shâ∂
);

1371 #ifde‡
TIVO_SUPPORT


1372 i‡(
sbóc⁄
 >= 0)

1373 
	`˛o£
(
sbóc⁄
);

1376 i‡(
	`SídSSDPGoodbye
(
¢Ÿify
, 
n_œn_addr
) < 0)

1377 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "FailedÅo broadcast good-byeÇotifications\n");

1379 
i
=0; i < 
n_œn_addr
; i++)

1380 
	`˛o£
(
¢Ÿify
[
i
]);

1382 i‡(
öŸify_thªad
)

1383 
	`±hªad_joö
(
öŸify_thªad
, 
NULL
);

1385 
	`sql_exec
(
db
, "UPDATE SETTINGS së VALUE = '%u' whîêKEY = 'UPDATE_ID'", 
upd©eID
);

1386 
	`sqlôe3_˛o£
(
db
);

1388 
	`u≤≥víts_ªmoveSubs¸ibîs
();

1390 i‡(
pidfûíame
 && 
	`u∆ök
(pidfilename) < 0)

1391 
	`DPRINTF
(
E_ERROR
, 
L_GENERAL
, "FaûedÅÿªmovêpidfûê%s: %s\n", 
pidfûíame
, 
	`°ªº‹
(
î∫o
));

1393 
	`log_˛o£
();

1394 
	`‰ì›ti⁄s
();

1395 
	`g√t_ubus_exô
();

1397 
	`exô
(
EXIT_SUCCESS
);

1398 
	}
}

	@minidlnapath.h

29 #i‚de‡
__MINIDLNAPATH_H__


30 
	#__MINIDLNAPATH_H__


	)

32 
	~"c⁄fig.h
"

36 
	#ROOTDESC_PATH
 "/roŸDesc.xml"

	)

38 
	#CONTENTDIRECTORY_PATH
 "/C⁄ã¡Dú.xml"

	)

39 
	#CONTENTDIRECTORY_CONTROLURL
 "/˘l/C⁄ã¡Dú"

	)

40 
	#CONTENTDIRECTORY_EVENTURL
 "/evt/C⁄ã¡Dú"

	)

42 
	#CONNECTIONMGR_PATH
 "/C⁄√˘i⁄Mgr.xml"

	)

43 
	#CONNECTIONMGR_CONTROLURL
 "/˘l/C⁄√˘i⁄Mgr"

	)

44 
	#CONNECTIONMGR_EVENTURL
 "/evt/C⁄√˘i⁄Mgr"

	)

46 
	#X_MS_MEDIARECEIVERREGISTRAR_PATH
 "/X_MS_MedüRe˚ivîRegi°ør.xml"

	)

47 
	#X_MS_MEDIARECEIVERREGISTRAR_CONTROLURL
 "/˘l/X_MS_MedüRe˚ivîRegi°ør"

	)

48 
	#X_MS_MEDIARECEIVERREGISTRAR_EVENTURL
 "/evt/X_MS_MedüRe˚ivîRegi°ør"

	)

	@minidlnatypes.h

29 #i‚de‡
__MINIDLNATYPES_H__


30 
	#__MINIDLNATYPES_H__


	)

32 
	~"c⁄fig.h
"

33 
	~"˛õ¡s.h
"

35 
	~<time.h
>

36 
	~<f˙é.h
>

40 
	sœn_addr_s
 {

41 
	m°r
[16];

42 
ö_addr
 
	maddr
, 
	mmask
;

45 
	sru¡ime_v¨s_s
 {

46 
	mp‹t
;

47 
	mnŸify_öãrvÆ
;

48 *
	mroŸ_c⁄èöî
;

51 
	s°rög_s
 {

52 *
	md©a
;

53 
size_t
 
	moff
;

54 
size_t
 
	msize
;

57 
uöt8_t
 
	tmedü_ty≥s
;

58 
	#NO_MEDIA
 0x00

	)

59 
	#TYPE_AUDIO
 0x01

	)

60 
	#TYPE_VIDEO
 0x02

	)

61 
	#TYPE_IMAGES
 0x04

	)

62 
	#ALL_MEDIA
 
TYPE_AUDIO
|
TYPE_VIDEO
|
TYPE_IMAGES


	)

64 
	efûe_ty≥s
 {

65 
	mTYPE_UNKNOWN
,

66 
	mTYPE_DIR
,

67 
	mTYPE_FILE


70 
	smedü_dú_s
 {

71 *
	m∑th
;

72 
medü_ty≥s
 
	mty≥s
;

73 
uöt8_t
 
	mgíabÀ
;

74 
medü_dú_s
 *
	m√xt
;

77 
	sÆbum_¨t_«me_s
 {

78 *
	m«me
;

79 
uöt8_t
 
	mwûdˇrd
;

80 
Æbum_¨t_«me_s
 *
	m√xt
;

	@minissdp.c

32 
	~"c⁄fig.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<˘y≥.h
>

38 
	~<uni°d.h
>

39 
	~<sys/sockë.h
>

40 
	~<sys/un.h
>

41 
	~<√töë/ö.h
>

42 
	~<¨∑/öë.h
>

43 
	~<î∫o.h
>

45 
	~"möid ≠©h.h
"

46 
	~"u≤phâp.h
"

47 
	~"u≤pglobÆv¨s.h
"

48 
	~"u≤¥ïly∑r£.h
"

49 
	~"gëiÁddr.h
"

50 
	~"möissdp.h
"

51 
	~"codñígth.h
"

52 
	~"utûs.h
"

53 
	~"log.h
"

56 
	#SSDP_PORT
 (1900)

	)

57 
	#SSDP_MCAST_ADDR
 ("239.255.255.250")

	)

60 
	$AddMu…iˇ°Membîshù
(
s
, 
ö_addr_t
 
iÁddr
)

62 
ù_mªq
 
imr
;

65 
imr
.
imr_mu…üddr
.
s_addr
 = 
	`öë_addr
(
SSDP_MCAST_ADDR
);

66 
imr
.
imr_öãrÁ˚
.
s_addr
 = 
iÁddr
;

68 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
, (*)&
imr
, (
ù_mªq
)) < 0)

70 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "£tsock›t(udp, IP_ADD_MEMBERSHIP): %s\n", 
	`°ªº‹
(
î∫o
));

75 
	}
}

80 
	$O≥nAndC⁄fSSDPRe˚iveSockë
()

82 
s
;

83 
i
 = 1;

84 
sockaddr_ö
 
sock«me
;

86 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

87 i‡(
s
 < 0)

89 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "sockë(udp): %s\n", 
	`°ªº‹
(
î∫o
));

93 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
i
, (i)) < 0)

94 
	`DPRINTF
(
E_WARN
, 
L_SSDP
, "£tsock›t(udp, SO_REUSEADDR): %s\n", 
	`°ªº‹
(
î∫o
));

96 
	`mem£t
(&
sock«me
, 0, (
sockaddr_ö
));

97 
sock«me
.
sö_Ámûy
 = 
AF_INET
;

98 
sock«me
.
sö_p‹t
 = 
	`ht⁄s
(
SSDP_PORT
);

100 
sock«me
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

102 i‡(
	`böd
(
s
, (
sockaddr
 *)&
sock«me
, (
sockaddr_ö
)) < 0)

104 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "böd(udp): %s\n", 
	`°ªº‹
(
î∫o
));

105 
	`˛o£
(
s
);

109 
i
 = 
n_œn_addr
;

110 
i
 > 0)

112 
i
--;

113 i‡(
	`AddMu…iˇ°Membîshù
(
s
, 
œn_addr
[
i
].
addr
.
s_addr
) < 0)

115 
	`DPRINTF
(
E_WARN
, 
L_SSDP
,

117 
œn_addr
[
i
].
°r
 );

121  
s
;

122 
	}
}

127 
	$O≥nAndC⁄fSSDPNŸifySockë
(
ö_addr_t
 
addr
)

129 
s
;

130 
lo›ch¨
 = 0;

131 
bˇ°
 = 1;

132 
uöt8_t
 
âl
 = 4;

133 
ö_addr
 
mc_if
;

134 
sockaddr_ö
 
sock«me
;

136 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

137 i‡(
s
 < 0)

139 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "sockë(udp_nŸify): %s\n", 
	`°ªº‹
(
î∫o
));

143 
mc_if
.
s_addr
 = 
addr
;

145 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_MULTICAST_LOOP
, (*)&
lo›ch¨
, (loopchar)) < 0)

147 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "£tsock›t(udp_nŸify, IP_MULTICAST_LOOP): %s\n", 
	`°ªº‹
(
î∫o
));

148 
	`˛o£
(
s
);

152 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
, (*)&
mc_if
, (mc_if)) < 0)

154 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "£tsock›t(udp_nŸify, IP_MULTICAST_IF): %s\n", 
	`°ªº‹
(
î∫o
));

155 
	`˛o£
(
s
);

159 
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
, &
âl
, (ttl));

161 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
bˇ°
, (bcast)) < 0)

163 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "£tsock›t(udp_nŸify, SO_BROADCAST): %s\n", 
	`°ªº‹
(
î∫o
));

164 
	`˛o£
(
s
);

168 
	`mem£t
(&
sock«me
, 0, (
sockaddr_ö
));

169 
sock«me
.
sö_Ámûy
 = 
AF_INET
;

170 
sock«me
.
sö_addr
.
s_addr
 = 
addr
;

172 i‡(
	`böd
(
s
, (
sockaddr
 *)&
sock«me
, (
sockaddr_ö
)) < 0)

174 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "böd(udp_nŸify): %s\n", 
	`°ªº‹
(
î∫o
));

175 
	`˛o£
(
s
);

179  
s
;

180 
	}
}

183 
	$O≥nAndC⁄fSSDPNŸifySockës
(*
sockës
)

185 
i
, 
j
;

186 
i
 = 0; i < 
n_œn_addr
; i++)

188 
sockës
[
i
] = 
	`O≥nAndC⁄fSSDPNŸifySockë
(
œn_addr
[i].
addr
.
s_addr
);

189 i‡(
sockës
[
i
] < 0)

191 
j
 = 0; j < 
i
; j++)

193 
	`˛o£
(
sockës
[
j
]);

194 
sockës
[
j
] = -1;

200 
	}
}

202 c⁄° * c⁄° 
	gknown_£rvi˚_ty≥s
[] =

204 
uuidvÆue
,

214 
	$_u¶ìp
(
u£cs
)

216 
time•ec
 
¶ìp_time
;

218 
¶ìp_time
.
tv_£c
 = 0;

219 
¶ìp_time
.
tv_n£c
 = 
u£cs
 * 1000;

220 
	`«no¶ìp
(&
¶ìp_time
, 
NULL
);

221 
	}
}

226 
	$SídSSDPA¬oun˚2
(
s
, 
sockaddr_ö
 
sock«me
, 
°_no
,

227 c⁄° *
ho°
, 
p‹t
)

229 
l
, 
n
;

230 
buf
[512];

231 
tm°r
[30];

232 
time_t
 
tm
 = 
	`time
(
NULL
);

241 
	`°r·ime
(
tm°r
, —m°r), "%a, %d %b %Y %H:%M:%S GMT", 
	`gmtime
(&
tm
));

242 
l
 = 
	`¢¥ötf
(
buf
, (buf), "HTTP/1.1 200 OK\r\n"

248 "SERVER: " 
MINIDLNA_SERVER_STRING
 "\r\n"

249 "LOCATION: hâp://%s:%u" 
ROOTDESC_PATH
 "\r\n"

252 (
ru¡ime_v¨s
.
nŸify_öãrvÆ
<<1)+10,

253 
tm°r
,

254 
known_£rvi˚_ty≥s
[
°_no
],

255 (
°_no
>1?"1":""),

256 
uuidvÆue
,

257 (
°_no
 > 0 ? "::" : ""),

258 (
°_no
 > 0 ? 
known_£rvi˚_ty≥s
[st_no] : ""),

259 (
°_no
 > 1 ? "1" : ""),

260 
ho°
, ()
p‹t
);

262 
n
 = 
	`£ndto
(
s
, 
buf
, 
l
, 0,

263 (
sockaddr
 *)&
sock«me
, (
sockaddr_ö
) );

264 i‡(
n
 < 0)

265 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "£ndto(udp): %s\n", 
	`°ªº‹
(
î∫o
));

266 
	}
}

269 
	$SídSSDPNŸifõs
(
s
, c⁄° *
ho°
, 
p‹t
,

270 
li„time
)

272 
sockaddr_ö
 
sock«me
;

273 
l
, 
n
, 
dup
, 
i
=0;

274 
bu‰
[512];

276 
	`mem£t
(&
sock«me
, 0, (
sockaddr_ö
));

277 
sock«me
.
sö_Ámûy
 = 
AF_INET
;

278 
sock«me
.
sö_p‹t
 = 
	`ht⁄s
(
SSDP_PORT
);

279 
sock«me
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
SSDP_MCAST_ADDR
);

281 
dup
 = 0; dup < 2; dup++)

283 i‡(
dup
)

284 
	`_u¶ìp
(200000);

285 
i
 = 0;

286 
known_£rvi˚_ty≥s
[
i
])

288 
l
 = 
	`¢¥ötf
(
bu‰
, (bufr),

292 "LOCATION:hâp://%s:%d" 
ROOTDESC_PATH
"\r\n"

293 "SERVER: " 
MINIDLNA_SERVER_STRING
 "\r\n"

298 
SSDP_MCAST_ADDR
, 
SSDP_PORT
,

299 
li„time
,

300 
ho°
, 
p‹t
,

301 
known_£rvi˚_ty≥s
[
i
],

302 (
i
 > 1 ? "1" : ""),

303 
uuidvÆue
,

304 (
i
 > 0 ? "::" : ""),

305 (
i
 > 0 ? 
known_£rvi˚_ty≥s
[i] : ""),

306 (
i
 > 1 ? "1" : ""));

307 i‡(
l
 >(
bu‰
))

309 
	`DPRINTF
(
E_WARN
, 
L_SSDP
, "SendSSDPNotifies():Åruncated output\n");

310 
l
 = (
bu‰
);

313 
n
 = 
	`£ndto
(
s
, 
bu‰
, 
l
, 0,

314 (
sockaddr
 *)&
sock«me
, (
sockaddr_ö
));

315 i‡(
n
 < 0)

316 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "£ndto(udp_nŸify=%d, %s): %s\n", 
s
, 
ho°
, 
	`°ªº‹
(
î∫o
));

317 
i
++;

320 
	}
}

323 
	$SídSSDPNŸifõs2
(*
sockës
,

324 
p‹t
,

325 
li„time
)

327 
i
;

329 
	`DPRINTF
(
E_DEBUG
, 
L_SSDP
, "Sending SSDPÇotifies\n");

330 
i
 = 0; i < 
n_œn_addr
; i++)

332 
	`SídSSDPNŸifõs
(
sockës
[
i
], 
œn_addr
[i].
°r
, 
p‹t
, 
li„time
);

334 
	}
}

337 
	$P¨£UPnPClõ¡
(*
loˇti⁄
)

339 
buf
[8192];

340 
sockaddr_ö
 
de°
;

341 
s
, 
n
, 
do_hódîs
 = 0, 
ƒód
 = 0;

342 
timevÆ
 
tv
;

343 *
addr
, *
∑th
, *
p‹t_°r
;

344 
p‹t
 = 80;

345 *
off
 = 
NULL
, *
p
;

346 
c⁄ã¡_Àn
 = (
buf
);

347 
NameVÆueP¨£rD©a
 
xml
;

348 
˛õ¡
;

349 
ty≥
 = 0;

350 *
modñ
, *
£rül
, *
«me
;

352 i‡(
	`°∫cmp
(
loˇti⁄
, "http://", 7) != 0)

354 
∑th
 = 
loˇti⁄
 + 7;

355 
p‹t_°r
 = 
	`°r£p
(&
∑th
, "/");

356 i‡(!
∑th
)

358 
addr
 = 
	`°r£p
(&
p‹t_°r
, ":");

359 i‡(
p‹t_°r
)

361 
p‹t
 = 
	`°πﬁ
(
p‹t_°r
, 
NULL
, 10);

362 i‡(!
p‹t
)

363 
p‹t
 = 80;

366 
	`mem£t
(&
de°
, '\0', (dest));

367 i‡(!
	`öë_©⁄
(
addr
, &
de°
.
sö_addr
))

370 
de°
.
sö_Ámûy
 = 
AF_INET
;

371 
de°
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

373 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

374 i‡(
s
 < 0)

377 
tv
.
tv_£c
 = 0;

378 
tv
.
tv_u£c
 = 500000;

379 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, &
tv
, (tv));

380 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
tv
, (tv));

382 i‡(
	`c⁄√˘
(
s
, (
sockaddr
*)&
de°
, (
sockaddr_ö
)) < 0)

383 
˛o£
;

385 
n
 = 
	`¢¥ötf
(
buf
, (buf), "GET /%s HTTP/1.0\r\n"

387 
∑th
, 
addr
, 
p‹t
);

388 i‡(
	`wrôe
(
s
, 
buf
, 
n
) < 1)

389 
˛o£
;

391 (
n
 = 
	`ªad
(
s
, 
buf
+
ƒód
, (buf)-nread-1)) > 0)

393 
ƒód
 +
n
;

394 
buf
[
ƒód
] = '\0';

395 
n
 = 
ƒód
;

396 
p
 = 
buf
;

398 !
off
 && (
n
-- > 0))

400 i‡(
p
[0] == '\r' &&Ö[1] == '\n' &&Ö[2] == '\r' &&Ö[3] == '\n')

402 
off
 = 
p
 + 4;

403 
do_hódîs
 = 1;

405 
p
++;

407 i‡(!
off
)

410 i‡(
do_hódîs
)

412 
p
 = 
buf
;

413 i‡(
	`°∫cmp
(
p
, "HTTP/", 5) != 0)

414 
˛o£
;

415 *
p
 != ' ' && *p != '\t')

416 
p
++;

418 i‡(
	`°πﬁ
(
p
, 
NULL
, 10) != 200)

419 
˛o£
;

420 
p
 = 
	`°rˇ£°r
(p, "Content-Length:");

421 i‡(
p
)

422 
c⁄ã¡_Àn
 = 
	`°πﬁ
(
p
+15, 
NULL
, 10);

423 
do_hódîs
 = 0;

425 i‡((
buf
 + 
ƒód
 - 
off
Ë>
c⁄ã¡_Àn
)

428 
˛o£
:

429 
	`˛o£
(
s
);

430 i‡(!
off
)

432 
ƒód
 -
off
 - 
buf
;

433 
	`P¨£NameVÆue
(
off
, 
ƒód
, &
xml
, 0);

434 
modñ
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "modelName");

435 
£rül
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "serialNumber");

436 
«me
 = 
	`GëVÆueFromNameVÆueLi°
(&
xml
, "friendlyName");

437 i‡(
modñ
)

439 
i
;

440 
	`DPRINTF
(
E_DEBUG
, 
L_SSDP
, "Modñ: %s\n", 
modñ
);

441 
i
 = 0; 
˛õ¡_ty≥s
[i].
«me
; i++)

443 i‡(
˛õ¡_ty≥s
[
i
].
m©ch_ty≥
 !
EModñName
)

445 i‡(
	`°r°r
(
modñ
, 
˛õ¡_ty≥s
[
i
].
m©ch
Ë!
NULL
)

447 
ty≥
 = 
i
;

453 i‡(
ty≥
 > 0 && 
˛õ¡_ty≥s
[ty≥].ty≥ =
ESamsungSîõsB
)

455 i‡(
£rül
)

457 
	`DPRINTF
(
E_DEBUG
, 
L_SSDP
, "Sîül: %s\n", 
£rül
);

459 i‡(
	`©oi
(
£rül
) < 20081201)

460 
ty≥
 = 0;

464 
ty≥
 = 0;

468 i‡(
ty≥
 =0 && 
«me
 !
NULL
)

470 
i
 = 0; 
˛õ¡_ty≥s
[i].
«me
; i++)

472 i‡(
˛õ¡_ty≥s
[
i
].
m©ch_ty≥
 !
EFrõndlyNameSSDP
)

474 i‡(
	`°rcmp
(
«me
, 
˛õ¡_ty≥s
[
i
].
m©ch
) == 0)

476 
ty≥
 = 
i
;

482 
	`CÀ¨NameVÆueLi°
(&
xml
);

483 i‡(!
ty≥
)

486 
˛õ¡
 = 
	`SórchClõ¡Cache
(
de°
.
sö_addr
, 1);

487 i‡(
˛õ¡
 < 0)

489 
	`AddClõ¡Cache
(
de°
.
sö_addr
, 
ty≥
);

493 
˛õ¡s
[
˛õ¡
].
ty≥
 =Åype;

494 
˛õ¡s
[
˛õ¡
].
age
 = 
	`time
(
NULL
);

496 
	}
}

501 
	$Pro˚ssSSDPReque°
(
s
, 
p‹t
)

503 
n
;

504 
bu‰
[1500];

505 
sockÀn_t
 
Àn_r
;

506 
sockaddr_ö
 
£ndî«me
;

507 
i
;

508 *
°
 = 
NULL
, *
mx
 = NULL, *
m™
 = NULL, *
mx_íd
 = NULL;

509 
m™_Àn
 = 0;

510 
Àn_r
 = (
sockaddr_ö
);

512 
n
 = 
	`ªcv‰om
(
s
, 
bu‰
, (bufr)-1, 0,

513 (
sockaddr
 *)&
£ndî«me
, &
Àn_r
);

514 i‡(
n
 < 0)

516 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "ªcv‰om(udp): %s\n", 
	`°ªº‹
(
î∫o
));

519 
bu‰
[
n
] = '\0';

520 
n
 -= 2;

522 i‡(
	`memcmp
(
bu‰
, "NOTIFY", 6) == 0)

524 *
loc
 = 
NULL
, *
§v
 = NULL, *
¡s
 = NULL, *
¡
 = NULL;

525 
loc_Àn
 = 0;

527 
i
 = 0; i < 
n
; i++)

529 if–
bu‰
[
i
] == '*' )

532 i‡(
	`°rˇ£°rc
(
bu‰
+
i
, "HTTP/1.1", '\r'Ë=
NULL
)

534 
i
 < 
n
)

536 (
i
 < 
n
Ë&& (
bu‰
[i] != '\r' || bufr[i+1] != '\n'))

537 
i
++;

538 
i
 += 2;

539 i‡(
	`°∫ˇ£cmp
(
bu‰
+
i
, "SERVER:", 7) == 0)

541 
§v
 = 
bu‰
+
i
+7;

542 *
§v
 == ' ' || *srv == '\t')

543 
§v
++;

545 i‡(
	`°∫ˇ£cmp
(
bu‰
+
i
, "LOCATION:", 9) == 0)

547 
loc
 = 
bu‰
+
i
+9;

548 *
loc
 == ' ' || *loc == '\t')

549 
loc
++;

550 
loc
[
loc_Àn
]!='\r' &&Üoc[loc_len]!='\n')

551 
loc_Àn
++;

553 i‡(
	`°∫ˇ£cmp
(
bu‰
+
i
, "NTS:", 4) == 0)

555 
¡s
 = 
bu‰
+
i
+4;

556 *
¡s
 == ' ' || *nts == '\t')

557 
¡s
++;

559 i‡(
	`°∫ˇ£cmp
(
bu‰
+
i
, "NT:", 3) == 0)

561 
¡
 = 
bu‰
+
i
+3;

562 *
¡
 == ' ' || *nt == '\t')

563 
¡
++;

566 i‡(!
loc
 || !
§v
 || !
¡
 || !
¡s
 || (
	`°∫cmp
(nts, "ssdp:alive", 10) != 0) ||

567 (
	`°∫cmp
(
¡
, "urn:schemas-upnp-org:device:MediaRenderer", 41) != 0))

569 
loc
[
loc_Àn
] = '\0';

570 i‡((
	`°∫cmp
(
§v
, "Allegro-Software-RomPlug", 24) == 0) ||

571 (
	`°r°r
(
loc
, "SamsungMRDesc.xml"Ë!
NULL
) ||

572 (
	`°r°rc
(
§v
, "DigiO¿DiXiM", '\r'Ë!
NULL
))

575 
i
 = 
	`SórchClõ¡Cache
(
£ndî«me
.
sö_addr
, 1);

576 i‡(
i
 >= 0)

578 i‡(
˛õ¡s
[
i
].
ty≥
 < 
ESènd¨dDLNA150
 &&

579 
˛õ¡s
[
i
].
ty≥
 !
ESamsungSîõsA
)

581 
˛õ¡s
[
i
].
age
 = 
	`time
(
NULL
);

585 
	`P¨£UPnPClõ¡
(
loc
);

588 i‡(
	`memcmp
(
bu‰
, "M-SEARCH", 8) == 0)

590 
°_Àn
 = 0, 
mx_Àn
 = 0, 
mx_vÆ
 = 0;

592 
i
 = 0; i < 
n
; i++)

594 i‡(
bu‰
[
i
] == '*')

597 i‡(
	`°rˇ£°rc
(
bu‰
+
i
, "HTTP/1.1", '\r'Ë=
NULL
)

599 
i
 < 
n
)

601 (
i
 < 
n
Ë&& (
bu‰
[i] != '\r' || bufr[i+1] != '\n'))

602 
i
++;

603 
i
 += 2;

604 i‡(
	`°∫ˇ£cmp
(
bu‰
+
i
, "ST:", 3) == 0)

606 
°
 = 
bu‰
+
i
+3;

607 
°_Àn
 = 0;

608 *
°
 == ' ' || *st == '\t')

609 
°
++;

610 
°
[
°_Àn
]!='\r' && st[st_len]!='\n')

611 
°_Àn
++;

613 i‡(
	`°∫ˇ£cmp
(
bu‰
+
i
, "MX:", 3) == 0)

615 
mx
 = 
bu‰
+
i
+3;

616 
mx_Àn
 = 0;

617 *
mx
 == ' ' || *mx == '\t')

618 
mx
++;

619 
mx
[
mx_Àn
]!='\r' && mx[mx_len]!='\n')

620 
mx_Àn
++;

621 
mx_vÆ
 = 
	`°πﬁ
(
mx
, &
mx_íd
, 10);

623 i‡(
	`°∫ˇ£cmp
(
bu‰
+
i
, "MAN:", 4) == 0)

625 
m™
 = 
bu‰
+
i
+4;

626 
m™_Àn
 = 0;

627 *
m™
 == ' ' || *man == '\t')

628 
m™
++;

629 
m™
[
m™_Àn
]!='\r' && man[man_len]!='\n')

630 
m™_Àn
++;

636 i‡(
	`GETFLAG
(
DLNA_STRICT_MASK
Ë&& (
	`¡ohs
(
£ndî«me
.
sö_p‹t
) <= 1024 ||Çtohs(sendername.sin_port) == 1900))

638 
	`DPRINTF
(
E_INFO
, 
L_SSDP
, "WARNING: Ignoring invalid SSDP M-SEARCH from %s [bad sourceÖort %d]\n",

639 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
), 
	`¡ohs
(£ndî«me.
sö_p‹t
));

641 i‡(!
m™
 || (
	`°∫cmp
(man, "\"ssdp:discover\"", 15) != 0))

643 
	`DPRINTF
(
E_INFO
, 
L_SSDP
, "WARNING: Ignoring invalid SSDP M-SEARCH from %s [bad %s header '%.*s']\n",

644 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
), "MAN", 
m™_Àn
, 
m™
);

646 i‡(!
mx
 || mx =
mx_íd
 || 
mx_vÆ
 < 0)

648 
	`DPRINTF
(
E_INFO
, 
L_SSDP
, "WARNING: Ignoring invalid SSDP M-SEARCH from %s [bad %s header '%.*s']\n",

649 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
), "MX", 
mx_Àn
, 
mx
);

651 i‡(
°
 && (
°_Àn
 > 0))

653 
l
;

654 
œn_addr_ödex
 = 0;

656 
i
 = 0; i < 
n_œn_addr
; i++)

658 if((
£ndî«me
.
sö_addr
.
s_addr
 & 
œn_addr
[
i
].
mask
.s_addr) ==

659 (
œn_addr
[
i
].
addr
.
s_addr
 &Ü™_addr[i].
mask
.s_addr))

661 
œn_addr_ödex
 = 
i
;

665 i‡(
n_œn_addr
 =
i
)

667 
	`DPRINTF
(
E_DEBUG
, 
L_SSDP
, "Ignoring SSDP M-SEARCH on other interface [%s]\n",

668 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
));

671 
	`DPRINTF
(
E_INFO
, 
L_SSDP
, "SSDP M-SEARCH from %s:%d ST: %.*s, MX: %.*s, MAN: %.*s\n",

672 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
),

673 
	`¡ohs
(
£ndî«me
.
sö_p‹t
),

674 
°_Àn
, 
°
, 
mx_Àn
, 
mx
, 
m™_Àn
, 
m™
);

676 
i
 = 0; 
known_£rvi˚_ty≥s
[i]; i++)

678 
l
 = 
	`°æí
(
known_£rvi˚_ty≥s
[
i
]);

679 i‡((
l
 <
°_Àn
Ë&& (
	`memcmp
(
°
, 
known_£rvi˚_ty≥s
[
i
],Ü) == 0))

681 i‡(
°_Àn
 !
l
)

684 i‡((
°
[
l
-1] == ':') && (st[l] == '1'))

685 
l
++;

686 
l
 < 
°_Àn
)

688 i‡(!
	`is•a˚
(
°
[
l
]))

690 
	`DPRINTF
(
E_DEBUG
, 
L_SSDP
, "Ignoring SSDP M-SEARCH with badÉxtra data [%s]\n",

691 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
));

694 
l
++;

696 i‡(
l
 !
°_Àn
)

699 
	`_u¶ìp
(
	`øndom
()>>20);

700 
	`SídSSDPA¬oun˚2
(
s
, 
£ndî«me
, 
i
,

701 
œn_addr
[
œn_addr_ödex
].
°r
, 
p‹t
);

707 i‡((
°_Àn
 =8Ë&& (
	`memcmp
(
°
, "ssdp:all", 8) == 0))

709 
i
=0; 
known_£rvi˚_ty≥s
[i]; i++)

711 
l
 = 
	`°æí
(
known_£rvi˚_ty≥s
[
i
]);

712 
	`SídSSDPA¬oun˚2
(
s
, 
£ndî«me
, 
i
,

713 
œn_addr
[
œn_addr_ödex
].
°r
, 
p‹t
);

719 
	`DPRINTF
(
E_INFO
, 
L_SSDP
, "Invalid SSDP M-SEARCH from %s:%d\n",

720 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
), 
	`¡ohs
(£ndî«me.
sö_p‹t
));

725 
	`DPRINTF
(
E_WARN
, 
L_SSDP
, "Unknown udpÖacketÑeceived from %s:%d\n",

726 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
), 
	`¡ohs
(£ndî«me.
sö_p‹t
));

728 
	}
}

733 
	$SídSSDPGoodbye
(*
sockës
, 
n_sockës
)

735 
sockaddr_ö
 
sock«me
;

736 
n
, 
l
;

737 
i
, 
j
;

738 
dup
, 
ªt
 = 0;

739 
bu‰
[512];

741 
	`mem£t
(&
sock«me
, 0, (
sockaddr_ö
));

742 
sock«me
.
sö_Ámûy
 = 
AF_INET
;

743 
sock«me
.
sö_p‹t
 = 
	`ht⁄s
(
SSDP_PORT
);

744 
sock«me
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
SSDP_MCAST_ADDR
);

746 
dup
 = 0; dup < 2; dup++)

748 
j
 = 0; j < 
n_sockës
; j++)

750 
i
 = 0; 
known_£rvi˚_ty≥s
[i]; i++)

752 
l
 = 
	`¢¥ötf
(
bu‰
, (bufr),

759 
SSDP_MCAST_ADDR
, 
SSDP_PORT
,

760 
known_£rvi˚_ty≥s
[
i
], (i>1?"1":""),

761 
uuidvÆue
, (
i
>0?"::":""), (i>0?
known_£rvi˚_ty≥s
[i]:""), (i>1?"1":"") );

763 
n
 = 
	`£ndto
(
sockës
[
j
], 
bu‰
, 
l
, 0,

764 (
sockaddr
 *)&
sock«me
, (
sockaddr_ö
) );

765 i‡(
n
 < 0)

767 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "£ndto(udp_shutdown=%d): %s\n", 
sockës
[
j
], 
	`°ªº‹
(
î∫o
));

768 
ªt
 = -1;

774  
ªt
;

775 
	}
}

781 
	$SubmôSîvi˚sToMöiSSDPD
(c⁄° *
ho°
, 
p‹t
)

783 
sockaddr_un
 
addr
;

784 
s
;

785 
buf„r
[2048];

786 
°rbuf
[256];

787 *
p
;

788 
i
, 
l
;

790 
s
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

791 i‡(
s
 < 0)

793 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "sockë(unix): %s", 
	`°ªº‹
(
î∫o
));

796 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

797 
	`°∫˝y
(
addr
.
sun_∑th
, 
möissdpdsockë∑th
, (addr.sun_path));

798 i‡(
	`c⁄√˘
(
s
, (
sockaddr
 *)&
addr
, (
sockaddr_un
)) < 0)

800 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "connect(\"%s\"): %s",

801 
möissdpdsockë∑th
, 
	`°ªº‹
(
î∫o
));

804 
i
 = 0; 
known_£rvi˚_ty≥s
[i]; i++)

806 
buf„r
[0] = 4;

807 
p
 = 
buf„r
 + 1;

808 
l
 = 
	`°æí
(
known_£rvi˚_ty≥s
[
i
]);

809 i‡(
i
 > 0)

810 
l
++;

811 
	`CODELENGTH
(
l
, 
p
);

812 
	`mem˝y
(
p
, 
known_£rvi˚_ty≥s
[
i
], 
l
);

813 i‡(
i
 > 0)

814 
p
[
l
-1] = '1';

815 
p
 +
l
;

816 
l
 = 
	`¢¥ötf
(
°rbuf
, (strbuf), "%s::%s%s",

817 
uuidvÆue
, 
known_£rvi˚_ty≥s
[
i
], (i==0)?"":"1");

818 
	`CODELENGTH
(
l
, 
p
);

819 
	`mem˝y
(
p
, 
°rbuf
, 
l
);

820 
p
 +
l
;

821 
l
 = 
	`°æí
(
MINIDLNA_SERVER_STRING
);

822 
	`CODELENGTH
(
l
, 
p
);

823 
	`mem˝y
(
p
, 
MINIDLNA_SERVER_STRING
, 
l
);

824 
p
 +
l
;

825 
l
 = 
	`¢¥ötf
(
°rbuf
, (°rbuf), "hâp://%s:%u" 
ROOTDESC_PATH
,

826 
ho°
, ()
p‹t
);

827 
	`CODELENGTH
(
l
, 
p
);

828 
	`mem˝y
(
p
, 
°rbuf
, 
l
);

829 
p
 +
l
;

830 if(
	`wrôe
(
s
, 
buf„r
, 
p
 - buffer) < 0)

832 
	`DPRINTF
(
E_ERROR
, 
L_SSDP
, "wrôe(): %s", 
	`°ªº‹
(
î∫o
));

836 
	`˛o£
(
s
);

838 
	}
}

	@minissdp.h

29 #i‚de‡
__MINISSDP_H__


30 
	#__MINISSDP_H__


	)

33 
O≥nAndC⁄fSSDPRe˚iveSockë
();

36 
O≥nAndC⁄fSSDPNŸifySockës
(* 
sockës
);

39 
SídSSDPNŸifõs2
(* 
sockës
,

40 
p‹t
,

41 
li„time
);

44 
Pro˚ssSSDPReque°
(
s
, 
p‹t
);

47 
SídSSDPGoodbye
(* 
sockës
, 
n
);

50 
SubmôSîvi˚sToMöiSSDPD
(c⁄° * 
ho°
, 
p‹t
);

	@minixml.c

32 
	~"möixml.h
"

33 
	~"u≤¥ïly∑r£.h
"

38 
	$∑r£©t
(
xmÕ¨£r
 * 
p
)

40 c⁄° * 
©äame
;

41 
©äamñí
;

42 c⁄° * 
©tvÆue
;

43 
©tvÆuñí
;

44 
p
->
xml
 <Ö->
xmÀnd
)

46 if(*
p
->
xml
=='/' || *p->xml=='>')

48 if–!
	`IS_WHITE_SPACE
(*
p
->
xml
) )

50 
£p
;

51 
©äame
 = 
p
->
xml
;

52 
©äamñí
 = 0;

53 *
p
->
xml
!='=' && !
	`IS_WHITE_SPACE
(*p->xml) )

55 
©äamñí
++; 
p
->
xml
++;

56 if(
p
->
xml
 >p->
xmÀnd
)

59 *(
p
->
xml
++) != '=')

61 if(
p
->
xml
 >p->
xmÀnd
)

64 
	`IS_WHITE_SPACE
(*
p
->
xml
))

66 
p
->
xml
++;

67 if(
p
->
xml
 >p->
xmÀnd
)

70 
£p
 = *
p
->
xml
;

71 if(
£p
=='\'' || sep=='\"')

73 
p
->
xml
++;

74 if(
p
->
xml
 >p->
xmÀnd
)

76 
©tvÆue
 = 
p
->
xml
;

77 
©tvÆuñí
 = 0;

78 *
p
->
xml
 !
£p
)

80 
©tvÆuñí
++; 
p
->
xml
++;

81 if(
p
->
xml
 >p->
xmÀnd
)

87 
©tvÆue
 = 
p
->
xml
;

88 
©tvÆuñí
 = 0;

89  !
	`IS_WHITE_SPACE
(*
p
->
xml
)

90 && *
p
->
xml
 != '>' && *p->xml != '/')

92 
©tvÆuñí
++; 
p
->
xml
++;

93 if(
p
->
xml
 >p->
xmÀnd
)

99 if(
p
->
©tfunc
)

100 
p
->
	`©tfunc
’->
d©a
, 
©äame
, 
©äamñí
, 
©tvÆue
, 
©tvÆuñí
);

102 
p
->
xml
++;

105 
	}
}

109 
	$∑r£ñt
(
xmÕ¨£r
 * 
p
)

111 
i
;

112 c⁄° * 
ñemíäame
;

113 
p
->
xml
 < (p->
xmÀnd
 - 1))

115 if((
p
->
xml
)[0]=='<' && (p->xml)[1]!='?')

117 
i
 = 0; 
ñemíäame
 = ++
p
->
xml
;

118  !
	`IS_WHITE_SPACE
(*
p
->
xml
)

119 && (*
p
->
xml
!='>') && (*p->xml!='/')

122 
i
++; 
p
->
xml
++;

123 i‡(
p
->
xml
 >p->
xmÀnd
)

126 if(*
p
->
xml
==':')

128 
i
 = 0;

129 
ñemíäame
 = ++
p
->
xml
;

132 if(
i
>0)

134 if(
p
->
°¨ã…func
)

135 
p
->
	`°¨ã…func
’->
d©a
, 
ñemíäame
, 
i
);

136 if(
	`∑r£©t
(
p
))

138 if(*
p
->
xml
!='/')

140 c⁄° * 
d©a
;

141 
i
 = 0; 
d©a
 = ++
p
->
xml
;

142 i‡(
p
->
xml
 >p->
xmÀnd
)

144  
	`IS_WHITE_SPACE
(*
p
->
xml
) )

146 
p
->
xml
++;

147 i‡(
p
->
xml
 >p->
xmÀnd
)

150 *
p
->
xml
!='<')

152 
i
++; 
p
->
xml
++;

153 i‡(
p
->
xml
 >p->
xmÀnd
)

156 i‡(
p
->
d©afunc
)

158 i‡(
i
 > 0 || (
p
->
Êags
 & 
XML_STORE_EMPTY_FL
))

159 
p
->
	`d©afunc
’->
d©a
, d©a, 
i
);

163 if(*
p
->
xml
 == '/')

165 
i
 = 0; 
ñemíäame
 = ++
p
->
xml
;

166 i‡(
p
->
xml
 >p->
xmÀnd
)

168 (*
p
->
xml
 != '>'))

170 
i
++; 
p
->
xml
++;

171 i‡(
p
->
xml
 >p->
xmÀnd
)

174 if(
p
->
ídñtfunc
)

175 
p
->
	`ídñtfunc
’->
d©a
, 
ñemíäame
, 
i
);

176 
p
->
xml
++;

181 
p
->
xml
++;

184 
	}
}

187 
	$∑r£xml
(
xmÕ¨£r
 * 
∑r£r
)

189 
∑r£r
->
xml
 =Ö¨£r->
xml°¨t
;

190 
∑r£r
->
xmÀnd
 =Ö¨£r->
xml°¨t
 +Ö¨£r->
xmlsize
;

191 
	`∑r£ñt
(
∑r£r
);

192 
	}
}

	@minixml.h

32 #i‚de‡
__MINIXML_H__


33 
	#__MINIXML_H__


	)

34 
	~<°döt.h
>

35 
	#IS_WHITE_SPACE
(
c
Ë((c==' 'Ë|| (c=='\t'Ë|| (c=='\r'Ë|| (c=='\n'))

	)

39 
	sxmÕ¨£r
 {

40 c⁄° *
	mxml°¨t
;

41 c⁄° *
	mxmÀnd
;

42 c⁄° *
	mxml
;

43 
	mxmlsize
;

44 
uöt32_t
 
	mÊags
;

45 * 
	md©a
;

46 (*
	m°¨ã…func
) (*, const *, );

47 (*
	mídñtfunc
) (*, const *, );

48 (*
	md©afunc
) (*, const *, );

49 (*
	m©tfunc
) (*, const *, , const *, );

57 
∑r£xml
(
xmÕ¨£r
 *);

	@options.c

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<°dlib.h
>

33 
	~<˘y≥.h
>

34 
	~"›ti⁄s.h
"

35 
	~"utûs.h
"

36 
	~"u≤pglobÆv¨s.h
"

38 
›ti⁄
 * 
	g¨y_›ti⁄s
 = 
NULL
;

39 
	gnum_›ti⁄s
 = 0;

42 
u≤pc⁄fig›ti⁄s
 
	mid
;

43 c⁄° * 
	m«me
;

44 } 
	g›ti⁄ids
[] = {

45 { 
UPNPIFNAME
, "network_interface" },

46 { 
UPNPLISTENING_IP
, "listening_ip" },

47 { 
UPNPPORT
, "port" },

48 { 
UPNPPRESENTATIONURL
, "presentation_url" },

49 { 
UPNPNOTIFY_INTERVAL
, "notify_interval" },

50 { 
UPNPUUID
, "uuid"},

51 { 
UPNPSERIAL
, "serial"},

52 { 
UPNPMODEL_NAME
, "model_name"},

53 { 
UPNPMODEL_NUMBER
, "model_number"},

54 { 
UPNPFRIENDLYNAME
, "friendly_name"},

55 { 
UPNPMEDIADIR
, "media_dir"},

56 { 
UPNPALBUMART_NAMES
, "album_art_names"},

57 { 
UPNPINOTIFY
, "inotify" },

58 { 
UPNPDBDIR
, "db_dir" },

59 { 
UPNPLOGDIR
, "log_dir" },

60 { 
UPNPLOGLEVEL
, "log_level" },

61 { 
UPNPMINISSDPDSOCKET
, "minissdpdsocket"},

62 { 
ENABLE_TIVO
, "enable_tivo" },

63 { 
ENABLE_DLNA_STRICT
, "strict_dlna" },

64 { 
ROOT_CONTAINER
, "root_container" },

65 { 
USER_ACCOUNT
, "user" }

69 
	$ªad›ti⁄sfûe
(c⁄° * 
‚ame
)

71 
FILE
 *
hfûe
 = 
NULL
;

72 
buf„r
[1024];

73 *
equÆs
;

74 *
«me
;

75 *
vÆue
;

76 *
t
;

77 
löíum
 = 0;

78 
i
;

79 
u≤pc⁄fig›ti⁄s
 
id
;

81 if(!
‚ame
 || *fname == '\0')

84 
	`mem£t
(
buf„r
, 0, (buffer));

86 #ifde‡
DEBUG


87 
	`¥ötf
("Ródög c⁄figuøti⁄ from fûê%s\n", 
‚ame
);

90 if(!(
hfûe
 = 
	`f›í
(
‚ame
, "r")))

93 if(
¨y_›ti⁄s
 !
NULL
)

95 
	`‰ì
(
¨y_›ti⁄s
);

96 
num_›ti⁄s
 = 0;

99 
	`fgës
(
buf„r
, (buf„r), 
hfûe
))

101 
löíum
++;

102 
t
 = 
	`°rchr
(
buf„r
, '\n');

103 if(
t
)

105 *
t
 = '\0';

106 
t
--;

107 (
t
 >
buf„r
Ë&& 
	`is•a˚
(*t))

109 *
t
 = '\0';

110 
t
--;

115 
«me
 = 
buf„r
;

116 
	`is•a˚
(*
«me
))

117 
«me
++;

120 if(
«me
[0] == '#' ||Çame[0] == '\0') ;

122 if(!(
equÆs
 = 
	`°rchr
(
«me
, '=')))

124 
	`Ârötf
(
°dîr
, "parsingÉrror file %sÜine %d : %s\n",

125 
‚ame
, 
löíum
, 
«me
);

130 
t
=
equÆs
-1;Å>
«me
 && 
	`is•a˚
(*t);Å--)

131 *
t
 = '\0';

133 *
equÆs
 = '\0';

134 
vÆue
 = 
equÆs
+1;

137 
	`is•a˚
(*
vÆue
))

138 
vÆue
++;

140 
id
 = 
UPNP_INVALID
;

141 
i
=0; i<(
›ti⁄ids
)/(optionids[0]); i++)

146 if(0 =
	`°rcmp
(
«me
, 
›ti⁄ids
[
i
].name))

148 
id
 = 
›ti⁄ids
[
i
].id;

153 if(
id
 =
UPNP_INVALID
)

155 
	`Ârötf
(
°dîr
, "parsingÉrror file %sÜine %d : %s=%s\n",

156 
‚ame
, 
löíum
, 
«me
, 
vÆue
);

160 
num_›ti⁄s
++;

161 
t
 = 
	`ªÆloc
(
¨y_›ti⁄s
, 
num_›ti⁄s
 * (
›ti⁄
));

162 if(!
t
)

164 
	`Ârötf
(
°dîr
, "memoryállocationÉrror: %s=%s\n",

165 
«me
, 
vÆue
);

166 
num_›ti⁄s
--;

170 
¨y_›ti⁄s
 = (
›ti⁄
 *)
t
;

172 
¨y_›ti⁄s
[
num_›ti⁄s
-1].
id
 = id;

173 
	`°∫˝yt
(
¨y_›ti⁄s
[
num_›ti⁄s
-1].
vÆue
, vÆue, 
MAX_OPTION_VALUE_LEN
);

178 
	`f˛o£
(
hfûe
);

181 
	}
}

184 
	$‰ì›ti⁄s
()

186 
medü_dú_s
 *
medü_∑th
, *
œ°_∑th
;

187 
Æbum_¨t_«me_s
 *
¨t_«mes
, *
œ°_«me
;

189 
medü_∑th
 = 
medü_dús
;

190 
medü_∑th
)

192 
	`‰ì
(
medü_∑th
->
∑th
);

193 
œ°_∑th
 = 
medü_∑th
;

194 
medü_∑th
 = medü_∑th->
√xt
;

195 
	`‰ì
(
œ°_∑th
);

198 
¨t_«mes
 = 
Æbum_¨t_«mes
;

199 
¨t_«mes
)

201 
	`‰ì
(
¨t_«mes
->
«me
);

202 
œ°_«me
 = 
¨t_«mes
;

203 
¨t_«mes
 =áπ_«mes->
√xt
;

204 
	`‰ì
(
œ°_«me
);

207 if(
¨y_›ti⁄s
)

209 
	`‰ì
(
¨y_›ti⁄s
);

210 
¨y_›ti⁄s
 = 
NULL
;

211 
num_›ti⁄s
 = 0;

213 
	}
}

	@options.h

30 #i‚de‡
__OPTIONS_H__


31 
	#__OPTIONS_H__


	)

33 
	~"c⁄fig.h
"

36 
	eu≤pc⁄fig›ti⁄s
 {

37 
	mUPNP_INVALID
 = 0,

38 
	mUPNPIFNAME
 = 1,

39 
	mUPNPLISTENING_IP
,

40 
	mUPNPPORT
,

41 
	mUPNPPRESENTATIONURL
,

42 
	mUPNPNOTIFY_INTERVAL
,

43 
	mUPNPUUID
,

44 
	mUPNPSERIAL
,

45 
	mUPNPMODEL_NAME
,

46 
	mUPNPMODEL_NUMBER
,

47 
	mUPNPFRIENDLYNAME
,

48 
	mUPNPMEDIADIR
,

49 
	mUPNPALBUMART_NAMES
,

50 
	mUPNPINOTIFY
,

51 
	mUPNPDBDIR
,

52 
	mUPNPLOGDIR
,

53 
	mUPNPLOGLEVEL
,

54 
	mUPNPMINISSDPDSOCKET
,

55 
	mENABLE_TIVO
,

56 
	mENABLE_DLNA_STRICT
,

57 
	mROOT_CONTAINER
,

58 
	mUSER_ACCOUNT


65 
ªad›ti⁄sfûe
(c⁄° * 
‚ame
);

70 
‰ì›ti⁄s
();

72 
	#MAX_OPTION_VALUE_LEN
 (200)

	)

73 
	s›ti⁄


75 
u≤pc⁄fig›ti⁄s
 
	mid
;

76 
	mvÆue
[
MAX_OPTION_VALUE_LEN
];

79 
›ti⁄
 * 
¨y_›ti⁄s
;

80 
num_›ti⁄s
;

	@playlist.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~<sys/°©.h
>

22 
	~<libgí.h
>

23 
	~<limôs.h
>

25 
	~<uni°d.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<f˙é.h
>

30 
	~"ègutûs/ègutûs.h
"

32 
	~"u≤pglobÆv¨s.h
"

33 
	~"sˇ¬î.h
"

34 
	~"mëad©a.h
"

35 
	~"utûs.h
"

36 
	~"sql.h
"

37 
	~"log.h
"

40 
	$ö£π_∂ayli°
(c⁄° * 
∑th
, * 
«me
)

42 
s⁄g_mëad©a
 
∂i°
;

43 
°©
 
fûe
;

44 
ôems
 = 0, 
m©ches
, 
ªt
;

45 
ty≥
[4];

47 
	`°∫˝y
(
ty≥
, 
	`°ºchr
(
«me
, '.')+1, 4);

49 if–
	`°¨t_∂i°
(
∑th
, 
NULL
, &
fûe
, NULL, 
ty≥
) != 0 )

51 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "BadÖœyli° [%s]\n", 
∑th
);

54  (
ªt
 = 
	`√xt_∂i°_åack
(&
∂i°
, &
fûe
, 
NULL
, 
ty≥
)) == 0 )

56 
ôems
++;

57 
	`‰ìègs
(&
∂i°
);

59 if–
ªt
 == 2 )

61 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "BadÖœyli° [%s]\n", 
∑th
);

64 
	`°rù_ext
(
«me
);

66 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "Pœyli° %†c⁄èö†%d iãms\n", 
«me
, 
ôems
);

68 
m©ches
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT cou¡(*Ë‰om PLAYLISTS whîêNAME = '%q'", 
«me
);

69 if–
m©ches
 > 0 )

71 
	`sql_exec
(
db
, "INSERT into PLAYLISTS"

75 
«me
, 
m©ches
, 
∑th
, 
ôems
);

79 
	`sql_exec
(
db
, "INSERT into PLAYLISTS"

83 
«me
, 
∑th
, 
ôems
);

86 
	}
}

89 
	$gí_dú_hash
(c⁄° *
∑th
)

91 
dú
[
PATH_MAX
], *
ba£
;

92 
Àn
;

94 
	`°∫˝y
(
dú
, 
∑th
, (dir));

95 
dú
[(dir)-1] = '\0';

96 
ba£
 = 
	`°ºchr
(
dú
, '/');

97 if–!
ba£
 )

98 
ba£
 = 
	`°ºchr
(
dú
, '\\');

99 if–
ba£
 )

101 *
ba£
 = '\0';

102 
Àn
 = 
ba£
 - 
dú
;

108  
	`DJBHash
(
dú
, 
Àn
);

109 
	}
}

112 
	$fûl_∂ayli°s
()

114 
rows
, 
i
, 
found
, 
Àn
;

115 **
ªsu…
;

116 *
∂∑th
, *
∂«me
, *
‚ame
, *
œ°_dú
;

117 
hash
, 
œ°_hash
 = 0;

118 
˛ass
[] = "playlistContainer";

119 
s⁄g_mëad©a
 
∂i°
;

120 
°©
 
fûe
;

121 
ty≥
[4];

122 
öt64_t
 
∂ID
, 
dëaûID
;

123 
sql_buf
[] = "SELECT ID, NAME, PATH from PLAYLISTS where ITEMS > FOUND";

125 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "ParsingÖlaylists...\n");

127 if–
	`sql_gë_èbÀ
(
db
, 
sql_buf
, &
ªsu…
, &
rows
, 
NULL
Ë!
SQLITE_OK
 )

129 if–!
rows
 )

130 
d⁄e
;

132 
rows
++;

133  
i
=3; i<
rows
*3; i++ )

135 
∂ID
 = 
	`°πﬁl
(
ªsu…
[
i
], 
NULL
, 10);

136 
∂«me
 = 
ªsu…
[++
i
];

137 
∂∑th
 = 
ªsu…
[++
i
];

138 
œ°_dú
 = 
NULL
;

139 
œ°_hash
 = 0;

141 
	`°∫˝y
(
ty≥
, 
	`°ºchr
(
∂∑th
, '.')+1, 4);

143 if–
	`°¨t_∂i°
(
∂∑th
, 
NULL
, &
fûe
, NULL, 
ty≥
) != 0 )

146 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "Sˇ¬ögÖœyli° \"%s\" [%s]\n", 
∂«me
, 
∂∑th
);

147 if–
	`sql_gë_öt_fõld
(
db
, "SELECT ID from OBJECTS whîêPARENT_ID = '"
MUSIC_PLIST_ID
"'"

148 "ánd NAME = '%q'", 
∂«me
) <= 0 )

150 
dëaûID
 = 
	`GëFﬁdîMëad©a
(
∂«me
, 
NULL
, NULL, NULL, 0);

151 
	`sql_exec
(
db
, "INSERT into OBJECTS"

155 
MUSIC_PLIST_ID
, 
∂ID
, MUSIC_PLIST_ID, 
dëaûID
, 
˛ass
, 
∂«me
);

158 
∂∑th
 = 
	`dú«me
(plpath);

159 
found
 = 0;

160  
	`√xt_∂i°_åack
(&
∂i°
, &
fûe
, 
NULL
, 
ty≥
) == 0 )

162 
hash
 = 
	`gí_dú_hash
(
∂i°
.
∑th
);

163 if–
	`sql_gë_öt_fõld
(
db
, "SELECT 1 from OBJECTS where OBJECT_ID = '%s$%llX$%d'",

164 
MUSIC_PLIST_ID
, 
∂ID
, 
∂i°
.
åack
) == 1 )

167 
found
++;

168 
	`‰ìègs
(&
∂i°
);

171 if–
œ°_dú
 )

173 if–
hash
 =
œ°_hash
 )

175 
‚ame
 = 
	`ba£«me
(
∂i°
.
∑th
);

176 
dëaûID
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT ID from DETAILS whîêPATH = '%q/%q'", 
œ°_dú
, 
‚ame
);

179 
dëaûID
 = -1;

180 if–
dëaûID
 <= 0 )

182 
	`sqlôe3_‰ì
(
œ°_dú
);

183 
œ°_dú
 = 
NULL
;

186 
found
;

189 
‚ame
 = 
∂i°
.
∑th
;

190 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "%d: checkög d©aba£ f‹ %s\n", 
∂i°
.
åack
,Öli°.
∑th
);

191 if–!
	`°Ωbrk
(
‚ame
, "\\/") )

193 
Àn
 = 
	`°æí
(
‚ame
Ë+ såÀn(
∂∑th
) + 2;

194 
∂i°
.
∑th
 = 
	`mÆloc
(
Àn
);

195 
	`¢¥ötf
(
∂i°
.
∑th
, 
Àn
, "%s/%s", 
∂∑th
, 
‚ame
);

196 
	`‰ì
(
‚ame
);

197 
‚ame
 = 
∂i°
.
∑th
;

201  *
‚ame
 == '\\' )

203 
‚ame
++;

206 
ªåy
:

208 
dëaûID
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT ID from DETAILS whîêPATHÜikê'%%%q'", 
‚ame
);

209 if–
dëaûID
 > 0 )

211 
found
:

212 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "+ %†found i¿db\n", 
‚ame
);

213 
	`sql_exec
(
db
, "INSERT into OBJECTS"

217 " whîêDETAIL_ID = %Œdánd OBJECT_ID glob '" 
BROWSEDIR_ID
 "$*'",

218 
MUSIC_PLIST_ID
, 
∂ID
, 
∂i°
.
åack
,

219 
MUSIC_PLIST_ID
, 
∂ID
,

220 
dëaûID
);

221 if–!
œ°_dú
 )

223 
œ°_dú
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT PATH from DETAILS whîêID = %Œd", 
dëaûID
);

224 
‚ame
 = 
	`°ºchr
(
œ°_dú
, '/');

225 if–
‚ame
 )

226 *
‚ame
 = '\0';

227 
œ°_hash
 = 
hash
;

229 
found
++;

233 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "- %†nŸ found i¿db\n", 
‚ame
);

234 if–
	`°rchr
(
‚ame
, '\\') )

236 
‚ame
 = 
	`modifySåög
(fname, "\\", "/");

237 
ªåy
;

239 if–(
‚ame
 = 
	`°rchr
(fname, '/')) )

241 
‚ame
++;

242 
ªåy
;

245 
	`‰ìègs
(&
∂i°
);

247 if–
œ°_dú
 )

249 
	`sqlôe3_‰ì
(
œ°_dú
);

250 
œ°_dú
 = 
NULL
;

252 
	`sql_exec
(
db
, "UPDATE PLAYLISTS së FOUND = %d whîêID = %Œd", 
found
, 
∂ID
);

254 
d⁄e
:

255 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

256 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "FinishedÖarsingÖlaylists.\n");

259 
	}
}

	@playlist.h

24 #i‚de‡
__PLAYLIST_H__


25 
	#__PLAYLIST_H__


	)

28 
ö£π_∂ayli°
(c⁄° * 
∑th
, * 
«me
);

31 
fûl_∂ayli°s
();

	@scanner.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~<uni°d.h
>

22 
	~<dúít.h
>

23 
	~<loˇÀ.h
>

24 
	~<libgí.h
>

25 
	~<öây≥s.h
>

26 
	~<sys/∑øm.h
>

27 
	~<sys/°©.h
>

28 
	~<sys/time.h
>

29 
	~<sys/ªsour˚.h
>

31 
	~"c⁄fig.h
"

33 #ifde‡
ENABLE_NLS


34 
	~<liböé.h
>

36 
	~<sqlôe3.h
>

37 
	~"libav.h
"

39 
	~"sˇ¬î_sqlôe.h
"

40 
	~"u≤pglobÆv¨s.h
"

41 
	~"mëad©a.h
"

42 
	~"∂ayli°.h
"

43 
	~"utûs.h
"

44 
	~"sql.h
"

45 
	~"sˇ¬î.h
"

46 
	~"Æbum¨t.h
"

47 
	~"log.h
"

49 #i‡
SCANDIR_CONST


50 c⁄° 
	tdúít
 
	tsˇn_fûãr
;

52 
dúít
 
	tsˇn_fûãr
;

54 #i‚de‡
AV_LOG_PANIC


55 
	#AV_LOG_PANIC
 
AV_LOG_FATAL


	)

58 
	gvÆid_ˇche
 = 0;

60 
	svútuÆ_ôem


62 
öt64_t
 
	mobje˘ID
;

63 
	m∑ª¡ID
[64];

64 
	m«me
[256];

67 
öt64_t


68 
	$gë_√xt_avaûabÀ_id
(c⁄° *
èbÀ
, c⁄° *
∑ª¡ID
)

70 *
ªt
, *
ba£
;

71 
öt64_t
 
obje˘ID
 = 0;

73 
ªt
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT OBJECT_ID from %s where ID = "

75 
èbÀ
,ÅabÀ, 
∑ª¡ID
);

76 if–
ªt
 )

78 
ba£
 = 
	`°ºchr
(
ªt
, '$');

79 if–
ba£
 )

80 
obje˘ID
 = 
	`°πﬁl
(
ba£
+1, 
NULL
, 16) + 1;

81 
	`sqlôe3_‰ì
(
ªt
);

84  
obje˘ID
;

85 
	}
}

88 
	$ö£π_c⁄èöî
(c⁄° *
ôem
, c⁄° *
roŸP¨ít
, c⁄° *
ªfID
, c⁄° *
˛ass
,

89 c⁄° *
¨ti°
, c⁄° *
gíª
, c⁄° *
Æbum_¨t
, 
öt64_t
 *
obje˘ID
, i¡64_à*
∑ª¡ID
)

91 *
ªsu…
;

92 *
ba£
;

93 
ªt
 = 0;

95 
ªsu…
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT OBJECT_ID from OBJECTS o "

101 
roŸP¨ít
, 
ôem
, 
¨ti°
?"like":"is",áπi°, 
˛ass
);

102 if–
ªsu…
 )

104 
ba£
 = 
	`°ºchr
(
ªsu…
, '$');

105 if–
ba£
 )

106 *
∑ª¡ID
 = 
	`°πﬁl
(
ba£
+1, 
NULL
, 16);

108 *
∑ª¡ID
 = 0;

109 *
obje˘ID
 = 
	`gë_√xt_avaûabÀ_id
("OBJECTS", 
ªsu…
);

113 
öt64_t
 
dëaûID
 = 0;

114 *
obje˘ID
 = 0;

115 *
∑ª¡ID
 = 
	`gë_√xt_avaûabÀ_id
("OBJECTS", 
roŸP¨ít
);

116 if–
ªfID
 )

118 
ªsu…
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT DETAIL_ID from OBJECTS whîêOBJECT_ID = %Q", 
ªfID
);

119 if–
ªsu…
 )

120 
dëaûID
 = 
	`°πﬁl
(
ªsu…
, 
NULL
, 10);

122 if–!
dëaûID
 )

124 
dëaûID
 = 
	`GëFﬁdîMëad©a
(
ôem
, 
NULL
, 
¨ti°
, 
gíª
, (
Æbum_¨t
 ? 
	`°πﬁl
(album_art, NULL, 10) : 0));

126 
ªt
 = 
	`sql_exec
(
db
, "INSERT into OBJECTS"

130 
roŸP¨ít
, ()*
∑ª¡ID
,ÑootParent,

131 
ªfID
, ()
dëaûID
, 
˛ass
, 
ôem
);

133 
	`sqlôe3_‰ì
(
ªsu…
);

135  
ªt
;

136 
	}
}

139 
	$ö£π_c⁄èöîs
(c⁄° *
«me
, c⁄° *
∑th
, c⁄° *
ªfID
, c⁄° *
˛ass
, 
öt64_t
 
dëaûID
)

141 
sql
[128];

142 **
ªsu…
;

143 
ªt
;

144 
cﬁs
, 
row
;

145 
öt64_t
 
obje˘ID
, 
∑ª¡ID
;

147 if–
	`°r°r
(
˛ass
, "imageItem") )

149 *
d©e_èkí
 = 
NULL
, *
ˇmîa
 = NULL;

150 
vútuÆ_ôem
 
œ°_d©e
;

151 
vútuÆ_ôem
 
œ°_ˇm
;

152 
vútuÆ_ôem
 
œ°_ˇmd©e
;

153 
œ°_Æl_obje˘ID
 = 0;

155 
	`¢¥ötf
(
sql
, (sql), "SELECT DATE, CREATOR from DETAILS whîêID = %Œd", ()
dëaûID
);

156 
ªt
 = 
	`sql_gë_èbÀ
(
db
, 
sql
, &
ªsu…
, &
row
, &
cﬁs
);

157 if–
ªt
 =
SQLITE_OK
 )

159 
d©e_èkí
 = 
ªsu…
[2];

160 
ˇmîa
 = 
ªsu…
[3];

162 if–
d©e_èkí
 )

163 
d©e_èkí
[10] = '\0';

165 
d©e_èkí
 = 
	`_
("Unknown Date");

166 if–!
ˇmîa
 )

167 
ˇmîa
 = 
	`_
("Unknown Camera");

169 if–
vÆid_ˇche
 && 
	`°rcmp
(
œ°_d©e
.
«me
, 
d©e_èkí
) == 0 )

171 
œ°_d©e
.
obje˘ID
++;

176 
	`ö£π_c⁄èöî
(
d©e_èkí
, 
IMAGE_DATE_ID
, 
NULL
, "Æbum.phŸoAlbum", NULL, NULL, NULL, &
obje˘ID
, &
∑ª¡ID
);

177 
	`•rötf
(
œ°_d©e
.
∑ª¡ID
, 
IMAGE_DATE_ID
"$%llX", ()parentID);

178 
œ°_d©e
.
obje˘ID
 = objectID;

179 
	`°∫˝yt
(
œ°_d©e
.
«me
, 
d©e_èkí
, (last_date.name));

182 
	`sql_exec
(
db
, "INSERT into OBJECTS"

186 
œ°_d©e
.
∑ª¡ID
, (Óa°_d©e.
obje˘ID
,Üa°_d©e.∑ª¡ID, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

188 if–!
vÆid_ˇche
 || 
	`°rcmp
(
ˇmîa
, 
œ°_ˇm
.
«me
) != 0 )

190 
	`ö£π_c⁄èöî
(
ˇmîa
, 
IMAGE_CAMERA_ID
, 
NULL
, "°‹ageFﬁdî", NULL, NULL, NULL, &
obje˘ID
, &
∑ª¡ID
);

191 
	`•rötf
(
œ°_ˇm
.
∑ª¡ID
, 
IMAGE_CAMERA_ID
"$%llX", ()parentID);

192 
	`°∫˝yt
(
œ°_ˇm
.
«me
, 
ˇmîa
, (last_cam.name));

194 
œ°_ˇmd©e
.
«me
[0] = '\0';

196 if–
vÆid_ˇche
 && 
	`°rcmp
(
œ°_ˇmd©e
.
«me
, 
d©e_èkí
) == 0 )

198 
œ°_ˇmd©e
.
obje˘ID
++;

203 
	`ö£π_c⁄èöî
(
d©e_èkí
, 
œ°_ˇm
.
∑ª¡ID
, 
NULL
, "Æbum.phŸoAlbum", NULL, NULL, NULL, &
obje˘ID
, &parentID);

204 
	`•rötf
(
œ°_ˇmd©e
.
∑ª¡ID
, "%s$%ŒX", 
œ°_ˇm
.parentID, ()parentID);

205 
œ°_ˇmd©e
.
obje˘ID
 = objectID;

206 
	`°∫˝yt
(
œ°_ˇmd©e
.
«me
, 
d©e_èkí
, (last_camdate.name));

209 
	`sql_exec
(
db
, "INSERT into OBJECTS"

213 
œ°_ˇmd©e
.
∑ª¡ID
,Üa°_ˇmd©e.
obje˘ID
,Üa°_ˇmd©e.∑ª¡ID, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

215 if–!
œ°_Æl_obje˘ID
 )

217 
œ°_Æl_obje˘ID
 = 
	`gë_√xt_avaûabÀ_id
("OBJECTS", 
IMAGE_ALL_ID
);

219 
	`sql_exec
(
db
, "INSERT into OBJECTS"

222 " ('"
IMAGE_ALL_ID
"$%llX', '"IMAGE_ALL_ID"', '%s', '%s', %lld, %Q)",

223 
œ°_Æl_obje˘ID
++, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

225 if–
	`°r°r
(
˛ass
, "audioItem") )

227 
	`¢¥ötf
(
sql
, (sql), "SELECT ALBUM, ARTIST, GENRE, ALBUM_ART from DETAILS whîêID = %Œd", ()
dëaûID
);

228 
ªt
 = 
	`sql_gë_èbÀ
(
db
, 
sql
, &
ªsu…
, &
row
, &
cﬁs
);

229 if–
ªt
 !
SQLITE_OK
 )

231 if–!
row
 )

233 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

236 *
Æbum
 = 
ªsu…
[4], *
¨ti°
 =Ñesu…[5], *
gíª
 =Ñesult[6];

237 *
Æbum_¨t
 = 
ªsu…
[7];

238 
vútuÆ_ôem
 
œ°_Æbum
;

239 
vútuÆ_ôem
 
œ°_¨ti°
;

240 
vútuÆ_ôem
 
œ°_¨ti°Album
;

241 
vútuÆ_ôem
 
œ°_¨ti°AlbumAŒ
;

242 
vútuÆ_ôem
 
œ°_gíª
;

243 
vútuÆ_ôem
 
œ°_gíªAπi°
;

244 
vútuÆ_ôem
 
œ°_gíªAπi°AŒ
;

245 
œ°_Æl_obje˘ID
 = 0;

247 if–
Æbum
 )

249 if–
vÆid_ˇche
 && 
	`°rcmp
(
Æbum
, 
œ°_Æbum
.
«me
) == 0 )

251 
œ°_Æbum
.
obje˘ID
++;

256 
	`°∫˝yt
(
œ°_Æbum
.
«me
, 
Æbum
, (last_album.name));

257 
	`ö£π_c⁄èöî
(
Æbum
, 
MUSIC_ALBUM_ID
, 
NULL
, "Æbum.musicAlbum", 
¨ti°
, 
gíª
, 
Æbum_¨t
, &
obje˘ID
, &
∑ª¡ID
);

258 
	`•rötf
(
œ°_Æbum
.
∑ª¡ID
, 
MUSIC_ALBUM_ID
"$%llX", ()parentID);

259 
œ°_Æbum
.
obje˘ID
 = objectID;

262 
	`sql_exec
(
db
, "INSERT into OBJECTS"

266 
œ°_Æbum
.
∑ª¡ID
,Üa°_Æbum.
obje˘ID
,Üa°_Æbum.∑ª¡ID, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

268 if–
¨ti°
 )

270 if–!
vÆid_ˇche
 || 
	`°rcmp
(
¨ti°
, 
œ°_¨ti°
.
«me
) != 0 )

272 
	`ö£π_c⁄èöî
(
¨ti°
, 
MUSIC_ARTIST_ID
, 
NULL
, "≥rs⁄.musicAπi°", NULL, 
gíª
, NULL, &
obje˘ID
, &
∑ª¡ID
);

273 
	`•rötf
(
œ°_¨ti°
.
∑ª¡ID
, 
MUSIC_ARTIST_ID
"$%llX", ()parentID);

274 
	`°∫˝yt
(
œ°_¨ti°
.
«me
, 
¨ti°
, (last_artist.name));

275 
œ°_¨ti°Album
.
«me
[0] = '\0';

277 
	`ö£π_c⁄èöî
(
	`_
("- AŒ Album†-"), 
œ°_¨ti°
.
∑ª¡ID
, 
NULL
, "Æbum", 
¨ti°
, 
gíª
, NULL, &
obje˘ID
, &parentID);

278 
	`•rötf
(
œ°_¨ti°AlbumAŒ
.
∑ª¡ID
, "%s$%ŒX", 
œ°_¨ti°
.parentID, ()parentID);

279 
œ°_¨ti°AlbumAŒ
.
obje˘ID
 = objectID;

283 
œ°_¨ti°AlbumAŒ
.
obje˘ID
++;

285 if–
vÆid_ˇche
 && 
	`°rcmp
(
Æbum
?Æbum:
	`_
("Unknow¿Album"), 
œ°_¨ti°Album
.
«me
) == 0 )

287 
œ°_¨ti°Album
.
obje˘ID
++;

292 
	`ö£π_c⁄èöî
(
Æbum
?Æbum:
	`_
("Unknow¿Album"), 
œ°_¨ti°
.
∑ª¡ID
,álbum?
œ°_Æbum
.∑ª¡ID:
NULL
,

293 "Æbum.musicAlbum", 
¨ti°
, 
gíª
, 
Æbum_¨t
, &
obje˘ID
, &
∑ª¡ID
);

294 
	`•rötf
(
œ°_¨ti°Album
.
∑ª¡ID
, "%s$%ŒX", 
œ°_¨ti°
.parentID, ()parentID);

295 
œ°_¨ti°Album
.
obje˘ID
 = objectID;

296 
	`°∫˝yt
(
œ°_¨ti°Album
.
«me
, 
Æbum
 ?álbum : 
	`_
("Unknown Album"), (last_artistAlbum.name));

299 
	`sql_exec
(
db
, "INSERT into OBJECTS"

303 
œ°_¨ti°Album
.
∑ª¡ID
,Üa°_¨ti°Album.
obje˘ID
,Üa°_¨ti°Album.∑ª¡ID, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

304 
	`sql_exec
(
db
, "INSERT into OBJECTS"

308 
œ°_¨ti°AlbumAŒ
.
∑ª¡ID
,Üa°_¨ti°AlbumAŒ.
obje˘ID
,Üa°_¨ti°AlbumAŒ.∑ª¡ID, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

310 if–
gíª
 )

312 if–!
vÆid_ˇche
 || 
	`°rcmp
(
gíª
, 
œ°_gíª
.
«me
) != 0 )

314 
	`ö£π_c⁄èöî
(
gíª
, 
MUSIC_GENRE_ID
, 
NULL
, "gíª.musicGíª", NULL, NULL, NULL, &
obje˘ID
, &
∑ª¡ID
);

315 
	`•rötf
(
œ°_gíª
.
∑ª¡ID
, 
MUSIC_GENRE_ID
"$%llX", ()parentID);

316 
	`°∫˝yt
(
œ°_gíª
.
«me
, 
gíª
, (last_genre.name));

318 
	`ö£π_c⁄èöî
(
	`_
("- AŒ Aπi°†-"), 
œ°_gíª
.
∑ª¡ID
, 
NULL
, "≥rs⁄", NULL, 
gíª
, NULL, &
obje˘ID
, &parentID);

319 
	`•rötf
(
œ°_gíªAπi°AŒ
.
∑ª¡ID
, "%s$%ŒX", 
œ°_gíª
.parentID, ()parentID);

320 
œ°_gíªAπi°AŒ
.
obje˘ID
 = objectID;

324 
œ°_gíªAπi°AŒ
.
obje˘ID
++;

326 if–
vÆid_ˇche
 && 
	`°rcmp
(
¨ti°
?¨ti°:
	`_
("Unknow¿Aπi°"), 
œ°_gíªAπi°
.
«me
) == 0 )

328 
œ°_gíªAπi°
.
obje˘ID
++;

332 
	`ö£π_c⁄èöî
(
¨ti°
?¨ti°:
	`_
("Unknow¿Aπi°"), 
œ°_gíª
.
∑ª¡ID
,áπi°?
œ°_¨ti°
.∑ª¡ID:
NULL
,

333 "≥rs⁄.musicAπi°", 
NULL
, 
gíª
, NULL, &
obje˘ID
, &
∑ª¡ID
);

334 
	`•rötf
(
œ°_gíªAπi°
.
∑ª¡ID
, "%s$%ŒX", 
œ°_gíª
.parentID, ()parentID);

335 
œ°_gíªAπi°
.
obje˘ID
 = objectID;

336 
	`°∫˝yt
(
œ°_gíªAπi°
.
«me
, 
¨ti°
 ?áπi° : 
	`_
("Unknown Artist"), (last_genreArtist.name));

339 
	`sql_exec
(
db
, "INSERT into OBJECTS"

343 
œ°_gíªAπi°
.
∑ª¡ID
,Üa°_gíªAπi°.
obje˘ID
,Üa°_gíªAπi°.∑ª¡ID, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

344 
	`sql_exec
(
db
, "INSERT into OBJECTS"

348 
œ°_gíªAπi°AŒ
.
∑ª¡ID
,Üa°_gíªAπi°AŒ.
obje˘ID
,Üa°_gíªAπi°AŒ.∑ª¡ID, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

351 if–!
œ°_Æl_obje˘ID
 )

353 
œ°_Æl_obje˘ID
 = 
	`gë_√xt_avaûabÀ_id
("OBJECTS", 
MUSIC_ALL_ID
);

355 
	`sql_exec
(
db
, "INSERT into OBJECTS"

358 " ('"
MUSIC_ALL_ID
"$%llX', '"MUSIC_ALL_ID"', '%s', '%s', %lld, %Q)",

359 
œ°_Æl_obje˘ID
++, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

361 if–
	`°r°r
(
˛ass
, "videoItem") )

363 
œ°_Æl_obje˘ID
 = 0;

366 if–!
œ°_Æl_obje˘ID
 )

368 
œ°_Æl_obje˘ID
 = 
	`gë_√xt_avaûabÀ_id
("OBJECTS", 
VIDEO_ALL_ID
);

370 
	`sql_exec
(
db
, "INSERT into OBJECTS"

373 " ('"
VIDEO_ALL_ID
"$%llX', '"VIDEO_ALL_ID"', '%s', '%s', %lld, %Q)",

374 
œ°_Æl_obje˘ID
++, 
ªfID
, 
˛ass
, ()
dëaûID
, 
«me
);

381 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

382 
vÆid_ˇche
 = 1;

383 
	}
}

386 
	$ö£π_dúe˘‹y
(c⁄° *
«me
, c⁄° *
∑th
, c⁄° *
ba£
, c⁄° *
∑ª¡ID
, 
obje˘ID
)

388 
öt64_t
 
dëaûID
 = 0;

389 
˛ass
[] = "container.storageFolder";

390 *
ªsu…
, *
p
;

391 
œ°_found
[256] = "-1";

393 if–
	`°rcmp
(
ba£
, 
BROWSEDIR_ID
) != 0 )

395 
found
 = 0;

396 
id_buf
[64], 
∑ª¡_buf
[64], 
ªfID
[64];

397 *
dú_buf
, *
dú
;

399 
dú_buf
 = 
	`°rdup
(
∑th
);

400 
dú
 = 
	`dú«me
(
dú_buf
);

401 
	`¢¥ötf
(
ªfID
, ‘efID), "%s%s$%X", 
BROWSEDIR_ID
, 
∑ª¡ID
, 
obje˘ID
);

402 
	`¢¥ötf
(
id_buf
, (id_buf), "%s%s$%X", 
ba£
, 
∑ª¡ID
, 
obje˘ID
);

403 
	`¢¥ötf
(
∑ª¡_buf
, ’¨ít_buf), "%s%s", 
ba£
, 
∑ª¡ID
);

404  !
found
 )

406 if–
vÆid_ˇche
 && 
	`°rcmp
(
id_buf
, 
œ°_found
) == 0 )

408 if–
	`sql_gë_öt_fõld
(
db
, "SELECT cou¡(*Ë‰om OBJECTS whîêOBJECT_ID = '%s'", 
id_buf
) > 0 )

410 
	`°r˝y
(
œ°_found
, 
id_buf
);

414 
ªsu…
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT DETAIL_ID from OBJECTS whîêOBJECT_ID = '%s'", 
ªfID
);

415 if–
ªsu…
 )

417 
dëaûID
 = 
	`°πﬁl
(
ªsu…
, 
NULL
, 10);

418 
	`sqlôe3_‰ì
(
ªsu…
);

420 
	`sql_exec
(
db
, "INSERT into OBJECTS"

424 
id_buf
, 
∑ª¡_buf
, 
ªfID
, 
dëaûID
, 
˛ass
, 
	`°ºchr
(
dú
, '/')+1);

425 if–(
p
 = 
	`°ºchr
(
id_buf
, '$')) )

426 *
p
 = '\0';

427 if–(
p
 = 
	`°ºchr
(
∑ª¡_buf
, '$')) )

428 *
p
 = '\0';

429 if–(
p
 = 
	`°ºchr
(
ªfID
, '$')) )

430 *
p
 = '\0';

431 
dú
 = 
	`dú«me
(dir);

433 
	`‰ì
(
dú_buf
);

437 
dëaûID
 = 
	`GëFﬁdîMëad©a
(
«me
, 
∑th
, 
NULL
, NULL, 
	`föd_Æbum_¨t
(path, NULL, 0));

438 
	`sql_exec
(
db
, "INSERT into OBJECTS"

442 
ba£
, 
∑ª¡ID
, 
obje˘ID
, ba£,Ö¨ítID, 
dëaûID
, 
˛ass
, 
«me
);

444 
	}
}

447 
	$ö£π_fûe
(*
«me
, c⁄° *
∑th
, c⁄° *
∑ª¡ID
, 
obje˘
)

449 
˛ass
[32];

450 
obje˘ID
[64];

451 
öt64_t
 
dëaûID
 = 0;

452 
ba£
[8];

453 *
ty≥dú_∑ª¡ID
;

454 *
ba£id
;

455 *
‹ig_«me
 = 
NULL
;

457 if–
	`is_image
(
«me
) )

459 if–
	`is_Æbum_¨t
(
«me
) )

461 
	`°r˝y
(
ba£
, 
IMAGE_DIR_ID
);

462 
	`°r˝y
(
˛ass
, "item.imageItem.photo");

463 
dëaûID
 = 
	`GëImageMëad©a
(
∑th
, 
«me
);

465 if–
	`is_video
(
«me
) )

467 
‹ig_«me
 = 
	`°rdup
(
«me
);

468 
	`°r˝y
(
ba£
, 
VIDEO_DIR_ID
);

469 
	`°r˝y
(
˛ass
, "item.videoItem");

470 
dëaûID
 = 
	`GëVideoMëad©a
(
∑th
, 
«me
);

471 if–!
dëaûID
 )

472 
	`°r˝y
(
«me
, 
‹ig_«me
);

474 if–
	`is_∂ayli°
(
«me
) )

476 if–
	`ö£π_∂ayli°
(
∑th
, 
«me
) == 0 )

479 if–!
dëaûID
 && 
	`is_audio
(
«me
) )

481 
	`°r˝y
(
ba£
, 
MUSIC_DIR_ID
);

482 
	`°r˝y
(
˛ass
, "item.audioItem.musicTrack");

483 
dëaûID
 = 
	`GëAudioMëad©a
(
∑th
, 
«me
);

485 
	`‰ì
(
‹ig_«me
);

486 if–!
dëaûID
 )

488 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Unsuc˚ssfu»gëtög dëaû†f‹ %s!\n", 
∑th
);

492 
	`•rötf
(
obje˘ID
, "%s%s$%X", 
BROWSEDIR_ID
, 
∑ª¡ID
, 
obje˘
);

494 
	`sql_exec
(
db
, "INSERT into OBJECTS"

498 
obje˘ID
, 
BROWSEDIR_ID
, 
∑ª¡ID
, 
˛ass
, 
dëaûID
, 
«me
);

500 if–*
∑ª¡ID
 )

502 
ty≥dú_obje˘ID
 = 0;

503 
ty≥dú_∑ª¡ID
 = 
	`°rdup
(
∑ª¡ID
);

504 
ba£id
 = 
	`°ºchr
(
ty≥dú_∑ª¡ID
, '$');

505 if–
ba£id
 )

507 
ty≥dú_obje˘ID
 = 
	`°πﬁ
(
ba£id
+1, 
NULL
, 16);

508 *
ba£id
 = '\0';

510 
	`ö£π_dúe˘‹y
(
«me
, 
∑th
, 
ba£
, 
ty≥dú_∑ª¡ID
, 
ty≥dú_obje˘ID
);

511 
	`‰ì
(
ty≥dú_∑ª¡ID
);

513 
	`sql_exec
(
db
, "INSERT into OBJECTS"

517 
ba£
, 
∑ª¡ID
, 
obje˘
, ba£,Ö¨ítID, 
obje˘ID
, 
˛ass
, 
dëaûID
, 
«me
);

519 
	`ö£π_c⁄èöîs
(
«me
, 
∑th
, 
obje˘ID
, 
˛ass
, 
dëaûID
);

521 
	}
}

524 
	$Cª©eD©aba£
()

526 
ªt
, 
i
;

527 c⁄° *
c⁄èöîs
[] = { "0","-1", "root",

528 
MUSIC_ID
, "0", 
	`_
("Music"),

529 
MUSIC_ALL_ID
, 
MUSIC_ID
, 
	`_
("All Music"),

530 
MUSIC_GENRE_ID
, 
MUSIC_ID
, 
	`_
("Genre"),

531 
MUSIC_ARTIST_ID
, 
MUSIC_ID
, 
	`_
("Artist"),

532 
MUSIC_ALBUM_ID
, 
MUSIC_ID
, 
	`_
("Album"),

533 
MUSIC_DIR_ID
, 
MUSIC_ID
, 
	`_
("Folders"),

534 
MUSIC_PLIST_ID
, 
MUSIC_ID
, 
	`_
("Playlists"),

536 
VIDEO_ID
, "0", 
	`_
("Video"),

537 
VIDEO_ALL_ID
, 
VIDEO_ID
, 
	`_
("All Video"),

538 
VIDEO_DIR_ID
, 
VIDEO_ID
, 
	`_
("Folders"),

540 
IMAGE_ID
, "0", 
	`_
("Pictures"),

541 
IMAGE_ALL_ID
, 
IMAGE_ID
, 
	`_
("All Pictures"),

542 
IMAGE_DATE_ID
, 
IMAGE_ID
, 
	`_
("Date Taken"),

543 
IMAGE_CAMERA_ID
, 
IMAGE_ID
, 
	`_
("Camera"),

544 
IMAGE_DIR_ID
, 
IMAGE_ID
, 
	`_
("Folders"),

546 
BROWSEDIR_ID
, "0", 
	`_
("Browse Folders"),

549 
ªt
 = 
	`sql_exec
(
db
, 
¸óã_obje˘TabÀ_sqlôe
);

550 if–
ªt
 !
SQLITE_OK
 )

551 
sql_Áûed
;

552 
ªt
 = 
	`sql_exec
(
db
, 
¸óã_dëaûTabÀ_sqlôe
);

553 if–
ªt
 !
SQLITE_OK
 )

554 
sql_Áûed
;

555 
ªt
 = 
	`sql_exec
(
db
, 
¸óã_ÆbumAπTabÀ_sqlôe
);

556 if–
ªt
 !
SQLITE_OK
 )

557 
sql_Áûed
;

558 
ªt
 = 
	`sql_exec
(
db
, 
¸óã_ˇ±i⁄TabÀ_sqlôe
);

559 if–
ªt
 !
SQLITE_OK
 )

560 
sql_Áûed
;

561 
ªt
 = 
	`sql_exec
(
db
, 
¸óã_bookm¨kTabÀ_sqlôe
);

562 if–
ªt
 !
SQLITE_OK
 )

563 
sql_Áûed
;

564 
ªt
 = 
	`sql_exec
(
db
, 
¸óã_∂ayli°TabÀ_sqlôe
);

565 if–
ªt
 !
SQLITE_OK
 )

566 
sql_Áûed
;

567 
ªt
 = 
	`sql_exec
(
db
, 
¸óã_£âögsTabÀ_sqlôe
);

568 if–
ªt
 !
SQLITE_OK
 )

569 
sql_Áûed
;

570 
ªt
 = 
	`sql_exec
(
db
, "INSERT into SETTINGS values ('UPDATE_ID', '0')");

571 if–
ªt
 !
SQLITE_OK
 )

572 
sql_Áûed
;

573  
i
=0; 
c⁄èöîs
[i]; i=i+3 )

575 
ªt
 = 
	`sql_exec
(
db
, "INSERT into OBJECTS (OBJECT_ID, PARENT_ID, DETAIL_ID, CLASS, NAME)"

578 
c⁄èöîs
[
i
], c⁄èöîs[i+1], 
	`GëFﬁdîMëad©a
(c⁄èöîs[i+2], 
NULL
, NULL, NULL, 0), containers[i+2]);

579 if–
ªt
 !
SQLITE_OK
 )

580 
sql_Áûed
;

582 
	`sql_exec
(
db
, "create INDEX IDX_OBJECTS_OBJECT_ID ON OBJECTS(OBJECT_ID);");

583 
	`sql_exec
(
db
, "create INDEX IDX_OBJECTS_PARENT_ID ON OBJECTS(PARENT_ID);");

584 
	`sql_exec
(
db
, "create INDEX IDX_OBJECTS_DETAIL_ID ON OBJECTS(DETAIL_ID);");

585 
	`sql_exec
(
db
, "create INDEX IDX_OBJECTS_CLASS ON OBJECTS(CLASS);");

586 
	`sql_exec
(
db
, "create INDEX IDX_DETAILS_PATH ON DETAILS(PATH);");

587 
	`sql_exec
(
db
, "create INDEX IDX_DETAILS_ID ON DETAILS(ID);");

588 
	`sql_exec
(
db
, "create INDEX IDX_ALBUM_ART ON ALBUM_ART(ID);");

589 
	`sql_exec
(
db
, "create INDEX IDX_SCANNER_OPT ON OBJECTS(PARENT_ID, NAME, OBJECT_ID);");

591 
sql_Áûed
:

592 if–
ªt
 !
SQLITE_OK
 )

593 
	`Ârötf
(
°dîr
, "Error creating SQLite3 database!\n");

594  (
ªt
 !
SQLITE_OK
);

595 
	}
}

598 
	$fûãr_ty≥
(
sˇn_fûãr
 *
d
)

600  ( (*
d
->
d_«me
 != '.') &&

601 ((
d
->
d_ty≥
 =
DT_DIR
) ||

602 (
d
->
d_ty≥
 =
DT_LNK
) ||

603 (
d
->
d_ty≥
 =
DT_UNKNOWN
))

605 
	}
}

608 
	$fûãr_a
(
sˇn_fûãr
 *
d
)

610  ( 
	`fûãr_ty≥
(
d
) ||

611 ((
d
->
d_ty≥
 =
DT_REG
) &&

612 (
	`is_audio
(
d
->
d_«me
) ||

613 
	`is_∂ayli°
(
d
->
d_«me
))

615 
	}
}

618 
	$fûãr_av
(
sˇn_fûãr
 *
d
)

620  ( 
	`fûãr_ty≥
(
d
) ||

621 ((
d
->
d_ty≥
 =
DT_REG
) &&

622 (
	`is_audio
(
d
->
d_«me
) ||

623 
	`is_video
(
d
->
d_«me
) ||

624 
	`is_∂ayli°
(
d
->
d_«me
)))

626 
	}
}

629 
	$fûãr_≠
(
sˇn_fûãr
 *
d
)

631  ( 
	`fûãr_ty≥
(
d
) ||

632 ((
d
->
d_ty≥
 =
DT_REG
) &&

633 (
	`is_audio
(
d
->
d_«me
) ||

634 
	`is_image
(
d
->
d_«me
) ||

635 
	`is_∂ayli°
(
d
->
d_«me
)))

637 
	}
}

640 
	$fûãr_v
(
sˇn_fûãr
 *
d
)

642  ( 
	`fûãr_ty≥
(
d
) ||

643 (
d
->
d_ty≥
 =
DT_REG
 &&

644 
	`is_video
(
d
->
d_«me
))

646 
	}
}

649 
	$fûãr_vp
(
sˇn_fûãr
 *
d
)

651  ( 
	`fûãr_ty≥
(
d
) ||

652 ((
d
->
d_ty≥
 =
DT_REG
) &&

653 (
	`is_video
(
d
->
d_«me
) ||

654 
	`is_image
(
d
->
d_«me
)))

656 
	}
}

659 
	$fûãr_p
(
sˇn_fûãr
 *
d
)

661  ( 
	`fûãr_ty≥
(
d
) ||

662 (
d
->
d_ty≥
 =
DT_REG
 &&

663 
	`is_image
(
d
->
d_«me
))

665 
	}
}

668 
	$fûãr_avp
(
sˇn_fûãr
 *
d
)

670  ( 
	`fûãr_ty≥
(
d
) ||

671 ((
d
->
d_ty≥
 =
DT_REG
) &&

672 (
	`is_audio
(
d
->
d_«me
) ||

673 
	`is_image
(
d
->
d_«me
) ||

674 
	`is_video
(
d
->
d_«me
) ||

675 
	`is_∂ayli°
(
d
->
d_«me
)))

677 
	}
}

680 
	$SˇnDúe˘‹y
(c⁄° *
dú
, c⁄° *
∑ª¡
, 
medü_ty≥s
 
dú_ty≥s
)

682 
dúít
 **
«mñi°
;

683 
i
, 
n
, 
°¨tID
=0;

684 
∑ª¡_id
[
PATH_MAX
];

685 
fuŒ_∑th
[
PATH_MAX
];

686 *
«me
 = 
NULL
;

687 
fûío
 = 0;

688 
fûe_ty≥s
 
ty≥
;

690 
	`DPRINTF
(
∑ª¡
?
E_INFO
:
E_WARN
, 
L_SCANNER
, 
	`_
("Sˇ¬ög %s\n"), 
dú
);

691  
dú_ty≥s
 )

693 
ALL_MEDIA
:

694 
n
 = 
	`sˇndú
(
dú
, &
«mñi°
, 
fûãr_avp
, 
Æphas‹t
);

696 
TYPE_AUDIO
:

697 
n
 = 
	`sˇndú
(
dú
, &
«mñi°
, 
fûãr_a
, 
Æphas‹t
);

699 
TYPE_AUDIO
|
TYPE_VIDEO
:

700 
n
 = 
	`sˇndú
(
dú
, &
«mñi°
, 
fûãr_av
, 
Æphas‹t
);

702 
TYPE_AUDIO
|
TYPE_IMAGES
:

703 
n
 = 
	`sˇndú
(
dú
, &
«mñi°
, 
fûãr_≠
, 
Æphas‹t
);

705 
TYPE_VIDEO
:

706 
n
 = 
	`sˇndú
(
dú
, &
«mñi°
, 
fûãr_v
, 
Æphas‹t
);

708 
TYPE_VIDEO
|
TYPE_IMAGES
:

709 
n
 = 
	`sˇndú
(
dú
, &
«mñi°
, 
fûãr_vp
, 
Æphas‹t
);

711 
TYPE_IMAGES
:

712 
n
 = 
	`sˇndú
(
dú
, &
«mñi°
, 
fûãr_p
, 
Æphas‹t
);

715 
n
 = -1;

718 i‡(
n
 < 0) {

719 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Eº‹ sˇ¬ög %s\n", 
dú
);

723 if–!
∑ª¡
 )

725 
°¨tID
 = 
	`gë_√xt_avaûabÀ_id
("OBJECTS", 
BROWSEDIR_ID
);

728 
i
=0; i < 
n
; i++)

730 #i‡!
USE_FORK


731 if–
quôtög
 )

734 
ty≥
 = 
TYPE_UNKNOWN
;

735 
	`•rötf
(
fuŒ_∑th
, "%s/%s", 
dú
, 
«mñi°
[
i
]->
d_«me
);

736 
«me
 = 
	`esˇ≥_èg
(
«mñi°
[
i
]->
d_«me
, 1);

737 if–
«mñi°
[
i
]->
d_ty≥
 =
DT_DIR
 )

739 
ty≥
 = 
TYPE_DIR
;

741 if–
«mñi°
[
i
]->
d_ty≥
 =
DT_REG
 )

743 
ty≥
 = 
TYPE_FILE
;

747 
ty≥
 = 
	`ªsﬁve_unknown_ty≥
(
fuŒ_∑th
, 
dú_ty≥s
);

749 if–(
ty≥
 =
TYPE_DIR
Ë&& (
	`ac˚ss
(
fuŒ_∑th
, 
R_OK
|
X_OK
) == 0) )

751 
	`ö£π_dúe˘‹y
(
«me
, 
fuŒ_∑th
, 
BROWSEDIR_ID
, (
∑ª¡
 ?Ö¨ít:""), 
i
+
°¨tID
);

752 
	`•rötf
(
∑ª¡_id
, "%s$%X", (
∑ª¡
 ?Ö¨ít:""), 
i
+
°¨tID
);

753 
	`SˇnDúe˘‹y
(
fuŒ_∑th
, 
∑ª¡_id
, 
dú_ty≥s
);

755 if–
ty≥
 =
TYPE_FILE
 && (
	`ac˚ss
(
fuŒ_∑th
, 
R_OK
) == 0) )

757 if–
	`ö£π_fûe
(
«me
, 
fuŒ_∑th
, (
∑ª¡
 ?Ö¨ít:""), 
i
+
°¨tID
) == 0 )

758 
fûío
++;

760 
	`‰ì
(
«me
);

761 
	`‰ì
(
«mñi°
[
i
]);

763 
	`‰ì
(
«mñi°
);

764 if–!
∑ª¡
 )

766 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, 
	`_
("Sˇ¬ög %†föished (%Œu fûes)!\n"), 
dú
, 
fûío
);

768 
	}
}

771 
	$°¨t_sˇ¬î
()

773 
medü_dú_s
 *
medü_∑th
 = 
medü_dús
;

774 
«me
[
MAXPATHLEN
];

775 
now
;

777 
now
 = 
	`time
(
NULL
);

778 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 15) == -1)

779 
	`DPRINTF
(
E_WARN
, 
L_INOTIFY
, "FailedÅoÑeduce scannerÅhreadÖriority\n");

781 #ifde‡
READYNAS


782 
FILE
 *
Êag
 = 
	`f›í
("/ramfs/.upnp-av_scan", "w");

783 if–
Êag
 )

784 
	`f˛o£
(
Êag
);

786 
	`£éoˇÀ
(
LC_COLLATE
, "");

788 
	`av_ªgi°î_Æl
();

789 
	`av_log_£t_Àvñ
(
AV_LOG_PANIC
);

790  
medü_∑th
 )

792 
öt64_t
 
id
;

793 
	`°∫˝yt
(
«me
, 
medü_∑th
->
∑th
, (name));

794 
id
 = 
	`GëFﬁdîMëad©a
(
	`ba£«me
(
«me
), 
medü_∑th
->
∑th
, 
NULL
, NULL, 0);

796 
	`sql_exec
(
db
, "UPDATE DETAILS së TIMESTAMP = %d whîêID = %Œd", 
medü_∑th
->
ty≥s
, ()
id
);

797 
	`SˇnDúe˘‹y
(
medü_∑th
->
∑th
, 
NULL
, medü_∑th->
ty≥s
);

798 
	`sql_exec
(
db
, "INSERT i¡ÿSETTINGS vÆue†(%Q, %Q)", "medü_dú", 
medü_∑th
->
∑th
);

799 
medü_∑th
 = medü_∑th->
√xt
;

801 #ifde‡
READYNAS


802 if–
	`ac˚ss
("/ømfs/.ªsˇn_d⁄e", 
F_OK
) == 0 )

803 
	`sy°em
("/bin/sh /ramfs/.rescan_done");

804 
	`u∆ök
("/ramfs/.upnp-av_scan");

809 
	`sql_exec
(
db
, "create INDEX IDX_SEARCH_OPT ON OBJECTS(OBJECT_ID, CLASS, DETAIL_ID);");

811 if–
	`GETFLAG
(
NO_PLAYLIST_MASK
) )

813 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Playlist creation disabled\n");

817 
	`fûl_∂ayli°s
();

820 
now
 = 
	`time
(
NULL
) -Çow;

821 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "Inôü»fûêsˇ¿com∂ëed(%d)\n", 
DB_VERSION
, 
now
);

823 
	`sql_exec
(
db
, "¥agm®u£r_vîsi⁄ = %d;", 
DB_VERSION
);

824 
	}
}

	@scanner.h

24 #i‚de‡
__SCANNER_H__


25 
	#__SCANNER_H__


	)

28 
	#BROWSEDIR_ID
 "64"

	)

30 
	#MUSIC_ID
 "1"

	)

31 
	#MUSIC_ALL_ID
 "1$4"

	)

32 
	#MUSIC_GENRE_ID
 "1$5"

	)

33 
	#MUSIC_ARTIST_ID
 "1$6"

	)

34 
	#MUSIC_ALBUM_ID
 "1$7"

	)

35 
	#MUSIC_PLIST_ID
 "1$F"

	)

36 
	#MUSIC_DIR_ID
 "1$14"

	)

37 
	#MUSIC_CONTRIB_ARTIST_ID
 "1$100"

	)

38 
	#MUSIC_ALBUM_ARTIST_ID
 "1$107"

	)

39 
	#MUSIC_COMPOSER_ID
 "1$108"

	)

40 
	#MUSIC_RATING_ID
 "1$101"

	)

42 
	#VIDEO_ID
 "2"

	)

43 
	#VIDEO_ALL_ID
 "2$8"

	)

44 
	#VIDEO_GENRE_ID
 "2$9"

	)

45 
	#VIDEO_ACTOR_ID
 "2$A"

	)

46 
	#VIDEO_SERIES_ID
 "2$E"

	)

47 
	#VIDEO_PLIST_ID
 "2$10"

	)

48 
	#VIDEO_DIR_ID
 "2$15"

	)

49 
	#VIDEO_RATING_ID
 "2$200"

	)

51 
	#IMAGE_ID
 "3"

	)

52 
	#IMAGE_ALL_ID
 "3$B"

	)

53 
	#IMAGE_DATE_ID
 "3$C"

	)

54 
	#IMAGE_ALBUM_ID
 "3$D"

	)

55 
	#IMAGE_CAMERA_ID
 "3$D2"

56 
	#IMAGE_PLIST_ID
 "3$11"

	)

57 
	#IMAGE_DIR_ID
 "3$16"

	)

58 
	#IMAGE_RATING_ID
 "3$300"

	)

60 
vÆid_ˇche
;

63 
is_video
(c⁄° *
fûe
);

66 
is_audio
(c⁄° *
fûe
);

69 
is_image
(c⁄° *
fûe
);

71 
öt64_t


72 
gë_√xt_avaûabÀ_id
(c⁄° *
èbÀ
, c⁄° *
∑ª¡ID
);

75 
ö£π_dúe˘‹y
(c⁄° *
«me
, c⁄° *
∑th
, c⁄° *
ba£
, c⁄° *
∑ª¡ID
, 
obje˘ID
);

78 
ö£π_fûe
(*
«me
, c⁄° *
∑th
, c⁄° *
∑ª¡ID
, 
obje˘
);

81 
Cª©eD©aba£
();

84 
°¨t_sˇ¬î
();

	@scanner_sqlite.h

25 
	g¸óã_obje˘TabÀ_sqlôe
[] = "CREATE TABLE OBJECTS ("

34 
	g¸óã_dëaûTabÀ_sqlôe
[] = "CREATE TABLE DETAILS ("

59 
	g¸óã_ÆbumAπTabÀ_sqlôe
[] = "CREATE TABLE ALBUM_ART ("

64 
	g¸óã_ˇ±i⁄TabÀ_sqlôe
[] = "CREATE TABLE CAPTIONS ("

69 
	g¸óã_bookm¨kTabÀ_sqlôe
[] = "CREATE TABLE BOOKMARKS ("

74 
	g¸óã_∂ayli°TabÀ_sqlôe
[] = "CREATE TABLE PLAYLISTS ("

82 
	g¸óã_£âögsTabÀ_sqlôe
[] = "CREATE TABLE SETTINGS ("

	@sendfile.h

1 #i‡
deföed
(
HAVE_LINUX_SENDFILE_API
)

3 
	~<sys/£ndfûe.h
>

5 
	$sys_£ndfûe
(
sock
, 
£ndfd
, 
off_t
 *
off£t
, off_à
Àn
)

7  
	`£ndfûe
(
sock
, 
£ndfd
, 
off£t
, 
Àn
);

8 
	}
}

10 #ñi‡
deföed
(
HAVE_DARWIN_SENDFILE_API
)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/sockë.h
>

14 
	~<sys/uio.h
>

16 
	$sys_£ndfûe
(
sock
, 
£ndfd
, 
off_t
 *
off£t
, off_à
Àn
)

18 
ªt
;

20 
ªt
 = 
	`£ndfûe
(
£ndfd
, 
sock
, *
off£t
, &
Àn
, 
NULL
, 0);

21 *
off£t
 +
Àn
;

23  
ªt
;

24 
	}
}

26 #ñi‡
deföed
(
HAVE_FREEBSD_SENDFILE_API
)

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

30 
	~<sys/uio.h
>

32 
	$sys_£ndfûe
(
sock
, 
£ndfd
, 
off_t
 *
off£t
, off_à
Àn
)

34 
ªt
;

35 
size_t
 
nbyãs
 = 
Àn
;

37 
ªt
 = 
	`£ndfûe
(
£ndfd
, 
sock
, *
off£t
, 
nbyãs
, 
NULL
, &
Àn
, 
SF_MNOWAIT
);

38 *
off£t
 +
Àn
;

40  
ªt
;

41 
	}
}

45 
	~<î∫o.h
>

47 
	$sys_£ndfûe
(
sock
, 
£ndfd
, 
off_t
 *
off£t
, off_à
Àn
)

49 
î∫o
 = 
EINVAL
;

51 
	}
}

	@sql.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<uni°d.h
>

22 
	~"sql.h
"

23 
	~"u≤pglobÆv¨s.h
"

24 
	~"log.h
"

27 
	$sql_exec
(
sqlôe3
 *
db
, c⁄° *
fmt
, ...)

29 
ªt
;

30 *
îrMsg
 = 
NULL
;

31 *
sql
;

32 
va_li°
 
≠
;

35 
	`va_°¨t
(
≠
, 
fmt
);

37 
sql
 = 
	`sqlôe3_vm¥ötf
(
fmt
, 
≠
);

38 
ªt
 = 
	`sqlôe3_exec
(
db
, 
sql
, 0, 0, &
îrMsg
);

39 if–
ªt
 !
SQLITE_OK
 )

41 
	`DPRINTF
(
E_ERROR
, 
L_DB_SQL
, "SQL ERROR %d [%s]\n%s\n", 
ªt
, 
îrMsg
, 
sql
);

42 i‡(
îrMsg
)

43 
	`sqlôe3_‰ì
(
îrMsg
);

45 
	`sqlôe3_‰ì
(
sql
);

47  
ªt
;

48 
	}
}

51 
	$sql_gë_èbÀ
(
sqlôe3
 *
db
, c⁄° *
sql
, ***
∑zResu…
, *
≤Row
, *
≤Cﬁumn
)

53 
ªt
;

54 *
îrMsg
 = 
NULL
;

57 
ªt
 = 
	`sqlôe3_gë_èbÀ
(
db
, 
sql
, 
∑zResu…
, 
≤Row
, 
≤Cﬁumn
, &
îrMsg
);

58 if–
ªt
 !
SQLITE_OK
 )

60 
	`DPRINTF
(
E_ERROR
, 
L_DB_SQL
, "SQL ERROR %d [%s]\n%s\n", 
ªt
, 
îrMsg
, 
sql
);

61 i‡(
îrMsg
)

62 
	`sqlôe3_‰ì
(
îrMsg
);

65  
ªt
;

66 
	}
}

69 
	$sql_gë_öt_fõld
(
sqlôe3
 *
db
, c⁄° *
fmt
, ...)

71 
va_li°
 
≠
;

72 
cou¡î
, 
ªsu…
;

73 *
sql
;

74 
ªt
;

75 
sqlôe3_°mt
 *
°mt
;

77 
	`va_°¨t
(
≠
, 
fmt
);

79 
sql
 = 
	`sqlôe3_vm¥ötf
(
fmt
, 
≠
);

83 
	`sqlôe3_¥ï¨e_v2
(
db
, 
sql
, -1, &
°mt
, 
NULL
))

85 
SQLITE_OK
:

88 
	`DPRINTF
(
E_ERROR
, 
L_DB_SQL
, "¥ï¨êÁûed: %s\n%s\n", 
	`sqlôe3_îrmsg
(
db
), 
sql
);

89 
	`sqlôe3_‰ì
(
sql
);

93 
cou¡î
 = 0;

94 ((
ªsu…
 = 
	`sqlôe3_°ï
(
°mt
)Ë=
SQLITE_BUSY
 ||Ñesu… =
SQLITE_LOCKED
Ë&& 
cou¡î
 < 2;

95 
cou¡î
++) {

98 i‡(
ªsu…
 =
SQLITE_LOCKED
)

99 
	`¶ìp
(1);

102 
ªsu…
)

104 
SQLITE_DONE
:

106 
ªt
 = 0;

108 
SQLITE_ROW
:

109 i‡(
	`sqlôe3_cﬁumn_ty≥
(
°mt
, 0Ë=
SQLITE_NULL
)

111 
ªt
 = 0;

114 
ªt
 = 
	`sqlôe3_cﬁumn_öt
(
°mt
, 0);

117 
	`DPRINTF
(
E_WARN
, 
L_DB_SQL
, "%s: sã∞Áûed: %s\n%s\n", 
__func__
, 
	`sqlôe3_îrmsg
(
db
), 
sql
);

118 
ªt
 = -1;

122 
	`sqlôe3_‰ì
(
sql
);

123 
	`sqlôe3_föÆize
(
°mt
);

124  
ªt
;

125 
	}
}

128 
	$sql_gë_ãxt_fõld
(
sqlôe3
 *
db
, c⁄° *
fmt
, ...)

130 
va_li°
 
≠
;

131 
cou¡î
, 
ªsu…
, 
Àn
;

132 *
sql
;

133 *
°r
;

134 
sqlôe3_°mt
 *
°mt
;

136 
	`va_°¨t
(
≠
, 
fmt
);

138 i‡(
db
 =
NULL
)

140 
	`DPRINTF
(
E_WARN
, 
L_DB_SQL
, "db is NULL\n");

141  
NULL
;

144 
sql
 = 
	`sqlôe3_vm¥ötf
(
fmt
, 
≠
);

148 
	`sqlôe3_¥ï¨e_v2
(
db
, 
sql
, -1, &
°mt
, 
NULL
))

150 
SQLITE_OK
:

153 
	`DPRINTF
(
E_ERROR
, 
L_DB_SQL
, "¥ï¨êÁûed: %s\n%s\n", 
	`sqlôe3_îrmsg
(
db
), 
sql
);

154 
	`sqlôe3_‰ì
(
sql
);

155  
NULL
;

157 
	`sqlôe3_‰ì
(
sql
);

159 
cou¡î
 = 0;

160 ((
ªsu…
 = 
	`sqlôe3_°ï
(
°mt
)Ë=
SQLITE_BUSY
 ||Ñesu… =
SQLITE_LOCKED
Ë&& 
cou¡î
 < 2;

161 
cou¡î
++)

165 i‡(
ªsu…
 =
SQLITE_LOCKED
)

166 
	`¶ìp
(1);

169 
ªsu…
)

171 
SQLITE_DONE
:

173 
°r
 = 
NULL
;

176 
SQLITE_ROW
:

177 i‡(
	`sqlôe3_cﬁumn_ty≥
(
°mt
, 0Ë=
SQLITE_NULL
)

179 
°r
 = 
NULL
;

183 
Àn
 = 
	`sqlôe3_cﬁumn_byãs
(
°mt
, 0);

184 i‡((
°r
 = 
	`sqlôe3_mÆloc
(
Àn
 + 1)Ë=
NULL
)

186 
	`DPRINTF
(
E_ERROR
, 
L_DB_SQL
, "malloc failed\n");

190 
	`°∫˝y
(
°r
, (*)
	`sqlôe3_cﬁumn_ãxt
(
°mt
, 0), 
Àn
 + 1);

194 
	`DPRINTF
(
E_WARN
, 
L_DB_SQL
, "SQL sã∞Áûed: %s\n", 
	`sqlôe3_îrmsg
(
db
));

195 
°r
 = 
NULL
;

199 
	`sqlôe3_föÆize
(
°mt
);

200  
°r
;

201 
	}
}

204 
	$db_upgøde
(
sqlôe3
 *
db
)

206 
db_vîs
;

208 
db_vîs
 = 
	`sql_gë_öt_fõld
(
db
, "PRAGMA user_version");

210 i‡(
db_vîs
 =
DB_VERSION
)

212 i‡(
db_vîs
 > 
DB_VERSION
)

214 i‡(
db_vîs
 < 1)

216 i‡(
db_vîs
 < 9)

218 
	`sql_exec
(
db
, "PRAGMA u£r_vîsi⁄ = %d", 
DB_VERSION
);

221 
	}
}

	@sql.h

24 #i‚de‡
__SQL_H__


25 
	#__SQL_H__


	)

27 
	~<sqlôe3.h
>

29 #i‚de‡
HAVE_SQLITE3_MALLOC


30 
	#sqlôe3_mÆloc
(
size
Ë
	`sqlôe3_m¥ötf
("%*s", size, "")

	)

32 #i‚de‡
HAVE_SQLITE3_PREPARE_V2


33 
	#sqlôe3_¥ï¨e_v2
 
sqlôe3_¥ï¨e


	)

37 
sql_exec
(
sqlôe3
 *
db
, c⁄° *
fmt
, ...);

40 
sql_gë_èbÀ
(
sqlôe3
 *
db
, c⁄° *
zSql
, ***
∑zResu…
, *
≤Row
, *
≤Cﬁumn
);

43 
sql_gë_öt_fõld
(
sqlôe3
 *
db
, c⁄° *
fmt
, ...);

46 
sql_gë_ãxt_fõld
(
sqlôe3
 *
db
, c⁄° *
fmt
, ...);

49 
db_upgøde
(
sqlôe3
 *
db
);

	@tagutils/misc.c

22 
	~"c⁄fig.h
"

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 #ifde‡
HAVE_MACHINE_ENDIAN_H


26 
	~<machöe/ídün.h
>

28 
	~<ídün.h
>

31 
	~"misc.h
"

33 
ölöe
 
__u16


34 
	$À16_to_˝u
(
__u16
 
À16
)

36 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


37  
À16
;

39 
__u16
 
be16
 = ((
À16
 << 8) & 0xff00) | ((le16 >> 8) & 0x00ff);

40  
be16
;

42 
	}
}

44 
ölöe
 
__u32


45 
	$À32_to_˝u
(
__u32
 
À32
)

47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48  
À32
;

50 
__u32
 
be32
 =

51 ((
À32
 << 24) & 0xff000000) |

52 ((
À32
 << 8) & 0x00ff0000) |

53 ((
À32
 >> 8) & 0x0000ff00) |

54 ((
À32
 >> 24) & 0x000000ff);

55  
be32
;

57 
	}
}

59 
ölöe
 
__u64


60 
	$À64_to_˝u
(
__u64
 
À64
)

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63  
À64
;

65 
__u64
 
be64
;

66 
__u8
 *
À64p
 = (__u8*)&
À64
;

67 
__u8
 *
be64p
 = (__u8*)&
be64
;

68 
be64p
[0] = 
À64p
[7];

69 
be64p
[1] = 
À64p
[6];

70 
be64p
[2] = 
À64p
[5];

71 
be64p
[3] = 
À64p
[4];

72 
be64p
[4] = 
À64p
[3];

73 
be64p
[5] = 
À64p
[2];

74 
be64p
[6] = 
À64p
[1];

75 
be64p
[7] = 
À64p
[0];

76  
be64
;

78 
	}
}

80 
ölöe
 
__u8


81 
	$fgë_byã
(
FILE
 *
Â
)

83 
__u8
 
d
;

85 i‡(!
	`‰ód
(&
d
, (d), 1, 
Â
))

87  
d
;

88 
	}
}

90 
ölöe
 
__u16


91 
	$fgë_À16
(
FILE
 *
Â
)

93 
__u16
 
d
;

95 i‡(!
	`‰ód
(&
d
, (d), 1, 
Â
))

97 
d
 = 
	`À16_to_˝u
(d);

98  
d
;

99 
	}
}

101 
ölöe
 
__u32


102 
	$fgë_À32
(
FILE
 *
Â
)

104 
__u32
 
d
;

106 i‡(!
	`‰ód
(&
d
, (d), 1, 
Â
))

108 
d
 = 
	`À32_to_˝u
(d);

109  
d
;

110 
	}
}

112 
ölöe
 
__u32


113 
	$˝u_to_be32
(
__u32
 
˝u32
)

115 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


116 
__u32
 
be32
 =

117 ((
˝u32
 << 24) & 0xff000000) |

118 ((
˝u32
 << 8) & 0x00ff0000) |

119 ((
˝u32
 >> 8) & 0x0000ff00) |

120 ((
˝u32
 >> 24) & 0x000000ff);

121  
be32
;

123  
˝u32
;

125 
	}
}

	@tagutils/misc.h

22 #i‚de‡
_SCANNER_MISC_H


23 
	#_SCANNER_MISC_H


	)

25 
	t__u8
;

26 sig√d 
	t__s8
;

27 
	t__u16
;

28 sig√d 
	t__s16
;

29 
	t__u32
;

30 sig√d 
	t__s32
;

31 #i‡
__WORDSIZE
 == 64

32 
	t__u64
;

33 sig√d 
	t__s64
;

35 
	t__u64
;

36 sig√d 
	t__s64
;

40 
ölöe
 
__u16
 
À16_to_˝u
(__u16 
À16
);

41 
ölöe
 
__u32
 
À32_to_˝u
(__u32 
À32
);

42 
ölöe
 
__u64
 
À64_to_˝u
(__u64 
À64
);

43 
ölöe
 
__u8
 
fgë_byã
(
FILE
 *
Â
);

44 
ölöe
 
__u16
 
fgë_À16
(
FILE
 *
Â
);

45 
ölöe
 
__u32
 
fgë_À32
(
FILE
 *
Â
);

47 
ölöe
 
__u32
 
˝u_to_be32
(__u32 
˝u32
);

49 * 
sha1_hex
(*
key
);

	@tagutils/tagutils-aac.c

30 
	$_Øc_föd©om
(
FILE
 *
fö
, 
max_off£t
, *
which_©om
, *
©om_size
)

32 
cuºít_off£t
 = 0;

33 
size
;

34 
©om
[4];

36 
cuºít_off£t
 < 
max_off£t
)

38 if(
	`‰ód
((*)&
size
, 1, (), 
fö
) != ())

41 
size
 = 
	`¡ohl
(size);

43 if(
size
 <= 7)

46 if(
	`‰ód
(
©om
, 1, 4, 
fö
) != 4)

49 if(
	`°∫ˇ£cmp
(
©om
, 
which_©om
, 4) == 0)

51 *
©om_size
 = 
size
;

52  
cuºít_off£t
;

55 
	`f£ek
(
fö
, 
size
 - 8, 
SEEK_CUR
);

56 
cuºít_off£t
 +
size
;

60 
	}
}

64 
	$_gë_Ø˘ags
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
)

66 
FILE
 *
fö
;

67 
©om_off£t
;

68 
©om_Àngth
;

70 
cuºít_off£t
 = 0;

71 
cuºít_size
;

72 
cuºít_©om
[4];

73 *
cuºít_d©a
;

74 
gíª
;

75 
Àn
;

77 if(!(
fö
 = 
	`f›í
(
fûe
, "rb")))

79 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "C™nŸ o≥¿fûê%†f‹Ñódög\n", 
fûe
);

83 
	`f£ek
(
fö
, 0, 
SEEK_SET
);

85 
©om_off£t
 = 
	`_Øc_lookf‹©om
(
fö
, "moov:udè:mëa:û°", &
©om_Àngth
);

86 if(
©om_off£t
 != -1)

88 
cuºít_off£t
 < 
©om_Àngth
)

90 if(
	`‰ód
((*)&
cuºít_size
, 1, (), 
fö
) != ())

93 
cuºít_size
 = 
	`¡ohl
(current_size);

95 if(
cuºít_size
 <= 7 || current_size > 1<<24)

98 if(
	`‰ód
(
cuºít_©om
, 1, 4, 
fö
) != 4)

101 
Àn
 = 
cuºít_size
 - 7;

102 if(
Àn
 < 22)

103 
Àn
 = 22;

105 
cuºít_d©a
 = (*)
	`mÆloc
(
Àn
);

106 
	`mem£t
(
cuºít_d©a
, 0x00, 
Àn
);

108 if(
	`‰ód
(
cuºít_d©a
, 1, 
cuºít_size
 - 8, 
fö
) != current_size - 8)

111 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "nam", 4))

112 
ps⁄g
->
tôÀ
 = 
	`°rdup
((*)&
cuºít_d©a
[16]);

113 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "ART", 4) ||

114 !
	`memcmp
(
cuºít_©om
, "\xA9" "art", 4))

115 
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
] = 
	`°rdup
((*)&
cuºít_d©a
[16]);

116 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "alb", 4))

117 
ps⁄g
->
Æbum
 = 
	`°rdup
((*)&
cuºít_d©a
[16]);

118 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "cmt", 4))

119 
ps⁄g
->
commít
 = 
	`°rdup
((*)&
cuºít_d©a
[16]);

120 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "dir", 4))

121 
ps⁄g
->
c⁄åibut‹
[
ROLE_CONDUCTOR
] = 
	`°rdup
((*)&
cuºít_d©a
[16]);

122 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "wrt", 4))

123 
ps⁄g
->
c⁄åibut‹
[
ROLE_COMPOSER
] = 
	`°rdup
((*)&
cuºít_d©a
[16]);

124 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "grp", 4))

125 
ps⁄g
->
groupög
 = 
	`°rdup
((*)&
cuºít_d©a
[16]);

126 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "gen", 4))

127 
ps⁄g
->
gíª
 = 
	`°rdup
((*)&
cuºít_d©a
[16]);

128 if(!
	`memcmp
(
cuºít_©om
, "\xA9" "day", 4))

129 
ps⁄g
->
yór
 = 
	`©oi
((*)&
cuºít_d©a
[16]);

130 if(!
	`memcmp
(
cuºít_©om
, "tmpo", 4))

131 
ps⁄g
->
bpm
 = (
cuºít_d©a
[16] << 8) | current_data[17];

132 if(!
	`memcmp
(
cuºít_©om
, "trkn", 4))

134 
ps⁄g
->
åack
 = (
cuºít_d©a
[18] << 8) | current_data[19];

135 
ps⁄g
->
tŸÆ_åacks
 = (
cuºít_d©a
[20] << 8) | current_data[21];

137 if(!
	`memcmp
(
cuºít_©om
, "disk", 4))

139 
ps⁄g
->
disc
 = (
cuºít_d©a
[18] << 8) | current_data[19];

140 
ps⁄g
->
tŸÆ_discs
 = (
cuºít_d©a
[20] << 8) | current_data[21];

142 if(!
	`memcmp
(
cuºít_©om
, "gnre", 4))

144 
gíª
 = 
cuºít_d©a
[17] - 1;

145 if((
gíª
 < 0Ë|| (gíª > 
WINAMP_GENRE_UNKNOWN
))

146 
gíª
 = 
WINAMP_GENRE_UNKNOWN
;

147 
ps⁄g
->
gíª
 = 
	`°rdup
(
wöamp_gíª
[genre]);

149 if(!
	`memcmp
(
cuºít_©om
, "cpil", 4))

151 
ps⁄g
->
compû©i⁄
 = 
cuºít_d©a
[16];

153 if(!
	`memcmp
(
cuºít_©om
, "covr", 4))

155 
ps⁄g
->
image_size
 = 
cuºít_size
 - 8 - 16;

156 if((
ps⁄g
->
image
 = 
	`mÆloc
’s⁄g->
image_size
)))

157 
	`mem˝y
(
ps⁄g
->
image
, 
cuºít_d©a
+16,Ös⁄g->
image_size
);

159 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Ouào‡mem‹y [%s]\n", 
fûe
);

162 
	`‰ì
(
cuºít_d©a
);

163 
cuºít_off£t
 +
cuºít_size
;

167 
	`f˛o£
(
fö
);

169 if(
©om_off£t
 == -1)

173 
	}
}

176 
off_t


177 
	$_Øc_lookf‹©om
(
FILE
 *
Øc_Â
, *
©om_∑th
, *
©om_Àngth
)

179 
©om_off£t
;

180 
off_t
 
fûe_size
;

181 *
cur_p
, *
íd_p
;

182 
©om_«me
[5];

184 
	`f£ek
(
Øc_Â
, 0, 
SEEK_END
);

185 
fûe_size
 = 
	`·ñl
(
Øc_Â
);

186 
	`ªwöd
(
Øc_Â
);

188 
íd_p
 = 
©om_∑th
;

189 *
íd_p
 != '\0')

191 
íd_p
++;

193 
©om_«me
[4] = '\0';

194 
cur_p
 = 
©om_∑th
;

196 
cur_p
)

198 if((
íd_p
 - 
cur_p
) < 4)

202 
	`°∫˝y
(
©om_«me
, 
cur_p
, 4);

203 
©om_off£t
 = 
	`_Øc_föd©om
(
Øc_Â
, 
fûe_size
, 
©om_«me
, (*)
©om_Àngth
);

204 if(
©om_off£t
 == -1)

208 
cur_p
 = 
	`°rchr
(cur_p, ':');

209 if(
cur_p
 !
NULL
)

211 
cur_p
++;

213 if(!
	`°rcmp
(
©om_«me
, "meta"))

215 
	`f£ek
(
Øc_Â
, 4, 
SEEK_CUR
);

217 if(!
	`°rcmp
(
©om_«me
, "stsd"))

219 
	`f£ek
(
Øc_Â
, 8, 
SEEK_CUR
);

221 if(!
	`°rcmp
(
©om_«me
, "mp4a"))

223 
	`f£ek
(
Øc_Â
, 28, 
SEEK_CUR
);

229  
	`·ñl
(
Øc_Â
) - 8;

230 
	}
}

233 
	$_Øc_check_exãnded_des¸ùt‹
(
FILE
 *
öfûe
)

235 
i
;

236 
buf
[3];

238 if–!
	`‰ód
((*)&
buf
, 3, 1, 
öfûe
) )

240  
i
=0; i<3; i++ )

242 if–(
buf
[
i
] != 0x80) &&

243 (
buf
[
i
] != 0x81) &&

244 (
buf
[
i
] != 0xFE) )

246 
	`f£ek
(
öfûe
, -3, 
SEEK_CUR
);

252 
	}
}

256 
	$_gë_Øcfûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
)

258 
FILE
 *
öfûe
;

259 
©om_off£t
;

260 
©om_Àngth
;

261 
ßm∂e_size
;

262 
ßm∂es
;

263 
bôøã
;

264 
off_t
 
fûe_size
;

265 
ms
;

266 
buf„r
[2];

267 
Øc_obje˘_ty≥_t
 
¥ofûe_id
 = 0;

269 
ps⁄g
->
vbr_sˇÀ
 = -1;

270 
ps⁄g
->
ch™√ls
 = 2;

272 
öfûe
 = 
	`f›í
(
fûe
, "rb");

273 if(!
öfûe
)

275 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "CouldÇŸ o≥¿%†f‹Ñódög\n", 
fûe
);

279 
	`f£ek
(
öfûe
, 0, 
SEEK_END
);

280 
fûe_size
 = 
	`·ñl
(
öfûe
);

281 
	`f£ek
(
öfûe
, 0, 
SEEK_SET
);

284 
©om_off£t
 = 
	`_Øc_lookf‹©om
(
öfûe
, "moov:mvhd", (*)&
©om_Àngth
);

285 if(
©om_off£t
 != -1)

287 
	`f£ek
(
öfûe
, 12, 
SEEK_CUR
);

288 if(!
	`‰ód
((*)&
ßm∂e_size
, 1, (), 
öfûe
) ||

289 !
	`‰ód
((*)&
ßm∂es
, 1, (), 
öfûe
))

291 
	`f˛o£
(
öfûe
);

295 
ßm∂e_size
 = 
	`¡ohl
(sample_size);

296 
ßm∂es
 = 
	`¡ohl
(samples);

299 
ms
 = 1000;

300 (
ms
 > 9Ë&& (!(
ßm∂e_size
 % 10)))

302 
ßm∂e_size
 /= 10;

303 
ms
 /= 10;

307 
ps⁄g
->
s⁄g_Àngth
 = ()((
ßm∂es
 * 
ms
Ë/ 
ßm∂e_size
);

310 
ps⁄g
->
bôøã
 = 0;

313 
©om_off£t
 = 
	`_Øc_lookf‹©om
(
öfûe
, "moov:åak:mdü:möf:°bl:°sd:Æac", (*)&
©om_Àngth
);

314 if(
©om_off£t
 != -1) {

315 
	`f£ek
(
öfûe
, 
©om_off£t
 + 32, 
SEEK_SET
);

316 i‡(
	`‰ód
(
buf„r
, (), 2, 
öfûe
) == 2)

317 
ps⁄g
->
ßm∂î©e
 = (
buf„r
[0] << 8) | (buffer[1]);

318 
bad_esds
;

322 
©om_off£t
 = 
	`_Øc_lookf‹©om
(
öfûe
, "moov:åak:mdü:möf:°bl:°sd:mp4a", (*)&
©om_Àngth
);

323 if(
©om_off£t
 != -1)

325 
	`f£ek
(
öfûe
, 
©om_off£t
 + 32, 
SEEK_SET
);

326 if(
	`‰ód
(
buf„r
, (), 2, 
öfûe
) == 2)

327 
ps⁄g
->
ßm∂î©e
 = (
buf„r
[0] << 8) | (buffer[1]);

329 
	`f£ek
(
öfûe
, 2, 
SEEK_CUR
);

332 
©om_off£t
 = 
	`_Øc_föd©om
(
öfûe
, 
©om_Àngth
 - (
	`·ñl
(infile) -átom_offset), "esds", &atom_length);

334 if(
©om_off£t
 != -1)

337 
	`f£ek
(
öfûe
, 
©om_off£t
 + 4, 
SEEK_CUR
);

339 if–!
	`‰ód
((*)&
buf„r
, 1, 1, 
öfûe
Ë|| (buf„r[0] !0x03Ë|| (
	`_Øc_check_exãnded_des¸ùt‹
(infile) != 0) )

340 
bad_esds
;

341 
	`f£ek
(
öfûe
, 4, 
SEEK_CUR
);

342 if–!
	`‰ód
((*)&
buf„r
, 1, 1, 
öfûe
Ë|| (buf„r[0] !0x04Ë|| (
	`_Øc_check_exãnded_des¸ùt‹
(infile) != 0) )

343 
bad_esds
;

344 
	`f£ek
(
öfûe
, 10, 
SEEK_CUR
);

345 if(
	`‰ód
((*)&
bôøã
, (), 1, 
öfûe
))

346 
ps⁄g
->
bôøã
 = 
	`¡ohl
(bitrate);

347 if–!
	`‰ód
((*)&
buf„r
, 1, 1, 
öfûe
Ë|| (buf„r[0] !0x05Ë|| (
	`_Øc_check_exãnded_des¸ùt‹
(infile) != 0) )

348 
bad_esds
;

349 
	`f£ek
(
öfûe
, 1, 
SEEK_CUR
);

350 if(
	`‰ód
((*)&
buf„r
, 2, 1, 
öfûe
))

352 
¥ofûe_id
 = (
buf„r
[0] >> 3);

354 
ßm∂es
 = ((
buf„r
[1] >> 3) & 0xF);

355 
ps⁄g
->
ch™√ls
 = (
ßm∂es
 == 7 ? 8 : samples);

359 
bad_esds
:

361 
©om_off£t
 = 
	`_Øc_lookf‹©om
(
öfûe
, "md©", (*)&
©om_Àngth
);

362 
ps⁄g
->
audio_size
 = 
©om_Àngth
 - 8;

363 
ps⁄g
->
audio_off£t
 = 
©om_off£t
;

365 if(!
ps⁄g
->
bôøã
)

369 if((
©om_off£t
 !-1Ë&& (
ps⁄g
->
s⁄g_Àngth
))

371 
ps⁄g
->
bôøã
 = 
©om_Àngth
 * 1000 /Ös⁄g->
s⁄g_Àngth
 / 128;

374 if((
ps⁄g
->
bôøã
 < 16000Ë&& (ps⁄g->
s⁄g_Àngth
 > 1000))

376 
ps⁄g
->
bôøã
 = (
fûe_size
 * 8Ë/ (ps⁄g->
s⁄g_Àngth
 / 1000);

381  
¥ofûe_id
 )

383 
AAC_LC
:

384 
AAC_LC_ER
:

385 if–
ps⁄g
->
ßm∂î©e
 < 8000 ||Ösong->samplerate > 48000 )

387 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unsupported AAC: sampleÑate isÇot 8000 < %d < 48000\n",

388 
ps⁄g
->
ßm∂î©e
);

392 if–
ps⁄g
->
ch™√ls
 <2 &&Ös⁄g->
bôøã
 <= 320000 )

393 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "AAC_ISO_320");

394 if–
ps⁄g
->
ch™√ls
 <2 &&Ös⁄g->
bôøã
 <= 576000 )

395 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "AAC_ISO");

396 if–
ps⁄g
->
ch™√ls
 <6 &&Ös⁄g->
bôøã
 <= 1440000 )

397 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "AAC_MULT5_ISO");

399 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unhandled AAC: %d channels, %d bitrate\n",

400 
ps⁄g
->
ch™√ls
,Ös⁄g->
bôøã
);

403 
	`DPRINTF
(
E_DEBUG
, 
L_METADATA
, "Unh™dÀd AACÅy≥ %d [%s]\n", 
¥ofûe_id
, 
	`ba£«me
(
fûe
));

407 
	`f˛o£
(
öfûe
);

409 
	}
}

	@tagutils/tagutils-aac.h

23 
_gë_Ø˘ags
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

24 
_gë_Øcfûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

25 
off_t
 
_Øc_lookf‹©om
(
FILE
 *
Øc_Â
, *
©om_∑th
, *
©om_Àngth
);

	@tagutils/tagutils-asf.c

24 
	$_asf_ªad_fûe_¥›îtõs
(
FILE
 *
Â
, 
asf_fûe_¥›îtõs_t
 *
p
, 
__u32
 
size
)

26 
Àn
;

28 
Àn
 = (*
p
Ë- 
	`off£tof
(
asf_fûe_¥›îtõs_t
, 
FûeID
);

29 if(
size
 < 
Àn
)

32 
	`mem£t
(
p
, 0, (*p));

33 
p
->
ID
 = 
ASF_FûePr›îtõs
;

34 
p
->
Size
 = 
size
;

36 if(
Àn
 !
	`‰ód
(&
p
->
FûeID
, 1,Üí, 
Â
))

40 
	}
}

43 
	$_pick_d a_¥ofûe
(
s⁄g_mëad©a
 *
ps⁄g
, 
uöt16_t
 
f‹m©
)

46  
	`À16_to_˝u
(
f‹m©
) )

48 
WMA
:

49 if–
ps⁄g
->
max_bôøã
 < 193000 )

50 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "WMABASE");

51 if–
ps⁄g
->
max_bôøã
 < 385000 )

52 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "WMAFULL");

54 
WMAPRO
:

55 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "WMAPRO");

57 
WMALSL
:

58 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "WMALSL%s",

59 
ps⁄g
->
ch™√ls
 > 2 ? "_MULT5" : "");

63 
	}
}

66 
	$_asf_ªad_audio_°ªam
(
FILE
 *
Â
, 
s⁄g_mëad©a
 *
ps⁄g
, 
size
)

68 
asf_audio_°ªam_t
 
s
;

69 
Àn
;

71 
Àn
 = (
s
Ë- (s.
Hdr
);

72 if(
Àn
 > 
size
)

73 
Àn
 = 
size
;

75 if(
Àn
 !
	`‰ód
(&
s
.
wfx
, 1,Üí, 
Â
))

78 
ps⁄g
->
ch™√ls
 = 
	`À16_to_˝u
(
s
.
wfx
.
nCh™√ls
);

79 
ps⁄g
->
bôøã
 = 
	`À32_to_˝u
(
s
.
wfx
.
nAvgByãsPîSec
) * 8;

80 
ps⁄g
->
ßm∂î©e
 = 
	`À32_to_˝u
(
s
.
wfx
.
nSam∂esPîSec
);

81 i‡(!
ps⁄g
->
max_bôøã
)

82 
ps⁄g
->
max_bôøã
 =Ös⁄g->
bôøã
;

83 
	`_pick_d a_¥ofûe
(
ps⁄g
, 
s
.
wfx
.
wF‹m©Tag
);

86 
	}
}

89 
	$_asf_ªad_medü_°ªam
(
FILE
 *
Â
, 
s⁄g_mëad©a
 *
ps⁄g
, 
__u32
 
size
)

91 
asf_medü_°ªam_t
 
s
;

92 
avi_audio_f‹m©_t
 
wfx
;

93 
Àn
;

95 
Àn
 = (
s
Ë- (s.
Hdr
);

96 if(
Àn
 > 
size
)

97 
Àn
 = 
size
;

99 if(
Àn
 !
	`‰ód
(&
s
.
Maj‹Ty≥
, 1,Üí, 
Â
))

102 if(
	`IsEquÆGUID
(&
s
.
Maj‹Ty≥
, &
ASF_MedüTy≥Audio
) &&

103 
	`IsEquÆGUID
(&
s
.
F‹m©Ty≥
, &
ASF_F‹m©Ty≥Wave
Ë&& s.
F‹m©Size
 >(
wfx
))

106 if((
wfx
Ë!
	`‰ód
(&wfx, 1, (wfx), 
Â
))

109 
ps⁄g
->
ch™√ls
 = 
	`À16_to_˝u
(
wfx
.
nCh™√ls
);

110 
ps⁄g
->
bôøã
 = 
	`À32_to_˝u
(
wfx
.
nAvgByãsPîSec
) * 8;

111 
ps⁄g
->
ßm∂î©e
 = 
	`À32_to_˝u
(
wfx
.
nSam∂esPîSec
);

112 i‡(!
ps⁄g
->
max_bôøã
)

113 
ps⁄g
->
max_bôøã
 =Ös⁄g->
bôøã
;

114 
	`_pick_d a_¥ofûe
(
ps⁄g
, 
wfx
.
wF‹m©Tag
);

118 
	}
}

121 
	$_asf_ªad_°ªam_obje˘
(
FILE
 *
Â
, 
s⁄g_mëad©a
 *
ps⁄g
, 
__u32
 
size
)

123 
asf_°ªam_obje˘_t
 
s
;

124 
Àn
;

126 
Àn
 = (
s
Ë- (
asf_obje˘_t
);

127 if(
size
 < 
Àn
)

130 if(
Àn
 !
	`‰ód
(&
s
.
SåómTy≥
, 1,Üí, 
Â
))

133 if(
	`IsEquÆGUID
(&
s
.
SåómTy≥
, &
ASF_AudioSåóm
))

134 
	`_asf_ªad_audio_°ªam
(
Â
, 
ps⁄g
, 
s
.
Ty≥S≥cificSize
);

135 if(
	`IsEquÆGUID
(&
s
.
SåómTy≥
, &
ASF_SåómBuf„rSåóm
))

136 
	`_asf_ªad_medü_°ªam
(
Â
, 
ps⁄g
, 
s
.
Ty≥S≥cificSize
);

137 if(!
	`IsEquÆGUID
(&
s
.
SåómTy≥
, &
ASF_VideoSåóm
))

139 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Unknownásf streamÅype.\n");

143 
	}
}

146 
	$_asf_ªad_exãnded_°ªam_obje˘
(
FILE
 *
Â
, 
s⁄g_mëad©a
 *
ps⁄g
, 
__u32
 
size
)

148 
i
, 
Àn
;

149 
off
;

150 
asf_obje˘_t
 
tmp
;

151 
asf_exãnded_°ªam_obje˘_t
 
xs
;

152 
asf_°ªam_«me_t
 
nm
;

153 
asf_∑ylﬂd_exãnsi⁄_t
 
≥
;

155 if(
size
 < (
asf_exãnded_°ªam_obje˘_t
))

158 
Àn
 = (
xs
Ë- 
	`off£tof
(
asf_exãnded_°ªam_obje˘_t
, 
SèπTime
);

159 if(
Àn
 !
	`‰ód
(&
xs
.
SèπTime
, 1,Üí, 
Â
))

161 
off
 = (
xs
);

163 
i
 = 0; i < 
xs
.
SåómNameCou¡
; i++)

165 if(
off
 + (
nm
Ë> 
size
)

167 if((
nm
Ë!
	`‰ód
(&nm, 1, “m), 
Â
))

169 
off
 +(
nm
);

170 if(
off
 + 
nm
.
Lígth
 > (
asf_exãnded_°ªam_obje˘_t
))

172 if(
nm
.
Lígth
 > 0)

173 
	`f£ek
(
Â
, 
nm
.
Lígth
, 
SEEK_CUR
);

174 
off
 +
nm
.
Lígth
;

177 
i
 = 0; i < 
xs
.
PaylﬂdExãnsi⁄Sy°emCou¡
; i++)

179 if(
off
 + (
≥
Ë> 
size
)

181 if((
≥
Ë!
	`‰ód
(&≥, 1, ’e), 
Â
))

183 
off
 +(
≥
);

184 if(
≥
.
InfoLígth
 > 0)

185 
	`f£ek
(
Â
, 
≥
.
InfoLígth
, 
SEEK_CUR
);

186 
off
 +
≥
.
InfoLígth
;

189 if(
off
 < 
size
)

191 if((
tmp
Ë!
	`‰ód
(&tmp, 1, —mp), 
Â
))

193 if(
	`IsEquÆGUID
(&
tmp
.
ID
, &
ASF_SåómHódî
))

194 
	`_asf_ªad_°ªam_obje˘
(
Â
, 
ps⁄g
, 
tmp
.
Size
);

198 
	}
}

201 
	$_asf_ªad_hódî_exãnsi⁄
(
FILE
 *
Â
, 
s⁄g_mëad©a
 *
ps⁄g
, 
__u32
 
size
)

203 
off_t
 
pos
;

204 
off
;

205 
asf_hódî_exãnsi⁄_t
 
ext
;

206 
asf_obje˘_t
 
tmp
;

208 if(
size
 < (
asf_hódî_exãnsi⁄_t
))

211 if((
ext
.
Re£rved1
Ë!
	`‰ód
(&ext.Re£rved1, 1, ”xt.Re£rved1), 
Â
))

213 
ext
.
Re£rved2
 = 
	`fgë_À16
(
Â
);

214 
ext
.
D©aSize
 = 
	`fgë_À32
(
Â
);

216 
pos
 = 
	`·ñl
(
Â
);

217 
off
 = 0;

218 
off
 < 
ext
.
D©aSize
)

220 if((
asf_hódî_exãnsi⁄_t
Ë+ 
off
 > 
size
)

222 if((
tmp
Ë!
	`‰ód
(&tmp, 1, —mp), 
Â
))

224 if(
off
 + 
tmp
.
Size
 > 
ext
.
D©aSize
)

226 if(
	`IsEquÆGUID
(&
tmp
.
ID
, &
ASF_ExãndedSåómPr›îtõsObje˘
))

227 
	`_asf_ªad_exãnded_°ªam_obje˘
(
Â
, 
ps⁄g
, 
tmp
.
Size
);

229 
off
 +
tmp
.
Size
;

230 
	`f£ek
(
Â
, 
pos
 + 
off
, 
SEEK_SET
);

234 
	}
}

237 
	$_asf_lﬂd_°rög
(
FILE
 *
Â
, 
ty≥
, 
size
, *
buf
, 
Àn
)

239 
d©a
[2048];

240 
__u16
 
wc
;

241 
i
, 
j
;

242 
__s32
 *
wd32
;

243 
__s64
 *
wd64
;

244 
__s16
 *
wd16
;

246 
i
 = 0;

247 if(
size
 && (sizê<(
d©a
)Ë&& (sizê=
	`‰ód
(d©a, 1, size, 
Â
)))

250 
ty≥
)

252 
ASF_VT_UNICODE
:

253 
j
 = 0; j < 
size
; j += 2)

255 
wd16
 = (
__s16
 *Ë&
d©a
[
j
];

256 
wc
 = (
__u16
)*
wd16
;

257 
i
 +
	`utf16À_to_utf8
(&
buf
[i], 
Àn
 - i, 
wc
);

260 
ASF_VT_BYTEARRAY
:

261 
i
 = 0; i < 
size
; i++)

263 if(
i
 + 1 >
Àn
)

265 
buf
[
i
] = 
d©a
[i];

268 
ASF_VT_BOOL
:

269 
ASF_VT_DWORD
:

270 if(
size
 >= 4)

272 
wd32
 = (
__s32
 *Ë&
d©a
[0];

273 
i
 = 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
	`À32_to_˝u
(*
wd32
));

276 
ASF_VT_QWORD
:

277 if(
size
 >= 8)

279 
wd64
 = (
__s64
 *Ë&
d©a
[0];

280 #i‡
__WORDSIZE
 == 64

281 
i
 = 
	`¢¥ötf
(
buf
, 
Àn
, "%ld", 
	`À64_to_˝u
(*
wd64
));

283 
i
 = 
	`¢¥ötf
(
buf
, 
Àn
, "%Œd", 
	`À64_to_˝u
(*
wd64
));

287 
ASF_VT_WORD
:

288 if(
size
 >= 2)

290 
wd16
 = (
__s16
 *Ë&
d©a
[0];

291 
i
 = 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
	`À16_to_˝u
(*
wd16
));

296 
size
 = 0;

298 
	`f£ek
(
Â
, 
size
, 
SEEK_CUR
);

300 
buf
[
i
] = 0;

301  
i
;

302 
	}
}

305 
	$_asf_lﬂd_pi˘uª
(
FILE
 *
Â
, 
size
, *
bm
, *
bm_size
)

307 
i
;

308 
buf
[256];

317 
pic_ty≥
;

318 
pic_size
;

320 
pic_ty≥
 = 
	`fgë_byã
(
Â
); 
size
 -= 1;

321 
pic_size
 = 
	`fgë_À32
(
Â
); 
size
 -= 4;

323 
	`f£ek
(
Â
, 5, 
SEEK_CUR
);

324 
size
 -= 5;

326 
i
 = 0; i < (
buf
) - 1; i++)

328 
buf
[
i
] = 
	`fgë_À16
(
Â
); 
size
 -= 2;

329 if(!
buf
[
i
])

332 
buf
[
i
] = '\0';

333 if(
i
 =(
buf
) - 1)

335 
	`fgë_À16
(
Â
))

336 
size
 -= 2;

339 if(!
	`°rˇ£cmp
(
buf
, "image/jpeg") ||

340 !
	`°rˇ£cmp
(
buf
, "image/jpg") ||

341 !
	`°rˇ£cmp
(
buf
, "image/peg"))

344 0 !
	`fgë_À16
(
Â
))

345 
size
 -= 2;

347 if(
size
 > 0)

349 if(!(
bm
 = 
	`mÆloc
(
size
)))

351 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Couldn'àÆloˇã %d byãs\n", 
size
);

355 *
bm_size
 = 
size
;

356 if(
size
 > *
bm_size
 || 
	`‰ód
(
bm
, 1, size, 
Â
) != size)

358 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Ovîru¿%d byã†ªquúed\n", 
size
);

359 
	`‰ì
(
bm
);

360 
bm
 = 
NULL
;

366 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "No binary data\n");

367 
size
 = 0;

368 
bm
 = 
NULL
;

373 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "InvÆid mimêty≥ %s\n", 
buf
);

376 *
bm_size
 = 
size
;

377  
bm
;

378 
	}
}

381 
	$_gë_asffûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
)

383 
FILE
 *
Â
;

384 
asf_obje˘_t
 
hdr
;

385 
asf_obje˘_t
 
tmp
;

386 
NumObje˘s
;

387 
TôÀLígth
;

388 
Auth‹Lígth
;

389 
C›yrightLígth
;

390 
Des¸ùti⁄Lígth
;

391 
R©ögLígth
;

392 
NumE¡rõs
;

393 
NameLígth
;

394 
VÆueTy≥
;

395 
VÆueLígth
;

396 
off_t
 
pos
;

397 
buf
[2048];

398 
asf_fûe_¥›îtõs_t
 
FûePr›îtõs
;

400 
ps⁄g
->
vbr_sˇÀ
 = -1;

402 if(!(
Â
 = 
	`f›í
(
fûe
, "rb")))

404 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "CouldÇŸ o≥¿%†f‹Ñódög\n", 
fûe
);

408 if((
hdr
Ë!
	`‰ód
(&hdr, 1, (hdr), 
Â
))

410 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Eº‹Ñódög %s\n", 
fûe
);

411 
	`f˛o£
(
Â
);

414 
hdr
.
Size
 = 
	`À64_to_˝u
(hdr.Size);

416 if(!
	`IsEquÆGUID
(&
hdr
.
ID
, &
ASF_HódîObje˘
))

418 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Notá valid header\n");

419 
	`f˛o£
(
Â
);

422 
NumObje˘s
 = 
	`fgë_À32
(
Â
);

423 
	`f£ek
(
Â
, 2, 
SEEK_CUR
);

425 
pos
 = 
	`·ñl
(
Â
);

426 
NumObje˘s
 > 0)

428 if((
tmp
Ë!
	`‰ód
(&tmp, 1, —mp), 
Â
))

430 
tmp
.
Size
 = 
	`À64_to_˝u
(tmp.Size);

432 if(
pos
 + 
tmp
.
Size
 > 
hdr
.Size)

434 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Sizêovîru¿ªadög hódî obje˘ %I64x\n", 
tmp
.
Size
);

438 if(
	`IsEquÆGUID
(&
tmp
.
ID
, &
ASF_FûePr›îtõs
))

440 
	`_asf_ªad_fûe_¥›îtõs
(
Â
, &
FûePr›îtõs
, 
tmp
.
Size
);

441 
ps⁄g
->
s⁄g_Àngth
 = 
	`À64_to_˝u
(
FûePr›îtõs
.
PœyDuøti⁄
) / 10000;

442 
ps⁄g
->
bôøã
 = 
	`À64_to_˝u
(
FûePr›îtõs
.
MaxBôøã
);

443 
ps⁄g
->
max_bôøã
 =Ös⁄g->
bôøã
;

445 if(
	`IsEquÆGUID
(&
tmp
.
ID
, &
ASF_C⁄ã¡Des¸ùti⁄
))

447 
TôÀLígth
 = 
	`fgë_À16
(
Â
);

448 
Auth‹Lígth
 = 
	`fgë_À16
(
Â
);

449 
C›yrightLígth
 = 
	`fgë_À16
(
Â
);

450 
Des¸ùti⁄Lígth
 = 
	`fgë_À16
(
Â
);

451 
R©ögLígth
 = 
	`fgë_À16
(
Â
);

453 if(
	`_asf_lﬂd_°rög
(
Â
, 
ASF_VT_UNICODE
, 
TôÀLígth
, 
buf
, (buf)))

455 if(
buf
[0])

456 
ps⁄g
->
tôÀ
 = 
	`°rdup
(
buf
);

458 if(
	`_asf_lﬂd_°rög
(
Â
, 
ASF_VT_UNICODE
, 
Auth‹Lígth
, 
buf
, (buf)))

460 if(
buf
[0])

461 
ps⁄g
->
c⁄åibut‹
[
ROLE_TRACKARTIST
] = 
	`°rdup
(
buf
);

463 if(
C›yrightLígth
)

464 
	`f£ek
(
Â
, 
C›yrightLígth
, 
SEEK_CUR
);

465 if(
Des¸ùti⁄Lígth
)

466 
	`f£ek
(
Â
, 
Des¸ùti⁄Lígth
, 
SEEK_CUR
);

467 if(
R©ögLígth
)

468 
	`f£ek
(
Â
, 
R©ögLígth
, 
SEEK_CUR
);

470 if(
	`IsEquÆGUID
(&
tmp
.
ID
, &
ASF_ExãndedC⁄ã¡Des¸ùti⁄
))

472 
NumE¡rõs
 = 
	`fgë_À16
(
Â
);

473 
NumE¡rõs
 > 0)

475 
NameLígth
 = 
	`fgë_À16
(
Â
);

476 
	`_asf_lﬂd_°rög
(
Â
, 
ASF_VT_UNICODE
, 
NameLígth
, 
buf
, (buf));

477 
VÆueTy≥
 = 
	`fgë_À16
(
Â
);

478 
VÆueLígth
 = 
	`fgë_À16
(
Â
);

480 if(!
	`°rˇ£cmp
(
buf
, "AlbumTitle") || !strcasecmp(buf, "WM/AlbumTitle"))

482 if(
	`_asf_lﬂd_°rög
(
Â
, 
VÆueTy≥
, 
VÆueLígth
, 
buf
, (buf)))

483 if(
buf
[0])

484 
ps⁄g
->
Æbum
 = 
	`°rdup
(
buf
);

486 if(!
	`°rˇ£cmp
(
buf
, "AlbumArtist") || !strcasecmp(buf, "WM/AlbumArtist"))

488 if(
	`_asf_lﬂd_°rög
(
Â
, 
VÆueTy≥
, 
VÆueLígth
, 
buf
, (buf)))

490 if(
buf
[0])

491 
ps⁄g
->
c⁄åibut‹
[
ROLE_ALBUMARTIST
] = 
	`°rdup
(
buf
);

494 if(!
	`°rˇ£cmp
(
buf
, "Description") || !strcasecmp(buf, "WM/Track"))

496 if(
	`_asf_lﬂd_°rög
(
Â
, 
VÆueTy≥
, 
VÆueLígth
, 
buf
, (buf)))

497 if(
buf
[0])

498 
ps⁄g
->
åack
 = 
	`©oi
(
buf
);

500 if(!
	`°rˇ£cmp
(
buf
, "Genre") || !strcasecmp(buf, "WM/Genre"))

502 if(
	`_asf_lﬂd_°rög
(
Â
, 
VÆueTy≥
, 
VÆueLígth
, 
buf
, (buf)))

503 if(
buf
[0])

504 
ps⁄g
->
gíª
 = 
	`°rdup
(
buf
);

506 if(!
	`°rˇ£cmp
(
buf
, "Year") || !strcasecmp(buf, "WM/Year"))

508 if(
	`_asf_lﬂd_°rög
(
Â
, 
VÆueTy≥
, 
VÆueLígth
, 
buf
, (buf)))

509 if(
buf
[0])

510 
ps⁄g
->
yór
 = 
	`©oi
(
buf
);

512 if(!
	`°rˇ£cmp
(
buf
, "WM/Director"))

514 if(
	`_asf_lﬂd_°rög
(
Â
, 
VÆueTy≥
, 
VÆueLígth
, 
buf
, (buf)))

515 if(
buf
[0])

516 
ps⁄g
->
c⁄åibut‹
[
ROLE_CONDUCTOR
] = 
	`°rdup
(
buf
);

518 if(!
	`°rˇ£cmp
(
buf
, "WM/Composer"))

520 if(
	`_asf_lﬂd_°rög
(
Â
, 
VÆueTy≥
, 
VÆueLígth
, 
buf
, (buf)))

521 if(
buf
[0])

522 
ps⁄g
->
c⁄åibut‹
[
ROLE_COMPOSER
] = 
	`°rdup
(
buf
);

524 if(!
	`°rˇ£cmp
(
buf
, "WM/Pi˘uª"Ë&& (
VÆueTy≥
 =
ASF_VT_BYTEARRAY
))

526 
ps⁄g
->
image
 = 
	`_asf_lﬂd_pi˘uª
(
Â
, 
VÆueLígth
,Ös⁄g->image, &ps⁄g->
image_size
);

528 if(!
	`°rˇ£cmp
(
buf
, "TrackNumber") || !strcasecmp(buf, "WM/TrackNumber"))

530 if(
	`_asf_lﬂd_°rög
(
Â
, 
VÆueTy≥
, 
VÆueLígth
, 
buf
, (buf)))

531 if(
buf
[0])

532 
ps⁄g
->
åack
 = 
	`©oi
(
buf
);

534 if(!
	`°rˇ£cmp
(
buf
, "isVBR"))

536 
	`f£ek
(
Â
, 
VÆueLígth
, 
SEEK_CUR
);

537 
ps⁄g
->
vbr_sˇÀ
 = 0;

539 if(
VÆueLígth
)

541 
	`f£ek
(
Â
, 
VÆueLígth
, 
SEEK_CUR
);

543 
NumE¡rõs
--;

546 if(
	`IsEquÆGUID
(&
tmp
.
ID
, &
ASF_SåómHódî
))

548 
	`_asf_ªad_°ªam_obje˘
(
Â
, 
ps⁄g
, 
tmp
.
Size
);

550 if(
	`IsEquÆGUID
(&
tmp
.
ID
, &
ASF_HódîExãnsi⁄
))

552 
	`_asf_ªad_hódî_exãnsi⁄
(
Â
, 
ps⁄g
, 
tmp
.
Size
);

554 
pos
 +
tmp
.
Size
;

555 
	`f£ek
(
Â
, 
pos
, 
SEEK_SET
);

556 
NumObje˘s
--;

560 if((
hdr
Ë=
	`‰ód
(&hdr, 1, (hdr), 
Â
Ë&& 
	`IsEquÆGUID
(&hdr.
ID
, &
ASF_D©aObje˘
))

562 if(
ps⁄g
->
s⁄g_Àngth
)

564 
ps⁄g
->
bôøã
 = (
hdr
.
Size
 * 8000Ë/Ös⁄g->
s⁄g_Àngth
;

569 
	`f˛o£
(
Â
);

571 
	}
}

	@tagutils/tagutils-asf.h

24 
	#__PACKED__
 
	`__©åibuã__
((
∑cked
))

	)

26 #ifde‡
HAVE_MACHINE_ENDIAN_H


27 
	~<machöe/ídün.h
>

29 
	~<ídün.h
>

32 
	s_GUID
 {

33 
__u32
 
	ml
;

34 
__u16
 
	mw
[2];

35 
__u8
 
	mb
[8];

36 } 
	t__PACKED__
 
	tGUID
;

38 
	#DEFINE_GUID
(
«me
, 
l
, 
w1
, 
w2
, 
b1
, 
b2
, 
b3
, 
b4
, 
b5
, 
b6
, 
b7
, 
b8
) \

39 
GUID
 
«me
 = { 
l
, { 
w1
, 
w2
 }, { 
b1
, 
b2
, 
b3
, 
b4
, 
b5
, 
b6
, 
b7
, 
b8
 } }

	)

40 
	#IsEquÆGUID
(
rguid1
, 
rguid2
Ë(!
	`memcmp
‘guid1,Ñguid2, (
GUID
)))

	)

42 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


43 
	#SWAP32
(
l
Ë÷)

	)

44 
	#SWAP16
(
w
Ë(w)

	)

46 
	#SWAP32
(
l
Ë–((÷Ë>> 24Ë& 0x000000ffË| ((÷Ë>> 8Ë& 0x0000ff00Ë| ((÷Ë<< 8Ë& 0x00ff0000Ë| ((÷Ë<< 24Ë& 0xff000000Ë)

	)

47 
	#SWAP16
(
w
Ë–(((wË>> 8Ë& 0x00ffË| (((wË<< 8Ë& 0xff00Ë)

	)

50 
DEFINE_GUID
(
ASF_SåómHódî
, 
SWAP32
(0xb7dc0791), 
SWAP16
(0xa9b7), SWAP16(0x11cf),

53 
DEFINE_GUID
(
ASF_VideoSåóm
, 
SWAP32
(0xbc19efc0), 
SWAP16
(0x5b4d), SWAP16(0x11cf),

56 
DEFINE_GUID
(
ASF_AudioSåóm
, 
SWAP32
(0xf8699e40), 
SWAP16
(0x5b4d), SWAP16(0x11cf),

59 
DEFINE_GUID
(
ASF_HódîObje˘
, 
SWAP32
(0x75b22630), 
SWAP16
(0x668e), SWAP16(0x11cf),

62 
DEFINE_GUID
(
ASF_FûePr›îtõs
, 
SWAP32
(0x8ˇbdˇ1), 
SWAP16
(0xa947), SWAP16(0x11cf),

65 
DEFINE_GUID
(
ASF_C⁄ã¡Des¸ùti⁄
, 
SWAP32
(0x75b22633), 
SWAP16
(0x668e), SWAP16(0x11cf),

68 
DEFINE_GUID
(
ASF_ExãndedC⁄ã¡Des¸ùti⁄
, 
SWAP32
(0xd2d0a440), 
SWAP16
(0xe307), SWAP16(0x11d2),

71 
DEFINE_GUID
(
ASF_Clõ¡Guid
, 
SWAP32
(0x8d262e32), 
SWAP16
(0xfc28), SWAP16(0x11d7),

74 
DEFINE_GUID
(
ASF_HódîExãnsi⁄
, 
SWAP32
(0x5fbf03b5), 
SWAP16
(0xa92e), SWAP16(0x11cf),

77 
DEFINE_GUID
(
ASF_CodecLi°
, 
SWAP32
(0x86d15240), 
SWAP16
(0x311d), SWAP16(0x11d0),

80 
DEFINE_GUID
(
ASF_D©aObje˘
, 
SWAP32
(0x75b22636), 
SWAP16
(0x668e), SWAP16(0x11cf),

83 
DEFINE_GUID
(
ASF_PaddögObje˘
, 
SWAP32
(0x1806d474), 
SWAP16
(0xcadf), SWAP16(0x4509),

86 
DEFINE_GUID
(
ASF_Sim∂eIndexObje˘
, 
SWAP32
(0x33000890), 
SWAP16
(0xe5b1), SWAP16(0x11cf),

89 
DEFINE_GUID
(
ASF_NoEº‹C‹ª˘i⁄
, 
SWAP32
(0x20fb5700), 
SWAP16
(0x5b55), SWAP16(0x11cf),

92 
DEFINE_GUID
(
ASF_AudioS¥ód
, 
SWAP32
(0xbfc3cd50), 
SWAP16
(0x618f), SWAP16(0x11cf),

95 
DEFINE_GUID
(
ASF_Re£rved1
, 
SWAP32
(0xabd3d211), 
SWAP16
(0xa9ba), SWAP16(0x11cf),

98 
DEFINE_GUID
(
ASF_Re£rved2
, 
SWAP32
(0x86d15241), 
SWAP16
(0x311d), SWAP16(0x11d0),

101 
DEFINE_GUID
(
ASF_C⁄ã¡En¸y±i⁄Obje˘
, 
SWAP32
(0x2211B3FB), 
SWAP16
(0xBD23), SWAP16(0x11D2),

104 
DEFINE_GUID
(
ASF_ExãndedC⁄ã¡En¸y±i⁄Obje˘
, 
SWAP32
(0x298AE614), 
SWAP16
(0x2622), SWAP16(0x4C17),

107 
DEFINE_GUID
(
ASF_ExãndedSåómPr›îtõsObje˘
, 
SWAP32
(0x14E6A5CB), 
SWAP16
(0xC672), SWAP16(0x4332),

110 
DEFINE_GUID
(
ASF_MedüTy≥Audio
, 
SWAP32
(0x31178C9D), 
SWAP16
(0x03E1), SWAP16(0x4528),

113 
DEFINE_GUID
(
ASF_F‹m©Ty≥Wave
, 
SWAP32
(0xC4C4C4D1), 
SWAP16
(0x0049), SWAP16(0x4E2B),

116 
DEFINE_GUID
(
ASF_SåómBuf„rSåóm
, 
SWAP32
(0x3AFB65E2), 
SWAP16
(0x47EF), SWAP16(0x40F2),

119 
	s_BITMAPINFOHEADER
 {

120 
__u32
 
	mbiSize
;

121 
__s32
 
	mbiWidth
;

122 
__s32
 
	mbiHeight
;

123 
__u16
 
	mbiPœ√s
;

124 
__u16
 
	mbiBôCou¡
;

125 
__u32
 
	mbiCom¥essi⁄
;

126 
__u32
 
	mbiSizeImage
;

127 
__s32
 
	mbiXPñsPîMëî
;

128 
__s32
 
	mbiYPñsPîMëî
;

129 
__u32
 
	mbiCÃU£d
;

130 
__u32
 
	mbiCÃImp‹è¡
;

131 } 
	t__PACKED__
 
	tBITMAPINFOHEADER
;

133 
	s_WAVEFORMATEX
 {

134 
__u16
 
	mwF‹m©Tag
;

135 
__u16
 
	mnCh™√ls
;

136 
__u32
 
	mnSam∂esPîSec
;

137 
__u32
 
	mnAvgByãsPîSec
;

138 
__u16
 
	mnBlockAlign
;

139 
__u16
 
	mwBôsPîSam∂e
;

140 
__u16
 
	mcbSize
;

141 } 
	t__PACKED__
 
	tWAVEFORMATEX
;

143 
	s_asf_°ªam_obje˘_t
 {

144 
GUID
 
	mID
;

145 
__u64
 
	mSize
;

146 
GUID
 
	mSåómTy≥
;

147 
GUID
 
	mEº‹C‹ª˘i⁄Ty≥
;

148 
__u64
 
	mTimeOff£t
;

149 
__u32
 
	mTy≥S≥cificSize
;

150 
__u32
 
	mEº‹C‹ª˘i⁄Size
;

151 
__u16
 
	mSåómNumbî
;

152 
__u32
 
	mRe£rved
;

153 } 
	t__PACKED__
 
	tasf_°ªam_obje˘_t
;

155 
	s_asf_medü_°ªam_t
 {

156 
asf_°ªam_obje˘_t
 
	mHdr
;

157 
GUID
 
	mMaj‹Ty≥
;

158 
GUID
 
	mSubTy≥
;

159 
__u32
 
	mFixedSizeSam∂es
;

160 
__u32
 
	mTemp‹ÆCom¥essi⁄
;

161 
__u32
 
	mSam∂eSize
;

162 
GUID
 
	mF‹m©Ty≥
;

163 
__u32
 
	mF‹m©Size
;

164 } 
	t__PACKED__
 
	tasf_medü_°ªam_t
;

166 
	s_avi_audio_f‹m©_t
 {

167 
__u16
 
	mwF‹m©Tag
;

168 
__u16
 
	mnCh™√ls
;

169 
__u32
 
	mnSam∂esPîSec
;

170 
__u32
 
	mnAvgByãsPîSec
;

171 
__u16
 
	mnBlockAlign
;

172 
__u16
 
	mwBôsPîSam∂e
;

173 
__u16
 
	mcbSize
;

174 } 
	t__PACKED__
 
	tavi_audio_f‹m©_t
;

176 
	s_asf_exãnded_°ªam_obje˘_t
 {

177 
GUID
 
	mID
;

178 
__u64
 
	mSize
;

179 
__u64
 
	mSèπTime
;

180 
__u64
 
	mEndTime
;

181 
__u32
 
	mD©aBôøã
;

182 
__u32
 
	mBuf„rSize
;

183 
__u32
 
	mInôülBuf„rFuŒ√ss
;

184 
__u32
 
	mA…D©aBôøã
;

185 
__u32
 
	mA…Buf„rSize
;

186 
__u32
 
	mA…InôülBuf„rFuŒ√ss
;

187 
__u32
 
	mMaximumObje˘Size
;

188 
__u32
 
	mFœgs
;

189 
__u16
 
	mSåómNumbî
;

190 
__u16
 
	mL™guageIDIndex
;

191 
__u64
 
	mAvgTimePîFøme
;

192 
__u16
 
	mSåómNameCou¡
;

193 
__u16
 
	mPaylﬂdExãnsi⁄Sy°emCou¡
;

194 } 
	t__PACKED__
 
	tasf_exãnded_°ªam_obje˘_t
;

196 
	s_asf_°ªam_«me_t
 {

197 
__u16
 
	mID
;

198 
__u16
 
	mLígth
;

199 } 
	t__PACKED__
 
	tasf_°ªam_«me_t
;

201 
	s_asf_∑ylﬂd_exãnsi⁄_t
 {

202 
GUID
 
	mID
;

203 
__u16
 
	mSize
;

204 
__u32
 
	mInfoLígth
;

205 } 
	t__PACKED__
 
	tasf_∑ylﬂd_exãnsi⁄_t
;

209 
	s_asf_obje˘_t
 {

210 
GUID
 
	mID
;

211 
__u64
 
	mSize
;

212 } 
	t__PACKED__
 
	tasf_obje˘_t
;

214 
	s_asf_codec_íåy_t
 {

215 
__u16
 
	mTy≥
;

216 
__u16
 
	mNameLí
;

217 
__u32
 
	mName
;

218 
__u16
 
	mDescLí
;

219 
__u32
 
	mDesc
;

220 
__u16
 
	mInfoLí
;

221 
__u32
 
	mInfo
;

222 } 
	t__PACKED__
 
	tasf_codec_íåy_t
;

224 
	s_asf_codec_li°_t
 {

225 
GUID
 
	mID
;

226 
__u64
 
	mSize
;

227 
GUID
 
	mRe£rved
;

228 
__u64
 
	mNumE¡rõs
;

229 
asf_codec_íåy_t
 
	mE¡rõs
[2];

230 
asf_codec_íåy_t
 
	mVideoCodec
;

231 } 
	t__PACKED__
 
	tasf_codec_li°_t
;

233 
	s_asf_c⁄ã¡_des¸ùti⁄_t
 {

234 
GUID
 
	mID
;

235 
__u64
 
	mSize
;

236 
__u16
 
	mTôÀLígth
;

237 
__u16
 
	mAuth‹Lígth
;

238 
__u16
 
	mC›yrightLígth
;

239 
__u16
 
	mDes¸ùti⁄Lígth
;

240 
__u16
 
	mR©ögLígth
;

241 
__u32
 
	mTôÀ
;

242 
__u32
 
	mAuth‹
;

243 
__u32
 
	mC›yright
;

244 
__u32
 
	mDes¸ùti⁄
;

245 
__u32
 
	mR©ög
;

246 } 
	t__PACKED__
 
	tasf_c⁄ã¡_des¸ùti⁄_t
;

248 
	s_asf_fûe_¥›îtõs_t
 {

249 
GUID
 
	mID
;

250 
__u64
 
	mSize
;

251 
GUID
 
	mFûeID
;

252 
__u64
 
	mFûeSize
;

253 
__u64
 
	mCª©i⁄Time
;

254 
__u64
 
	mTŸÆPackës
;

255 
__u64
 
	mPœyDuøti⁄
;

256 
__u64
 
	mSídDuøti⁄
;

257 
__u64
 
	mPªrﬁl
;

258 
__u32
 
	mFœgs
;

259 
__u32
 
	mMöPackëSize
;

260 
__u32
 
	mMaxPackëSize
;

261 
__u32
 
	mMaxBôøã
;

262 } 
	t__PACKED__
 
	tasf_fûe_¥›îtõs_t
;

264 
	s_asf_hódî_exãnsi⁄_t
 {

265 
GUID
 
	mID
;

266 
__u64
 
	mSize
;

267 
GUID
 
	mRe£rved1
;

268 
__u16
 
	mRe£rved2
;

269 
__u32
 
	mD©aSize
;

270 } 
	t__PACKED__
 
	tasf_hódî_exãnsi⁄_t
;

272 
	s_asf_video_°ªam_t
 {

273 
asf_°ªam_obje˘_t
 
	mHdr
;

274 
__u32
 
	mWidth
;

275 
__u32
 
	mHeight
;

276 
__u8
 
	mRe£rvedFœgs
;

277 
__u16
 
	mF‹m©Size
;

278 
BITMAPINFOHEADER
 
	mbmi
;

279 
__u8
 
	mebih
[1];

280 } 
	t__PACKED__
 
	tasf_video_°ªam_t
;

282 
	s_asf_audio_°ªam_t
 {

283 
asf_°ªam_obje˘_t
 
	mHdr
;

284 
WAVEFORMATEX
 
	mwfx
;

285 } 
	t__PACKED__
 
	tasf_audio_°ªam_t
;

287 
	s_asf_∑ylﬂd_t
 {

288 
__u8
 
	mSåómNumbî
;

289 
__u8
 
	mMedüObje˘Numbî
;

290 
__u32
 
	mMedüObje˘Off£t
;

291 
__u8
 
	mRïliˇãdD©aLígth
;

292 
__u32
 
	mRïliˇãdD©a
[2];

293 
__u32
 
	mPaylﬂdLígth
;

294 } 
	t__PACKED__
 
	tasf_∑ylﬂd_t
;

296 
	s_asf_∑ckë_t
 {

297 
__u8
 
	mTy≥Fœgs
;

298 
__u8
 
	mECFœgs
;

299 
__u8
 
	mECTy≥
;

300 
__u8
 
	mECCy˛e
;

301 
__u8
 
	mPr›îtyFœgs
;

302 
__u32
 
	mPackëLígth
;

303 
__u32
 
	mSequí˚
;

304 
__u32
 
	mPaddögLígth
;

305 
__u32
 
	mSídTime
;

306 
__u16
 
	mDuøti⁄
;

307 
__u8
 
	mPaylﬂdFœgs
;

308 
asf_∑ylﬂd_t
 
	mPaylﬂd
;

309 } 
	t__PACKED__
 
	tasf_∑ckë_t
;

311 
	s_asf_d©a_obje˘_t
 {

312 
GUID
 
	mID
;

313 
__u64
 
	mSize
;

314 
GUID
 
	mFûeID
;

315 
__u64
 
	mTŸÆPackës
;

316 
	mRe£rved
;

317 } 
	t__PACKED__
 
	tasf_d©a_obje˘_t
;

319 
	s_asf_∑ddög_obje˘_t
 {

320 
GUID
 
	mID
;

321 
__u64
 
	mSize
;

322 } 
	t__PACKED__
 
	tasf_∑ddög_obje˘_t
;

324 
	s_asf_sim∂e_ödex_obje˘_t
 {

325 
GUID
 
	mID
;

326 
__u64
 
	mSize
;

327 
GUID
 
	mFûeID
;

328 
__u32
 
	mIndexE¡ryTimeI¡îvÆ
;

329 
__u32
 
	mMaximumPackëCou¡
;

330 
__u32
 
	mIndexE¡rõsCou¡
;

331 } 
	t__PACKED__
 
	tasf_sim∂e_ödex_obje˘_t
;

333 
	s_asf_hódî_obje˘_t
 {

334 
GUID
 
	mID
;

335 
__u64
 
	mSize
;

336 
__u32
 
	mNumObje˘s
;

337 
__u16
 
	mRe£rved
;

338 
asf_hódî_exãnsi⁄_t
 
	mHódîExãnsi⁄
;

339 
asf_c⁄ã¡_des¸ùti⁄_t
 
	mC⁄ã¡Des¸ùti⁄
;

340 
asf_fûe_¥›îtõs_t
 
	mFûePr›îtõs
;

341 
asf_video_°ªam_t
 * 
	mVideoSåóm
;

342 
asf_audio_°ªam_t
 * 
	mAudioSåóm
;

343 
asf_codec_li°_t
 
	mCodecLi°
;

344 
asf_∑ddög_obje˘_t
 
	mPaddögObje˘
;

345 } 
	t__PACKED__
 
	tasf_hódî_obje˘_t
;

348 
	#ASF_VT_UNICODE
 (0)

	)

349 
	#ASF_VT_BYTEARRAY
 (1)

	)

350 
	#ASF_VT_BOOL
 (2)

	)

351 
	#ASF_VT_DWORD
 (3)

	)

352 
	#ASF_VT_QWORD
 (4)

	)

353 
	#ASF_VT_WORD
 (5)

	)

355 
_gë_asffûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

	@tagutils/tagutils-flc.c

24 
	$_gë_Ê˘ags
(*
fûíame
, 
s⁄g_mëad©a
 *
ps⁄g
)

26 
FLAC__Mëad©a_Sim∂eIãøt‹
 *
ôî©‹
 = 0;

27 
FLAC__SåómMëad©a
 *
block
;

28 
£c
, 
ms
;

29 
i
;

30 
îr
 = 0;

32 if(!(
ôî©‹
 = 
	`FLAC__mëad©a_sim∂e_ôî©‹_√w
()))

34 
	`DPRINTF
(
E_FATAL
, 
L_SCANNER
, "Out of memory while FLAC__metadata_simple_iterator_new()\n");

38 if(!
	`FLAC__mëad©a_sim∂e_ôî©‹_öô
(
ôî©‹
, 
fûíame
, 
åue
,Årue))

40 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "C™nŸÉxåa˘Åag from %s\n", 
fûíame
);

45 if(!(
block
 = 
	`FLAC__mëad©a_sim∂e_ôî©‹_gë_block
(
ôî©‹
)))

47 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "C™nŸÉxåa˘Åag from %s\n", 
fûíame
);

48 
îr
 = -1;

49 
_exô
;

52 
block
->
ty≥
)

54 
FLAC__METADATA_TYPE_STREAMINFO
:

55 
£c
 = ()(
block
->
d©a
.
°ªam_öfo
.
tŸÆ_ßm∂es
 /

56 
block
->
d©a
.
°ªam_öfo
.
ßm∂e_øã
);

57 
ms
 = ()(((
block
->
d©a
.
°ªam_öfo
.
tŸÆ_ßm∂es
 %

58 
block
->
d©a
.
°ªam_öfo
.
ßm∂e_øã
) * 1000) /

59 
block
->
d©a
.
°ªam_öfo
.
ßm∂e_øã
);

60 i‡((
£c
 =0Ë&& (
ms
 == 0))

62 
ps⁄g
->
s⁄g_Àngth
 = (
£c
 * 1000Ë+ 
ms
;

63 
ps⁄g
->
bôøã
 = (((
uöt64_t
)’s⁄g->
fûe_size
Ë* 1000Ë/ (ps⁄g->
s⁄g_Àngth
 / 8));

64 
ps⁄g
->
ßm∂î©e
 = 
block
->
d©a
.
°ªam_öfo
.
ßm∂e_øã
;

65 
ps⁄g
->
ch™√ls
 = 
block
->
d©a
.
°ªam_öfo
.channels;

68 
FLAC__METADATA_TYPE_VORBIS_COMMENT
:

69 
i
 = 0; i < 
block
->
d©a
.
v‹bis_commít
.
num_commíts
; i++)

71 
	`vc_sˇn
(
ps⁄g
,

72 (*)
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
].
íåy
,

73 
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
].
Àngth
);

76 #i‡
FLAC_API_VERSION_CURRENT
 >= 10

77 
FLAC__METADATA_TYPE_PICTURE
:

78 
ps⁄g
->
image_size
 = 
block
->
d©a
.
pi˘uª
.
d©a_Àngth
;

79 if((
ps⁄g
->
image
 = 
	`mÆloc
’s⁄g->
image_size
)))

80 
	`mem˝y
(
ps⁄g
->
image
, 
block
->
d©a
.
pi˘uª
.d©a,Ös⁄g->
image_size
);

82 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Ouào‡mem‹y [%s]\n", 
fûíame
);

88 
	`FLAC__mëad©a_obje˘_dñëe
(
block
);

90 
	`FLAC__mëad©a_sim∂e_ôî©‹_√xt
(
ôî©‹
));

92 
_exô
:

93 if(
ôî©‹
)

94 
	`FLAC__mëad©a_sim∂e_ôî©‹_dñëe
(
ôî©‹
);

96  
îr
;

97 
	}
}

100 
	$_gë_Êcfûeöfo
(*
fûíame
, 
s⁄g_mëad©a
 *
ps⁄g
)

102 
ps⁄g
->
los¶ess
 = 1;

103 
ps⁄g
->
vbr_sˇÀ
 = 1;

106 
	}
}

	@tagutils/tagutils-flc.h

22 
_gë_Êcfûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

23 
_gë_Ê˘ags
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

	@tagutils/tagutils-misc.c

26 
	#MAX_ICONV_BUF
 1024

	)

29 
	mICONV_OK
,

30 
	mICONV_TRYNEXT
,

31 
	mICONV_FATAL


32 } 
	tic⁄v_ªsu…
;

34 
ic⁄v_ªsu…


35 
	$do_ic⁄v
(c⁄° * 
to_˚s
, c⁄° * 
‰om_˚s
,

36 
ICONV_CONST
 *
öbuf
, 
size_t
 
öbyã¶e·
,

37 *
outbuf_‹ig
, 
size_t
 
outbyã¶e·_‹ig
)

39 #ifde‡
HAVE_ICONV


40 
size_t
 
rc
;

41 
ic⁄v_ªsu…
 
ªt
 = 
ICONV_OK
;

43 
size_t
 
outbyã¶e·
 = 
outbyã¶e·_‹ig
 - 1;

44 * 
outbuf
 = 
outbuf_‹ig
;

46 
ic⁄v_t
 
cd
 = 
	`ic⁄v_›í
(
to_˚s
, 
‰om_˚s
);

48 if(
cd
 =(
ic⁄v_t
)-1)

50  
ICONV_FATAL
;

52 
rc
 = 
	`ic⁄v
(
cd
, &
öbuf
, &
öbyã¶e·
, &
outbuf
, &
outbyã¶e·
);

53 if(
rc
 =(
size_t
)-1)

55 if(
î∫o
 =
E2BIG
)

57 
ªt
 = 
ICONV_FATAL
;

61 
ªt
 = 
ICONV_TRYNEXT
;

62 
	`mem£t
(
outbuf_‹ig
, '\0', 
outbyã¶e·_‹ig
);

65 
	`ic⁄v_˛o£
(
cd
);

67  
ªt
;

69  
ICONV_FATAL
;

71 
	}
}

73 
	#N_LANG_ALT
 8

	)

75 *
	mœng
;

76 *
	m˝«mes
[
N_LANG_ALT
];

77 } 
	gic⁄v_m≠
[] = {

84 
	gœng_ödex
 = -1;

87 
	$_œng2˝
(*
œng
)

89 
˝
;

91 if(!
œng
 ||Üang[0] == '\0')

93 
˝
 = 0; 
ic⁄v_m≠
[˝].
œng
; cp++)

95 if(!
	`°rˇ£cmp
(
ic⁄v_m≠
[
˝
].
œng
,Üang))

96  
˝
;

99 
	}
}

102 
	$_gë_utf8_ãxt
(c⁄° 
id3_ucs4_t
* 
«tive_ãxt
)

104 *
utf8_ãxt
 = 
NULL
;

105 *
ö
, *
ö8
, *
ic⁄v_buf
;

106 
ic⁄v_ªsu…
 
rc
;

107 
i
, 
n
;

109 
ö
 = (*)
	`id3_ucs4_œtö1du∂iˇã
(
«tive_ãxt
);

110 if(!
ö
)

112 
out
;

115 
ö8
 = (*)
	`id3_ucs4_utf8du∂iˇã
(
«tive_ãxt
);

116 if(!
ö8
)

118 
	`‰ì
(
ö
);

119 
out
;

122 
ic⁄v_buf
 = (*)
	`ˇŒoc
(
MAX_ICONV_BUF
, ());

123 if(!
ic⁄v_buf
)

125 
	`‰ì
(
ö
); fªe(
ö8
);

126 
out
;

129 
i
 = 
œng_ödex
;

131 
rc
 = 
	`do_ic⁄v
(
ic⁄v_m≠
[
i
].
˝«mes
[0], "UTF-8", 
ö8
, 
	`°æí
(ö8), 
ic⁄v_buf
, 
MAX_ICONV_BUF
);

132 if(
rc
 =
ICONV_OK
)

134 
utf8_ãxt
 = (*)
ö8
;

135 
	`‰ì
(
ic⁄v_buf
);

137 if(
rc
 =
ICONV_TRYNEXT
)

140 
rc
 = 
	`do_ic⁄v
("UTF-8", 
ic⁄v_m≠
[
i
].
˝«mes
[0], 
ö
, 
	`°æí
(ö), 
ic⁄v_buf
, 
MAX_ICONV_BUF
);

141 if(
rc
 =
ICONV_OK
)

143 
utf8_ãxt
 = (*)
ic⁄v_buf
;

145 if(
rc
 =
ICONV_TRYNEXT
)

148 
n
 = 1;Ç < 
N_LANG_ALT
 && 
ic⁄v_m≠
[
i
].
˝«mes
[n];Ç++)

150 
rc
 = 
	`do_ic⁄v
("UTF-8", 
ic⁄v_m≠
[
i
].
˝«mes
[
n
], 
ö
, 
	`°æí
(ö), 
ic⁄v_buf
, 
MAX_ICONV_BUF
);

151 if(
rc
 =
ICONV_OK
)

153 
utf8_ãxt
 = (*)
ic⁄v_buf
;

157 if(!
utf8_ãxt
)

160 
utf8_ãxt
 = (*)
	`id3_ucs4_utf8du∂iˇã
(
«tive_ãxt
);

161 
	`‰ì
(
ic⁄v_buf
);

164 
	`‰ì
(
ö8
);

166 
	`‰ì
(
ö
);

168 
out
:

169 if(!
utf8_ãxt
)

171 
utf8_ãxt
 = (*)
	`°rdup
("UNKNOWN");

174  
utf8_ãxt
;

175 
	}
}

179 
	$vc_sˇn
(
s⁄g_mëad©a
 *
ps⁄g
, c⁄° *
commít
, c⁄° 
size_t
 
Àngth
)

181 
°rbuf
[1024];

183 if(
Àngth
 > ((
°rbuf
) - 1))

185 if–
	`°∫ˇ£cmp
(
commít
, "LYRICS=", 7) != 0 )

187 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "V‹bi†%.*†toÿl⁄g [%s]\n", (
	`ödex
(
commít
, '=')-commít), commít, 
ps⁄g
->
∑th
);

191 
	`°∫˝y
(
°rbuf
, 
commít
, 
Àngth
);

192 
°rbuf
[
Àngth
] = '\0';

199 if(!
	`°∫ˇ£cmp
(
°rbuf
, "ALBUM=", 6))

201 if–*(
°rbuf
+6) )

202 
ps⁄g
->
Æbum
 = 
	`°rdup
(
°rbuf
 + 6);

204 if(!
	`°∫ˇ£cmp
(
°rbuf
, "ARTIST=", 7))

206 if–*(
°rbuf
+7) )

207 
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
] = 
	`°rdup
(
°rbuf
 + 7);

209 if(!
	`°∫ˇ£cmp
(
°rbuf
, "ARTISTSORT=", 11))

211 
ps⁄g
->
c⁄åibut‹_s‹t
[
ROLE_ARTIST
] = 
	`°rdup
(
°rbuf
 + 11);

213 if(!
	`°∫ˇ£cmp
(
°rbuf
, "TITLE=", 6))

215 if–*(
°rbuf
+6) )

216 
ps⁄g
->
tôÀ
 = 
	`°rdup
(
°rbuf
 + 6);

218 if(!
	`°∫ˇ£cmp
(
°rbuf
, "TRACKNUMBER=", 12))

220 
ps⁄g
->
åack
 = 
	`©oi
(
°rbuf
 + 12);

222 if(!
	`°∫ˇ£cmp
(
°rbuf
, "DISCNUMBER=", 11))

224 
ps⁄g
->
disc
 = 
	`©oi
(
°rbuf
 + 11);

226 if(!
	`°∫ˇ£cmp
(
°rbuf
, "GENRE=", 6))

228 if–*(
°rbuf
+6) )

229 
ps⁄g
->
gíª
 = 
	`°rdup
(
°rbuf
 + 6);

231 if(!
	`°∫ˇ£cmp
(
°rbuf
, "DATE=", 5))

233 if(
Àngth
 >= (5 + 10) &&

234 
	`isdigô
(
°rbuf
[5 + 0]Ë&& isdigô(°rbuf[5 + 1]Ë&& 
	`i•un˘
(strbuf[5 + 2]) &&

235 
	`isdigô
(
°rbuf
[5 + 3]Ë&& isdigô(°rbuf[5 + 4]Ë&& 
	`i•un˘
(strbuf[5 + 5]) &&

236 
	`isdigô
(
°rbuf
[5 + 6]) && isdigit(strbuf[5 + 7]) && isdigit(strbuf[5 + 8]) && isdigit(strbuf[5 + 9]))

239 
°rbuf
[5 + 10] = '\0';

240 
ps⁄g
->
yór
 = 
	`©oi
(
°rbuf
 + 5 + 6);

245 
°rbuf
[5 + 4] = '\0';

246 
ps⁄g
->
yór
 = 
	`©oi
(
°rbuf
 + 5);

249 if(!
	`°∫ˇ£cmp
(
°rbuf
, "COMMENT=", 8))

251 if–*(
°rbuf
+8) )

252 
ps⁄g
->
commít
 = 
	`°rdup
(
°rbuf
 + 8);

254 if(!
	`°∫ˇ£cmp
(
°rbuf
, "MUSICBRAINZ_ALBUMID=", 20))

256 
ps⁄g
->
musicbøöz_Æbumid
 = 
	`°rdup
(
°rbuf
 + 20);

258 if(!
	`°∫ˇ£cmp
(
°rbuf
, "MUSICBRAINZ_TRACKID=", 20))

260 
ps⁄g
->
musicbøöz_åackid
 = 
	`°rdup
(
°rbuf
 + 20);

262 if(!
	`°∫ˇ£cmp
(
°rbuf
, "MUSICBRAINZ_TRACKID=", 20))

264 
ps⁄g
->
musicbøöz_åackid
 = 
	`°rdup
(
°rbuf
 + 20);

266 if(!
	`°∫ˇ£cmp
(
°rbuf
, "MUSICBRAINZ_ARTISTID=", 21))

268 
ps⁄g
->
musicbøöz_¨ti°id
 = 
	`°rdup
(
°rbuf
 + 21);

270 if(!
	`°∫ˇ£cmp
(
°rbuf
, "MUSICBRAINZ_ALBUMARTISTID=", 26))

272 
ps⁄g
->
musicbøöz_Æbum¨ti°id
 = 
	`°rdup
(
°rbuf
 + 26);

274 
	}
}

	@tagutils/tagutils-mp3.c

28 
	$_gë_mp3ègs
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
)

30 
id3_fûe
 *
pid3fûe
;

31 
id3_èg
 *
pid3èg
;

32 
id3_‰ame
 *
pid3‰ame
;

33 
îr
;

34 
ödex
;

35 
u£d
;

36 *
utf8_ãxt
;

37 
gíª
 = 
WINAMP_GENRE_UNKNOWN
;

38 
have_utf8
;

39 
have_ãxt
;

40 
id3_ucs4_t
 c⁄° *
«tive_ãxt
;

41 *
tmp
;

42 
gŸ_numîic_gíª
;

43 
id3_byã_t
 c⁄° *
image
;

44 
id3_Àngth_t
 
image_size
 = 0;

46 
pid3fûe
 = 
	`id3_fûe_›í
(
fûe
, 
ID3_FILE_MODE_READONLY
);

47 if(!
pid3fûe
)

49 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "C™nŸ o≥¿%s\n", 
fûe
);

53 
pid3èg
 = 
	`id3_fûe_èg
(
pid3fûe
);

55 if(!
pid3èg
)

57 
îr
 = 
î∫o
;

58 
	`id3_fûe_˛o£
(
pid3fûe
);

59 
î∫o
 = 
îr
;

60 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "C™nŸ gë ID3Åag f‹ %s\n", 
fûe
);

64 
ödex
 = 0;

65 (
pid3‰ame
 = 
	`id3_èg_föd‰ame
(
pid3èg
, "", 
ödex
)))

67 
u£d
 = 0;

68 
utf8_ãxt
 = 
NULL
;

69 
«tive_ãxt
 = 
NULL
;

70 
have_utf8
 = 0;

71 
have_ãxt
 = 0;

73 if(!
	`°rcmp
(
pid3‰ame
->
id
, "YTCP"))

75 
ps⁄g
->
compû©i⁄
 = 1;

76 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "Compû©i⁄: %d [%s]\n", 
ps⁄g
->
compû©i⁄
, 
	`ba£«me
(
fûe
));

78 if(!
	`°rcmp
(
pid3‰ame
->
id
, "APIC"Ë&& !
image_size
)

80 if–(
	`°rcmp
((*)
	`id3_fõld_gëœtö1
(&
pid3‰ame
->
fõlds
[1]), "image/jpeg") == 0) ||

81 (
	`°rcmp
((*)
	`id3_fõld_gëœtö1
(&
pid3‰ame
->
fõlds
[1]), "image/jpg") == 0) ||

82 (
	`°rcmp
((*)
	`id3_fõld_gëœtö1
(&
pid3‰ame
->
fõlds
[1]), "jpeg") == 0) )

84 
image
 = 
	`id3_fõld_gëbö¨yd©a
(&
pid3‰ame
->
fõlds
[4], &
image_size
);

85 if–
image_size
 )

87 
ps⁄g
->
image
 = 
	`mÆloc
(
image_size
);

88 
	`mem˝y
(
ps⁄g
->
image
, image, 
image_size
);

89 
ps⁄g
->
image_size
 = image_size;

95 if(((
pid3‰ame
->
id
[0] ='T'Ë|| (
	`°rcmp
(pid3frame->id, "COMM") == 0)) &&

96 (
	`id3_fõld_gën°rögs
(&
pid3‰ame
->
fõlds
[1])))

97 
have_ãxt
 = 1;

99 if(
have_ãxt
)

101 
«tive_ãxt
 = 
	`id3_fõld_gë°rögs
(&
pid3‰ame
->
fõlds
[1], 0);

103 if(
«tive_ãxt
)

105 
have_utf8
 = 1;

106 if(
œng_ödex
 >= 0)

107 
utf8_ãxt
 = 
	`_gë_utf8_ãxt
(
«tive_ãxt
);

109 
utf8_ãxt
 = (*)
	`id3_ucs4_utf8du∂iˇã
(
«tive_ãxt
);

111 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TIT2"))

113 
u£d
 = 1;

114 
ps⁄g
->
tôÀ
 = (*)
utf8_ãxt
;

116 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TPE1"))

118 
u£d
 = 1;

119 
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
] = (*)
utf8_ãxt
;

121 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TALB"))

123 
u£d
 = 1;

124 
ps⁄g
->
Æbum
 = (*)
utf8_ãxt
;

126 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TCOM"))

128 
u£d
 = 1;

129 
ps⁄g
->
c⁄åibut‹
[
ROLE_COMPOSER
] = (*)
utf8_ãxt
;

131 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TIT1"))

133 
u£d
 = 1;

134 
ps⁄g
->
groupög
 = (*)
utf8_ãxt
;

136 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TPE2"))

138 
u£d
 = 1;

139 
ps⁄g
->
c⁄åibut‹
[
ROLE_BAND
] = (*)
utf8_ãxt
;

141 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TPE3"))

143 
u£d
 = 1;

144 
ps⁄g
->
c⁄åibut‹
[
ROLE_CONDUCTOR
] = (*)
utf8_ãxt
;

146 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TCON"))

148 
u£d
 = 1;

149 
ps⁄g
->
gíª
 = (*)
utf8_ãxt
;

150 
gŸ_numîic_gíª
 = 0;

151 if(
ps⁄g
->
gíª
)

153 if(!
	`°æí
(
ps⁄g
->
gíª
))

155 
gíª
 = 
WINAMP_GENRE_UNKNOWN
;

156 
gŸ_numîic_gíª
 = 1;

158 if(
	`isdigô
(
ps⁄g
->
gíª
[0]))

160 
gíª
 = 
	`©oi
(
ps⁄g
->genre);

161 
gŸ_numîic_gíª
 = 1;

163 if((
ps⁄g
->
gíª
[0] ='('Ë&& (
	`isdigô
(psong->genre[1])))

165 
gíª
 = 
	`©oi
((*)&
ps⁄g
->genre[1]);

166 
gŸ_numîic_gíª
 = 1;

169 if(
gŸ_numîic_gíª
)

171 if((
gíª
 < 0Ë|| (gíª > 
WINAMP_GENRE_UNKNOWN
))

172 
gíª
 = 
WINAMP_GENRE_UNKNOWN
;

173 
	`‰ì
(
ps⁄g
->
gíª
);

174 
ps⁄g
->
gíª
 = 
	`°rdup
(
wöamp_gíª
[genre]);

178 if(!
	`°rcmp
(
pid3‰ame
->
id
, "COMM"))

180 
u£d
 = 1;

181 
ps⁄g
->
commít
 = (*)
utf8_ãxt
;

183 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TPOS"))

185 
tmp
 = (*)
utf8_ãxt
;

186 
	`°r£p
(&
tmp
, "/");

187 if(
tmp
)

189 
ps⁄g
->
tŸÆ_discs
 = 
	`©oi
(
tmp
);

191 
ps⁄g
->
disc
 = 
	`©oi
((*)
utf8_ãxt
);

193 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TRCK"))

195 
tmp
 = (*)
utf8_ãxt
;

196 
	`°r£p
(&
tmp
, "/");

197 if(
tmp
)

199 
ps⁄g
->
tŸÆ_åacks
 = 
	`©oi
(
tmp
);

201 
ps⁄g
->
åack
 = 
	`©oi
((*)
utf8_ãxt
);

203 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TDRC"))

205 
ps⁄g
->
yór
 = 
	`©oi
((*)
utf8_ãxt
);

207 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TLEN"))

209 
ps⁄g
->
s⁄g_Àngth
 = 
	`©oi
((*)
utf8_ãxt
);

211 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TBPM"))

213 
ps⁄g
->
bpm
 = 
	`©oi
((*)
utf8_ãxt
);

215 if(!
	`°rcmp
(
pid3‰ame
->
id
, "TCMP"))

217 
ps⁄g
->
compû©i⁄
 = ()
	`©oi
((*)
utf8_ãxt
);

223 if((!
u£d
Ë&& (
have_utf8
Ë&& (
utf8_ãxt
))

224 
	`‰ì
(
utf8_ãxt
);

227 if((!
	`°rcmp
(
pid3‰ame
->
id
, "COMM")Ë&& (pid3‰ame->
nfõlds
 == 4))

229 
«tive_ãxt
 = 
	`id3_fõld_gë°rög
(&
pid3‰ame
->
fõlds
[2]);

230 if(
«tive_ãxt
)

232 
utf8_ãxt
 = (*)
	`id3_ucs4_utf8du∂iˇã
(
«tive_ãxt
);

233 if((
utf8_ãxt
Ë&& (
	`°∫ˇ£cmp
((*)utf8_text, "iTun", 4) != 0))

236 
	`‰ì
(
utf8_ãxt
);

238 
«tive_ãxt
 = 
	`id3_fõld_gëfuŒ°rög
(&
pid3‰ame
->
fõlds
[3]);

239 if(
«tive_ãxt
)

241 
utf8_ãxt
 = (*)
	`id3_ucs4_utf8du∂iˇã
(
«tive_ãxt
);

242 if(
utf8_ãxt
)

244 
	`‰ì
(
ps⁄g
->
commít
);

245 
ps⁄g
->
commít
 = (*)
utf8_ãxt
;

251 
	`‰ì
(
utf8_ãxt
);

256 
ödex
++;

259 
	`id3_fûe_˛o£
(
pid3fûe
);

262 
	}
}

266 
	$_decode_mp3_‰ame
(*
‰ame
, 
mp3_‰ameöfo
 *
pfi
)

268 
vî
;

269 
œyî_ödex
;

270 
ßm∂e_ödex
;

271 
bôøã_ödex
;

272 
ßm∂î©e_ödex
;

274 if((
‰ame
[0] != 0xFF) || (frame[1] < 224))

276 
pfi
->
is_vÆid
 = 0;

280 
vî
 = (
‰ame
[1] & 0x18) >> 3;

281 
pfi
->
œyî
 = 4 - ((
‰ame
[1] & 0x6) >> 1);

283 
œyî_ödex
 = 
ßm∂e_ödex
 = -1;

285 
vî
)

288 
pfi
->
m≥g_vîsi⁄
 = 0x25;

289 
ßm∂e_ödex
 = 2;

290 if(
pfi
->
œyî
 == 1)

291 
œyî_ödex
 = 3;

292 if((
pfi
->
œyî
 == 2) || (pfi->layer == 3))

293 
œyî_ödex
 = 4;

296 
pfi
->
m≥g_vîsi⁄
 = 0x20;

297 
ßm∂e_ödex
 = 1;

298 if(
pfi
->
œyî
 == 1)

299 
œyî_ödex
 = 3;

300 if((
pfi
->
œyî
 == 2) || (pfi->layer == 3))

301 
œyî_ödex
 = 4;

304 
pfi
->
m≥g_vîsi⁄
 = 0x10;

305 
ßm∂e_ödex
 = 0;

306 if(
pfi
->
œyî
 == 1)

307 
œyî_ödex
 = 0;

308 if(
pfi
->
œyî
 == 2)

309 
œyî_ödex
 = 1;

310 if(
pfi
->
œyî
 == 3)

311 
œyî_ödex
 = 2;

315 if((
œyî_ödex
 < 0) || (layer_index > 4))

317 
pfi
->
is_vÆid
 = 0;

321 if((
ßm∂e_ödex
 < 0) || (sample_index >= 2))

323 
pfi
->
is_vÆid
 = 0;

327 if(
pfi
->
œyî
 =1Ëpfi->
ßm∂es_≥r_‰ame
 = 384;

328 if(
pfi
->
œyî
 =2Ëpfi->
ßm∂es_≥r_‰ame
 = 1152;

329 if(
pfi
->
œyî
 == 3)

331 if(
pfi
->
m≥g_vîsi⁄
 == 0x10)

332 
pfi
->
ßm∂es_≥r_‰ame
 = 1152;

334 
pfi
->
ßm∂es_≥r_‰ame
 = 576;

337 
bôøã_ödex
 = (
‰ame
[2] & 0xF0) >> 4;

338 
ßm∂î©e_ödex
 = (
‰ame
[2] & 0x0C) >> 2;

340 if((
bôøã_ödex
 == 0xF) || (bitrate_index == 0x0))

342 
pfi
->
is_vÆid
 = 0;

346 if(
ßm∂î©e_ödex
 == 3)

348 
pfi
->
is_vÆid
 = 0;

353 
pfi
->
bôøã
 = 
bôøã_tbl
[
œyî_ödex
][
bôøã_ödex
];

354 
pfi
->
ßm∂î©e
 = 
ßm∂e_øã_tbl
[
ßm∂e_ödex
][
ßm∂î©e_ödex
];

356 if((
‰ame
[3] & 0xC0 >> 6) == 3)

357 
pfi
->
°îeo
 = 0;

359 
pfi
->
°îeo
 = 1;

361 if(
‰ame
[2] & 0x02)

362 
pfi
->
∑ddög
 = 1;

364 
pfi
->
∑ddög
 = 0;

366 if(
pfi
->
m≥g_vîsi⁄
 == 0x10)

368 if(
pfi
->
°îeo
)

369 
pfi
->
xög_off£t
 = 32;

371 
pfi
->
xög_off£t
 = 17;

375 if(
pfi
->
°îeo
)

376 
pfi
->
xög_off£t
 = 17;

378 
pfi
->
xög_off£t
 = 9;

381 
pfi
->
¸c_¥Ÿe˘ed
 = 
‰ame
[1] & 0xFE;

383 if(
pfi
->
œyî
 == 1)

384 
pfi
->
‰ame_Àngth
 = (12 *Öfi->
bôøã
 * 1000 /Öfi->
ßm∂î©e
 +Öfi->
∑ddög
) * 4;

386 
pfi
->
‰ame_Àngth
 = 144 *Öfi->
bôøã
 * 1000 /Öfi->
ßm∂î©e
 +Öfi->
∑ddög
;

388 if((
pfi
->
‰ame_Àngth
 > 2880) || (pfi->frame_length <= 0))

390 
pfi
->
is_vÆid
 = 0;

394 
pfi
->
is_vÆid
 = 1;

396 
	}
}

400 
	$_mp3_gë_avîage_bôøã
(
FILE
 *
öfûe
, 
mp3_‰ameöfo
 *
pfi
, c⁄° *
‚ame
)

402 
off_t
 
fûe_size
;

403 
‰ame_buf„r
[2900];

404 
hódî
[4];

405 
ödex
 = 0;

406 
found
 = 0;

407 
off_t
 
pos
;

408 
mp3_‰ameöfo
 
fi
;

409 
‰ame_cou¡
 = 0;

410 
bôøã_tŸÆ
 = 0;

412 
	`f£ek
(
öfûe
, 0, 
SEEK_END
);

413 
fûe_size
 = 
	`·ñl
(
öfûe
);

415 
pos
 = 
fûe_size
 >> 1;

418 
	`f£ek
(
öfûe
, 
pos
, 
SEEK_SET
);

419 if(
	`‰ód
(
‰ame_buf„r
, 1, (‰ame_buf„r), 
öfûe
) != (frame_buffer))

422 !
found
)

424 (
‰ame_buf„r
[
ödex
] != 0xFF) && (index < ((frame_buffer) - 4)))

425 
ödex
++;

427 if(
ödex
 >((
‰ame_buf„r
) - 4))

429 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "CouldÇŸ föd fømêf‹ %s\n", 
	`ba£«me
((*)
‚ame
));

433 if(!
	`_decode_mp3_‰ame
(&
‰ame_buf„r
[
ödex
], &
fi
))

436 
	`f£ek
(
öfûe
, 
pos
 + 
ödex
 + 
fi
.
‰ame_Àngth
, 
SEEK_SET
);

437 if(
	`‰ód
(
hódî
, 1, (hódî), 
öfûe
) != (header))

439 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "CouldÇŸÑód fømêhódî f‹ %s\n", 
	`ba£«me
((*)
‚ame
));

443 if(!
	`_decode_mp3_‰ame
(
hódî
, &
fi
))

444 
found
 = 1;

447 if(!
found
)

448 
ödex
++;

451 
pos
 +
ödex
;

454 
‰ame_cou¡
 < 10)

456 
	`f£ek
(
öfûe
, 
pos
, 
SEEK_SET
);

457 if(
	`‰ód
(
hódî
, 1, (hódî), 
öfûe
) != (header))

459 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "CouldÇŸÑód fømêhódî f‹ %s\n", 
	`ba£«me
((*)
‚ame
));

462 if(
	`_decode_mp3_‰ame
(
hódî
, &
fi
))

464 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "InvÆid fømêhódî whûêavîagög %s\n", 
	`ba£«me
((*)
‚ame
));

468 
bôøã_tŸÆ
 +
fi
.
bôøã
;

469 
‰ame_cou¡
++;

470 
pos
 +
fi
.
‰ame_Àngth
;

473 
pfi
->
bôøã
 = 
bôøã_tŸÆ
 / 
‰ame_cou¡
;

476 
	}
}

480 
__©åibuã__
((
unu£d
))

481 
	$_mp3_gë_‰ame_cou¡
(
FILE
 *
öfûe
, 
mp3_‰ameöfo
 *
pfi
)

483 
pos
;

484 
‰ames
 = 0;

485 
‰ame_buf„r
[4];

486 
mp3_‰ameöfo
 
fi
;

487 
off_t
 
fûe_size
;

488 
îr
 = 0;

489 
cbr
 = 1;

490 
œ°_bôøã
 = 0;

492 
	`f£ek
(
öfûe
, 0, 
SEEK_END
);

493 
fûe_size
 = 
	`·ñl
(
öfûe
);

495 
pos
 = 
pfi
->
‰ame_off£t
;

499 
îr
 = 1;

501 
	`f£ek
(
öfûe
, 
pos
, 
SEEK_SET
);

502 if(
	`‰ód
(
‰ame_buf„r
, 1, (‰ame_buf„r), 
öfûe
) == (frame_buffer))

505 if(!
	`_decode_mp3_‰ame
(
‰ame_buf„r
, &
fi
))

507 
‰ames
++;

508 
pos
 +
fi
.
‰ame_Àngth
;

509 
îr
 = 0;

511 if((
œ°_bôøã
Ë&& (
fi
.
bôøã
 !=Üast_bitrate))

512 
cbr
 = 0;

513 
œ°_bôøã
 = 
fi
.
bôøã
;

516 if(
cbr
 && (
‰ames
 > 100))

518 
	`DPRINTF
(
E_DEBUG
, 
L_SCANNER
, "FileáppearsÅo be CBR... quitting frame _mp3_get_frame_count()\n");

524 if(
îr
)

526 if(
pos
 > (
fûe_size
 - 4096))

528 
pfi
->
numbî_of_‰ames
 = 
‰ames
;

533 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Frame countáborted onÉrror. Pos=%d, Count=%d\n",

534 
pos
, 
‰ames
);

539 
	}
}

543 
	$_gë_mp3fûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
)

545 
FILE
 *
öfûe
;

546 
id3hódî
 *
pid3
;

547 
mp3_‰ameöfo
 
fi
;

548 
size
 = 0;

549 
n_ªad
;

550 
off_t
 
Â_size
 = 0;

551 
off_t
 
fûe_size
;

552 
buf„r
[1024];

553 
ödex
;

555 
xög_Êags
;

556 
found
;

558 
fú°_check
 = 0;

559 
‰ame_buf„r
[4];

561 
id3v1èghdr
[4];

563 if(!(
öfûe
 = 
	`f›í
(
fûe
, "rb")))

565 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "CouldÇŸ o≥¿%†f‹Ñódög\n", 
fûe
);

569 
	`mem£t
((*)&
fi
, 0, (fi));

571 
	`f£ek
(
öfûe
, 0, 
SEEK_END
);

572 
fûe_size
 = 
	`·ñl
(
öfûe
);

573 
	`f£ek
(
öfûe
, 0, 
SEEK_SET
);

575 if(
	`‰ód
(
buf„r
, 1, (buf„r), 
öfûe
) != (buffer))

577 if(
	`„º‹
(
öfûe
))

579 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Eº‹Ñódög: %†[%s]\n", 
	`°ªº‹
(
î∫o
), 
fûe
);

583 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "FûêtoÿsmÆl. Probably c‹ru±ed. [%s]\n", 
fûe
);

585 
	`f˛o£
(
öfûe
);

589 
pid3
 = (
id3hódî
*)
buf„r
;

591 
found
 = 0;

592 
Â_size
 = 0;

594 if(
	`°∫cmp
((*)
pid3
->
id
, "ID3", 3) == 0)

596 
ègvîsi⁄
[16];

599 
size
 = (
pid3
->size[0] << 21 |Öid3->size[1] << 14 |

600 
pid3
->
size
[2] << 7 |Öid3->size[3]);

601 
Â_size
 = 
size
 + (
id3hódî
);

602 
fú°_check
 = 1;

604 
	`¢¥ötf
(
ègvîsi⁄
, (tagversion), "ID3v2.%d.%d",

605 
pid3
->
vîsi⁄
[0],Öid3->version[1]);

606 
ps⁄g
->
ègvîsi⁄
 = 
	`°rdup
(tagversion);

609 
ödex
 = 0;

615 !
found
)

617 
	`f£ek
(
öfûe
, 
Â_size
, 
SEEK_SET
);

618 if((
n_ªad
 = 
	`‰ód
(
buf„r
, 1, (buf„r), 
öfûe
)) < 4)

620 
	`f˛o£
(
öfûe
);

624 
ödex
 = 0;

625 !
found
)

627 (
buf„r
[
ödex
] !0xFFË&& (ödex < (
n_ªad
 - 50)))

628 
ödex
++;

630 if((
fú°_check
Ë&& (
ödex
))

632 
Â_size
 = 0;

633 
fú°_check
 = 0;

634 if(
n_ªad
 < (
buf„r
))

636 
	`f˛o£
(
öfûe
);

642 if(
ödex
 > (
n_ªad
 - 50))

644 
Â_size
 +
ödex
;

645 if(
n_ªad
 < (
buf„r
))

647 
	`f˛o£
(
öfûe
);

653 if(!
	`_decode_mp3_‰ame
(&
buf„r
[
ödex
], &
fi
))

655 if(!
	`°∫ˇ£cmp
((*)&
buf„r
[
ödex
 + 
fi
.
xög_off£t
 + 4], "XING", 4))

659 
found
 = 1;

660 
Â_size
 +
ödex
;

665 
	`f£ek
(
öfûe
, 
Â_size
 + 
ödex
 + 
fi
.
‰ame_Àngth
, 
SEEK_SET
);

666 if(
	`‰ód
(
‰ame_buf„r
, 1, (‰ame_buf„r), 
öfûe
) == (frame_buffer))

668 if(!
	`_decode_mp3_‰ame
((*)
‰ame_buf„r
, &
fi
))

670 
found
 = 1;

671 
Â_size
 +
ödex
;

676 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "CouldÇŸÑód fømêhódî: %s\n", 
fûe
);

677 
	`f˛o£
(
öfûe
);

681 if(!
found
)

684 
found
 = 1;

685 
Â_size
 +
ödex
;

690 if(!
found
)

692 
ödex
++;

693 if(
fú°_check
)

695 
	`DPRINTF
(
E_INFO
, 
L_SCANNER
, "Bad hódî... dr›pög back f‹ fuŒ fømê£¨ch [%s]\n", 
ps⁄g
->
∑th
);

696 
fú°_check
 = 0;

697 
Â_size
 = 0;

704 
fi
.
‰ame_off£t
 = 
Â_size
;

706 
ps⁄g
->
audio_off£t
 = 
Â_size
;

707 
ps⁄g
->
audio_size
 = 
fûe_size
 - 
Â_size
;

709 
	`f£ek
(
öfûe
, 
fûe_size
 - 128, 
SEEK_SET
);

710 if(
	`‰ód
(
id3v1èghdr
, 1, 4, 
öfûe
) == 4)

712 if(
id3v1èghdr
[0] == 'T' && id3v1taghdr[1] == 'A' && id3v1taghdr[2] == 'G')

714 
ps⁄g
->
audio_size
 -= 128;

718 if(
	`_decode_mp3_‰ame
(&
buf„r
[
ödex
], &
fi
))

720 
	`f˛o£
(
öfûe
);

721 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "CouldÇŸ föd syn¯‰ame: %s\n", 
fûe
);

726 
ps⁄g
->
vbr_sˇÀ
 = -1;

727 if(!
	`°∫ˇ£cmp
((*)&
buf„r
[
ödex
 + 
fi
.
xög_off£t
 + 4], "XING", 4))

729 
xög_Êags
 = 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+4] << 24 |

730 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+5] << 16 |

731 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+6] << 8 |

732 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+7];

733 
ps⁄g
->
vbr_sˇÀ
 = 78;

735 if(
xög_Êags
 & 0x1)

738 
fi
.
numbî_of_‰ames
 = 
buf„r
[
ödex
+fi.
xög_off£t
+4+8] << 24 |

739 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+9] << 16 |

740 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+10] << 8 |

741 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+11];

745 if((
fi
.
numbî_of_‰ames
 =0Ë&& (!
ps⁄g
->
s⁄g_Àngth
))

747 
	`_mp3_gë_avîage_bôøã
(
öfûe
, &
fi
, 
fûe
);

750 
ps⁄g
->
bôøã
 = 
fi
.bitrate * 1000;

751 
ps⁄g
->
ßm∂î©e
 = 
fi
.samplerate;

753 if(!
ps⁄g
->
s⁄g_Àngth
)

755 if(
fi
.
numbî_of_‰ames
)

757 
ps⁄g
->
s⁄g_Àngth
 = ()(()(
fi
.
numbî_of_‰ames
 * fi.
ßm∂es_≥r_‰ame
 * 1000.) /

758 ()
fi
.
ßm∂î©e
);

759 
ps⁄g
->
vbr_sˇÀ
 = 78;

763 
ps⁄g
->
s⁄g_Àngth
 = ()(()(
fûe_size
 - 
Â_size
) * 8. /

764 ()
fi
.
bôøã
);

767 
ps⁄g
->
ch™√ls
 = 
fi
.
°îeo
 ? 2 : 1;

769 
	`f˛o£
(
öfûe
);

772 
ps⁄g
->
blockÆignmít
 = 1;

773 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "MP3");

776 
	}
}

	@tagutils/tagutils-mp3.h

24 
	smp3_‰ameöfo
 {

25 
	mœyî
;

26 
	mbôøã
;

27 
	mßm∂î©e
;

28 
	m°îeo
;

30 
	m‰ame_Àngth
;

31 
	m¸c_¥Ÿe˘ed
;

32 
	mßm∂es_≥r_‰ame
;

33 
	m∑ddög
;

34 
	mxög_off£t
;

35 
	mnumbî_of_‰ames
;

37 
	m‰ame_off£t
;

39 
	mm≥g_vîsi⁄
;

40 
	mid3_vîsi⁄
;

42 
	mis_vÆid
;

45 
_gë_mp3ègs
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

46 
_gë_mp3fûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

47 
_decode_mp3_‰ame
(*
‰ame
, 
mp3_‰ameöfo
 *
pfi
);

50 
	gbôøã_tbl
[5][16] = {

59 
	gßm∂e_øã_tbl
[3][4] = {

	@tagutils/tagutils-ogg.c

27 
	s_ogg_°ªam_¥o˚ss‹
 {

28 (*
	m¥o˚ss_∑ge
)(
	m_ogg_°ªam_¥o˚ss‹
 *, 
	mogg_∑ge
 *, 
	ms⁄g_mëad©a
 *);

29 (*
	m¥o˚ss_íd
)(
	m_ogg_°ªam_¥o˚ss‹
 *, 
	ms⁄g_mëad©a
 *);

30 
	misûÀgÆ
;

31 
	mc⁄°øöt_viﬁ©ed
;

32 
	mshownûÀgÆ
;

33 
	mi¢ew
;

34 
	m£qno
;

35 
	mlo°£q
;

37 
	m°¨t
;

38 
	míd
;

40 
	mnum
;

41 *
	mty≥
;

43 
ogg_uöt32_t
 
	m£rül
;

44 
ogg_°ªam_°©e
 
	mos
;

45 *
	md©a
;

46 } 
	togg_°ªam_¥o˚ss‹
;

49 
ogg_°ªam_¥o˚ss‹
 *
	m°ªams
;

50 
	mÆloˇãd
;

51 
	mu£d
;

53 
	mö_hódîs
;

54 } 
	togg_°ªam_£t
;

57 
v‹bis_öfo
 
	mvi
;

58 
v‹bis_commít
 
	mvc
;

60 
ogg_öt64_t
 
	mbyãs
;

61 
ogg_öt64_t
 
	mœ°gønuÀpos
;

62 
ogg_öt64_t
 
	mfú°gønuÀpos
;

64 
	md⁄ehódîs
;

65 } 
	togg_misc_v‹bis_öfo
;

67 
	#CONSTRAINT_PAGE_AFTER_EOS
 1

	)

68 
	#CONSTRAINT_MUXING_VIOLATED
 2

	)

70 
ogg_°ªam_£t
 *

71 
	$_ogg_¸óã_°ªam_£t
()

73 
ogg_°ªam_£t
 *
£t
 = 
	`ˇŒoc
(1, (ogg_stream_set));

75 
£t
->
°ªams
 = 
	`ˇŒoc
(5, (
ogg_°ªam_¥o˚ss‹
));

76 
£t
->
Æloˇãd
 = 5;

77 
£t
->
u£d
 = 0;

79  
£t
;

80 
	}
}

83 
	$_ogg_v‹bis_¥o˚ss
(
ogg_°ªam_¥o˚ss‹
 *
°ªam
, 
ogg_∑ge
 *
∑ge
,

84 
s⁄g_mëad©a
 *
ps⁄g
)

86 
ogg_∑ckë
 
∑ckë
;

87 
ogg_misc_v‹bis_öfo
 *
öf
 = 
°ªam
->
d©a
;

88 
i
, 
hódî
 = 0;

90 
	`ogg_°ªam_∑geö
(&
°ªam
->
os
, 
∑ge
);

91 if(
öf
->
d⁄ehódîs
 < 3)

92 
hódî
 = 1;

94 
	`ogg_°ªam_∑ckëout
(&
°ªam
->
os
, &
∑ckë
) > 0)

96 if(
öf
->
d⁄ehódîs
 < 3)

98 if(
	`v‹bis_sy¡hesis_hódîö
(&
öf
->
vi
, &öf->
vc
, &
∑ckë
) < 0)

100 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "CouldÇot decode vorbis header "

101 "∑ckë - invÆid v‹bi†°ªam (%d)\n", 
°ªam
->
num
);

104 
öf
->
d⁄ehódîs
++;

105 if(
öf
->
d⁄ehódîs
 == 3)

107 if(
	`ogg_∑ge_gønuÀpos
(
∑ge
Ë!0 || 
	`ogg_°ªam_∑ckë≥ek
(&
°ªam
->
os
, 
NULL
) == 1)

108 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Nÿhódî i¿v‹bi†°ªam %d\n", 
°ªam
->
num
);

109 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Vorbis headersÖarsed for stream %d, "

110 "öf‹m©i⁄ fﬁlows...\n", 
°ªam
->
num
);

111 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Ch™√ls: %d\n", 
öf
->
vi
.
ch™√ls
);

112 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "R©e: %ld\n\n", 
öf
->
vi
.
øã
);

114 
ps⁄g
->
ßm∂î©e
 = 
öf
->
vi
.
øã
;

115 
ps⁄g
->
ch™√ls
 = 
öf
->
vi
.channels;

117 if(
öf
->
vi
.
bôøã_nomöÆ
 > 0)

119 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Nominal bitrate: %f kb/s\n",

120 ()
öf
->
vi
.
bôøã_nomöÆ
 / 1000.0);

121 
ps⁄g
->
bôøã
 = 
öf
->
vi
.
bôøã_nomöÆ
 / 1000;

125 
uµî_øã
, 
lowî_øã
;

127 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Nominal bitrateÇot set\n");

130 
uµî_øã
 = 0;

131 
lowî_øã
 = 0;

133 if(
öf
->
vi
.
bôøã_uµî
 > 0)

135 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Upper bitrate: %f kb/s\n",

136 ()
öf
->
vi
.
bôøã_uµî
 / 1000.0);

137 
uµî_øã
 = 
öf
->
vi
.
bôøã_uµî
;

141 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Upper bitrateÇot set\n");

144 if(
öf
->
vi
.
bôøã_lowî
 > 0)

146 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Lower bitrate: %f kb/s\n",

147 ()
öf
->
vi
.
bôøã_lowî
 / 1000.0);

148 
lowî_øã
 = 
öf
->
vi
.
bôøã_lowî
;;

152 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Lower bitrateÇot set\n");

155 if(
uµî_øã
 && 
lowî_øã
)

157 
ps⁄g
->
bôøã
 = (
uµî_øã
 + 
lowî_øã
) / 2;

161 
ps⁄g
->
bôøã
 = 
uµî_øã
 + 
lowî_øã
;

165 if(
öf
->
vc
.
commíts
 > 0)

166 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
,

169 
i
 = 0; i < 
öf
->
vc
.
commíts
; i++)

171 
	`vc_sˇn
(
ps⁄g
, 
öf
->
vc
.
u£r_commíts
[
i
], inf->vc.
commít_Àngths
[i]);

177 if(!
hódî
)

179 
ogg_öt64_t
 
gp
 = 
	`ogg_∑ge_gønuÀpos
(
∑ge
);

180 if(
gp
 > 0)

182 if(
gp
 < 
öf
->
œ°gønuÀpos
)

183 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "granulepos in stream %d decreases from %lldÅo %lld",

184 
°ªam
->
num
, 
öf
->
œ°gønuÀpos
, 
gp
);

185 
öf
->
œ°gønuÀpos
 = 
gp
;

189 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Malformed vorbis strem.\n");

191 
öf
->
byãs
 +
∑ge
->
hódî_Àn
 +Öage->
body_Àn
;

193 
	}
}

196 
	$_ogg_v‹bis_íd
(
ogg_°ªam_¥o˚ss‹
 *
°ªam
, 
s⁄g_mëad©a
 *
ps⁄g
)

198 
ogg_misc_v‹bis_öfo
 *
öf
 = 
°ªam
->
d©a
;

199 
bôøã
, 
time
;

201 
time
 = ()
öf
->
œ°gønuÀpos
 / inf->
vi
.
øã
;

202 
bôøã
 = 
öf
->
byãs
 * 8 / 
time
 / 1000;

204 if(
ps⁄g
 !
NULL
)

206 if(
ps⁄g
->
bôøã
 <= 0)

208 
ps⁄g
->
bôøã
 = bitrate * 1000;

210 
ps⁄g
->
s⁄g_Àngth
 = 
time
 * 1000;

213 
	`v‹bis_commít_˛ór
(&
öf
->
vc
);

214 
	`v‹bis_öfo_˛ór
(&
öf
->
vi
);

216 
	`‰ì
(
°ªam
->
d©a
);

217 
	}
}

220 
	$_ogg_¥o˚ss_nuŒ
(
ogg_°ªam_¥o˚ss‹
 *
°ªam
, 
ogg_∑ge
 *
∑ge
, 
s⁄g_mëad©a
 *
ps⁄g
)

223 
	}
}

226 
	$_ogg_¥o˚ss_Ÿhî
(
ogg_°ªam_¥o˚ss‹
 *
°ªam
, 
ogg_∑ge
 *
∑ge
, 
s⁄g_mëad©a
 *
ps⁄g
)

228 
	`ogg_°ªam_∑geö
(&
°ªam
->
os
, 
∑ge
);

229 
	}
}

232 
	$_ogg_‰ì_°ªam_£t
(
ogg_°ªam_£t
 *
£t
)

234 
i
;

236 
i
 = 0; i < 
£t
->
u£d
; i++)

238 if(!
£t
->
°ªams
[
i
].
íd
)

241 if(
£t
->
°ªams
[
i
].
¥o˚ss_íd
)

242 
£t
->
°ªams
[
i
].
	`¥o˚ss_íd
(&£t->°ªams[i], 
NULL
);

244 
	`ogg_°ªam_˛ór
(&
£t
->
°ªams
[
i
].
os
);

247 
	`‰ì
(
£t
->
°ªams
);

248 
	`‰ì
(
£t
);

249 
	}
}

252 
	$_ogg_°ªams_›í
(
ogg_°ªam_£t
 *
£t
)

254 
i
;

255 
ªs
 = 0;

257 
i
 = 0; i < 
£t
->
u£d
; i++)

259 if(!
£t
->
°ªams
[
i
].
íd
)

260 
ªs
++;

263  
ªs
;

264 
	}
}

267 
	$_ogg_nuŒ_°¨t
(
ogg_°ªam_¥o˚ss‹
 *
°ªam
)

269 
°ªam
->
¥o˚ss_íd
 = 
NULL
;

270 
°ªam
->
ty≥
 = "invalid";

271 
°ªam
->
¥o˚ss_∑ge
 = 
_ogg_¥o˚ss_nuŒ
;

272 
	}
}

275 
	$_ogg_Ÿhî_°¨t
(
ogg_°ªam_¥o˚ss‹
 *
°ªam
, *
ty≥
)

277 if(
ty≥
)

278 
°ªam
->
ty≥
 =Åype;

280 
°ªam
->
ty≥
 = "unknown";

281 
°ªam
->
¥o˚ss_∑ge
 = 
_ogg_¥o˚ss_Ÿhî
;

282 
°ªam
->
¥o˚ss_íd
 = 
NULL
;

283 
	}
}

286 
	$_ogg_v‹bis_°¨t
(
ogg_°ªam_¥o˚ss‹
 *
°ªam
)

288 
ogg_misc_v‹bis_öfo
 *
öfo
;

290 
°ªam
->
ty≥
 = "vorbis";

291 
°ªam
->
¥o˚ss_∑ge
 = 
_ogg_v‹bis_¥o˚ss
;

292 
°ªam
->
¥o˚ss_íd
 = 
_ogg_v‹bis_íd
;

294 
°ªam
->
d©a
 = 
	`ˇŒoc
(1, (
ogg_misc_v‹bis_öfo
));

296 
öfo
 = 
°ªam
->
d©a
;

298 
	`v‹bis_commít_öô
(&
öfo
->
vc
);

299 
	`v‹bis_öfo_öô
(&
öfo
->
vi
);

300 
	}
}

302 
ogg_°ªam_¥o˚ss‹
 *

303 
	$_ogg_föd_°ªam_¥o˚ss‹
(
ogg_°ªam_£t
 *
£t
, 
ogg_∑ge
 *
∑ge
)

305 
ogg_uöt32_t
 
£rül
 = 
	`ogg_∑ge_£rü o
(
∑ge
);

306 
i
;

307 
övÆid
 = 0;

308 
c⁄°øöt
 = 0;

309 
ogg_°ªam_¥o˚ss‹
 *
°ªam
;

311 
i
 = 0; i < 
£t
->
u£d
; i++)

313 if(
£rül
 =
£t
->
°ªams
[
i
].serial)

315 
°ªam
 = &(
£t
->
°ªams
[
i
]);

317 
£t
->
ö_hódîs
 = 0;

319 if(
°ªam
->
íd
)

321 
°ªam
->
isûÀgÆ
 = 1;

322 
°ªam
->
c⁄°øöt_viﬁ©ed
 = 
CONSTRAINT_PAGE_AFTER_EOS
;

323  
°ªam
;

326 
°ªam
->
i¢ew
 = 0;

327 
°ªam
->
°¨t
 = 
	`ogg_∑ge_bos
(
∑ge
);

328 
°ªam
->
íd
 = 
	`ogg_∑ge_eos
(
∑ge
);

329 
°ªam
->
£rül
 = serial;

330  
°ªam
;

333 if(
	`_ogg_°ªams_›í
(
£t
Ë&& !£t->
ö_hódîs
)

335 
c⁄°øöt
 = 
CONSTRAINT_MUXING_VIOLATED
;

336 
övÆid
 = 1;

339 
£t
->
ö_hódîs
 = 1;

341 if(
£t
->
Æloˇãd
 < së->
u£d
)

342 
°ªam
 = &
£t
->
°ªams
[£t->
u£d
];

345 
£t
->
Æloˇãd
 += 5;

346 
£t
->
°ªams
 = 
	`ªÆloc
(£t->°ªams, (
ogg_°ªam_¥o˚ss‹
Ë* së->
Æloˇãd
);

347 
°ªam
 = &
£t
->
°ªams
[£t->
u£d
];

349 
£t
->
u£d
++;

350 
°ªam
->
num
 = 
£t
->
u£d
;

352 
°ªam
->
i¢ew
 = 1;

353 
°ªam
->
isûÀgÆ
 = 
övÆid
;

354 
°ªam
->
c⁄°øöt_viﬁ©ed
 = 
c⁄°øöt
;

357 
ªs
;

358 
ogg_∑ckë
 
∑ckë
;

360 
	`ogg_°ªam_öô
(&
°ªam
->
os
, 
£rül
);

361 
	`ogg_°ªam_∑geö
(&
°ªam
->
os
, 
∑ge
);

362 
ªs
 = 
	`ogg_°ªam_∑ckëout
(&
°ªam
->
os
, &
∑ckë
);

363 if(
ªs
 <= 0)

365 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Invalid headerÖage,ÇoÖacket found\n");

366 
	`_ogg_nuŒ_°¨t
(
°ªam
);

368 if(
∑ckë
.
byãs
 >7 && 
	`memcmp
(packet.packet, "\001vorbis", 7) == 0)

369 
	`_ogg_v‹bis_°¨t
(
°ªam
);

370 if(
∑ckë
.
byãs
 >8 && 
	`memcmp
(packet.packet, "OggMIDI\0", 8) == 0)

371 
	`_ogg_Ÿhî_°¨t
(
°ªam
, "MIDI");

373 
	`_ogg_Ÿhî_°¨t
(
°ªam
, 
NULL
);

375 
ªs
 = 
	`ogg_°ªam_∑ckëout
(&
°ªam
->
os
, &
∑ckë
);

376 if(
ªs
 > 0)

378 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Invalid headerÖage in stream %d, "

379 "c⁄èö†mu…ùÀÖackës\n", 
°ªam
->
num
);

383 
	`ogg_°ªam_˛ór
(&
°ªam
->
os
);

384 
	`ogg_°ªam_öô
(&
°ªam
->
os
, 
£rül
);

387 
°ªam
->
°¨t
 = 
	`ogg_∑ge_bos
(
∑ge
);

388 
°ªam
->
íd
 = 
	`ogg_∑ge_eos
(
∑ge
);

389 
°ªam
->
£rül
 = serial;

391  
°ªam
;

392 
	}
}

395 
	$_ogg_gë_√xt_∑ge
(
FILE
 *
f
, 
ogg_sync_°©e
 *
sync
, 
ogg_∑ge
 *
∑ge
,

396 
ogg_öt64_t
 *
wrôãn
)

398 
ªt
;

399 *
buf„r
;

400 
byãs
;

402 (
ªt
 = 
	`ogg_sync_∑geout
(
sync
, 
∑ge
)) <= 0)

404 if(
ªt
 < 0)

405 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Hﬁêö d©®foundáà≠¥oxim©êoff£à%Œd byãs. C‹ru±ed ogg.\n", *
wrôãn
);

407 
buf„r
 = 
	`ogg_sync_buf„r
(
sync
, 4500);

408 
byãs
 = 
	`‰ód
(
buf„r
, 1, 4500, 
f
);

409 if(
byãs
 <= 0)

411 
	`ogg_sync_wrŸe
(
sync
, 0);

414 
	`ogg_sync_wrŸe
(
sync
, 
byãs
);

415 *
wrôãn
 +
byãs
;

419 
	}
}

423 
	$_gë_oggfûeöfo
(*
fûíame
, 
s⁄g_mëad©a
 *
ps⁄g
)

425 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, "rb");

426 
ogg_sync_°©e
 
sync
;

427 
ogg_∑ge
 
∑ge
;

428 
ogg_°ªam_£t
 *
¥o˚ss‹s
 = 
	`_ogg_¸óã_°ªam_£t
();

429 
gŸ∑ge
 = 0;

430 
ogg_öt64_t
 
wrôãn
 = 0;

432 if(!
fûe
)

434 
	`DPRINTF
(
E_FATAL
, 
L_SCANNER
,

435 "Eº‹ o≥nög i≈uàfûê\"%s\": %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

436 
	`_ogg_‰ì_°ªam_£t
(
¥o˚ss‹s
);

440 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Pro˚ssög fûê\"%s\"...\n\n", 
fûíame
);

442 
	`ogg_sync_öô
(&
sync
);

444 
	`_ogg_gë_√xt_∑ge
(
fûe
, &
sync
, &
∑ge
, &
wrôãn
))

446 
ogg_°ªam_¥o˚ss‹
 *
p
 = 
	`_ogg_föd_°ªam_¥o˚ss‹
(
¥o˚ss‹s
, &
∑ge
);

447 
gŸ∑ge
 = 1;

449 if(!
p
)

451 
	`DPRINTF
(
E_FATAL
, 
L_SCANNER
, "CouldÇot findáÖrocessor for stream, bailing\n");

452 
	`_ogg_‰ì_°ªam_£t
(
¥o˚ss‹s
);

453 
	`f˛o£
(
fûe
);

457 if(
p
->
isûÀgÆ
 && !p->
shownûÀgÆ
)

459 *
c⁄°øöt
;

460 
p
->
c⁄°øöt_viﬁ©ed
)

462 
CONSTRAINT_PAGE_AFTER_EOS
:

463 
c⁄°øöt
 = "Page found for streamáfter EOS flag";

465 
CONSTRAINT_MUXING_VIOLATED
:

466 
c⁄°øöt
 = "Ogg muxing constraints violated,Çew "

470 
c⁄°øöt
 = "Error unknown.";

473 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
,

476 
p
->
num
, 
c⁄°øöt
);

477 
p
->
shownûÀgÆ
 = 1;

479 if(!
p
->
i¢ew
)

483 if(
p
->
i¢ew
)

485 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "NewÜogical stream (#%d, serial: %08x):Åype %s\n",

486 
p
->
num
,Ö->
£rül
,Ö->
ty≥
);

487 if(!
p
->
°¨t
)

488 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
,

490 
p
->
num
);

492 if(
p
->
°¨t
)

493 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "stream start flag found in mid-stream "

494 "⁄ såóm %d\n", 
p
->
num
);

496 if(
p
->
£qno
++ !
	`ogg_∑ge_∑gío
(&
∑ge
))

498 if(!
p
->
lo°£q
)

499 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
,

502 
p
->
num
, 
	`ogg_∑ge_∑gío
(&
∑ge
),Ö->
£qno
 - 1);

503 
p
->
£qno
 = 
	`ogg_∑ge_∑gío
(&
∑ge
);

504 
p
->
lo°£q
 = 1;

507 
p
->
lo°£q
 = 0;

509 if(!
p
->
isûÀgÆ
)

511 
p
->
	`¥o˚ss_∑ge
’, &
∑ge
, 
ps⁄g
);

513 if(
p
->
íd
)

515 if(
p
->
¥o˚ss_íd
)

516 
p
->
	`¥o˚ss_íd
’, 
ps⁄g
);

517 
	`DPRINTF
(
E_MAXDEBUG
, 
L_SCANNER
, "Logiˇ»°ªam %dÉnded\n", 
p
->
num
);

518 
p
->
isûÀgÆ
 = 1;

519 
p
->
c⁄°øöt_viﬁ©ed
 = 
CONSTRAINT_PAGE_AFTER_EOS
;

524 
	`_ogg_‰ì_°ªam_£t
(
¥o˚ss‹s
);

526 
	`ogg_sync_˛ór
(&
sync
);

528 
	`f˛o£
(
fûe
);

530 if(!
gŸ∑ge
)

532 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Nÿogg d©®found i¿fûê\"%s\".\n", 
fûíame
);

537 
	}
}

	@tagutils/tagutils-ogg.h

23 
_gë_oggfûeöfo
(*
fûíame
, 
s⁄g_mëad©a
 *
ps⁄g
);

	@tagutils/tagutils-pcm.c

25 
	$_gë_pcmfûeöfo
(*
fûíame
, 
s⁄g_mëad©a
 *
ps⁄g
)

27 
°©
 
fûe
;

28 
uöt32_t
 
£c
, 
ms
;

30 if–
	`°©
(
fûíame
, &
fûe
) != 0 )

32 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "CouldÇŸ sèà%s\n", 
fûíame
);

36 
ps⁄g
->
fûe_size
 = 
fûe
.
°_size
;

37 
ps⁄g
->
bôøã
 = 1411200;

38 
ps⁄g
->
ßm∂î©e
 = 44100;

39 
ps⁄g
->
ch™√ls
 = 2;

40 
£c
 = 
ps⁄g
->
fûe_size
 / (ps⁄g->
bôøã
 / 8);

41 
ms
 = ((
ps⁄g
->
fûe_size
 % (ps⁄g->
bôøã
 / 8)) * 1000) / (psong->bitrate / 8);

42 
ps⁄g
->
s⁄g_Àngth
 = (
£c
 * 1000Ë+ 
ms
;

43 
ps⁄g
->
los¶ess
 = 1;

45 
	`xa•rötf
(&(
ps⁄g
->
mime
), "audio/L16;øã=%d;ch™√ls=%d",Ös⁄g->
ßm∂î©e
,Ös⁄g->
ch™√ls
);

46 
	`xa•rötf
(&(
ps⁄g
->
d a_≤
), "LPCM");

49 
	}
}

	@tagutils/tagutils-pcm.h

21 
_gë_pcmfûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

	@tagutils/tagutils-plist.c

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<˘y≥.h
>

27 
	~"misc.h
"

28 
	~"ègutûs.h
"

29 
	~"ãxtutûs.h
"

30 
	~"log.h
"

33 
	#MAX_BUF
 4096

	)

35 
FILE
 *
	gÂ
 = 0;

36 
	g_utf8bom
 = 0;

37 
	g_åackno
;

39 (*
_√xt_åack
)(
s⁄g_mëad©a
*, 
°©
*, *, *);

40 
	`_m3u_∂s_√xt_åack
(
s⁄g_mëad©a
*, 
°©
*, *, *);

43 
	$°¨t_∂i°
(c⁄° *
∑th
, 
s⁄g_mëad©a
 *
ps⁄g
, 
°©
 *°©, *
œng
, *
ty≥
)

45 *
‚ame
, *
suffix
;

47 
_√xt_åack
 = 0;

48 
_utf8bom
 = 0;

49 
_åackno
 = 0;

51 if(
	`°rˇ£cmp
(
ty≥
, "m3u") == 0)

52 
_√xt_åack
 = 
_m3u_∂s_√xt_åack
;

53 if(
	`°rˇ£cmp
(
ty≥
, "pls") == 0)

54 
_√xt_åack
 = 
_m3u_∂s_√xt_åack
;

56 if(!
_√xt_åack
)

58 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "Unsuµ‹ãdÖœyli°Åy≥ <%s> (%s)\n", 
ty≥
, 
∑th
);

62 if(!(
Â
 = 
	`f›í
(
∑th
, "rb")))

64 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "C™nŸ o≥¿%s\n", 
∑th
);

68 if(!
ps⁄g
)

71 
	`mem£t
((*)
ps⁄g
, 0, (
s⁄g_mëad©a
));

72 
ps⁄g
->
is_∂i°
 = 1;

73 
ps⁄g
->
∑th
 = 
	`°rdup
(path);

74 
ps⁄g
->
ty≥
 =Åype;

76 
‚ame
 = 
	`°ºchr
(
ps⁄g
->
∑th
, '/');

77 
ps⁄g
->
ba£«me
 = 
‚ame
 ? f«mê+ 1 :Ös⁄g->
∑th
;

79 
ps⁄g
->
tôÀ
 = 
	`°rdup
’s⁄g->
ba£«me
);

80 
suffix
 = 
	`°ºchr
(
ps⁄g
->
tôÀ
, '.');

81 if(
suffix
) *suffix = '\0';

83 if(
°©
)

85 if(!
ps⁄g
->
time_modifõd
)

86 
ps⁄g
->
time_modifõd
 = 
°©
->
°_mtime
;

87 
ps⁄g
->
fûe_size
 = 
°©
->
°_size
;

91 
	}
}

94 
	$_m3u_∂s_√xt_åack
(
s⁄g_mëad©a
 *
ps⁄g
, 
°©
 *°©, *
œng
, *
ty≥
)

96 
buf
[
MAX_BUF
], *
p
;

97 
Àn
;

99 
	`mem£t
((*)
ps⁄g
, 0, (
s⁄g_mëad©a
));

102 
p
 = 
	`fgës
(
buf
, 
MAX_BUF
, 
Â
);

103 if(!
p
)

105 
	`f˛o£
(
Â
);

109 if(
	`°rˇ£cmp
(
ty≥
, "m3u") == 0)

112 if(!
_utf8bom
 && 
p
[0] == '\xef' &&Ö[1] == '\xbb' &&Ö[2] == '\xbf')

114 
_utf8bom
 = 1;

115 
p
 += 3;

119 
p
)

121 
	`is•a˚
(*
p
))Ö++;

123 if(!(*
p
) || *p == '#')

124 
√xt_löe
;

126 if(!
	`i•röt
(*
p
))

128 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "PlaylistÜooks bad (unprintable characters)\n");

129 
	`f˛o£
(
Â
);

133 if(
	`°rˇ£cmp
(
ty≥
, "pls") == 0)

136 if(!
_åackno
)

138 if(
	`°∫cmp
(
p
, "[playlist]", 10))

140 
_åackno
++;

141 
√xt_löe
;

144 if(
	`°∫cmp
(
p
, "File", 4) != 0)

145 
√xt_löe
;

147 
ps⁄g
->
åack
 = 
	`°πﬁ
(
p
+4, &p, 10);

148 if(!
ps⁄g
->
åack
 || !
p
++)

149 
√xt_löe
;

150 
_åackno
 = 
ps⁄g
->
åack
;

152 if(
	`°rˇ£cmp
(
ty≥
, "m3u") == 0)

153 
ps⁄g
->
åack
 = ++
_åackno
;

155 
Àn
 = 
	`°æí
(
p
);

156 
p
[
Àn
-1] == '\r' ||Ö[len-1] == '\n')

157 
p
[--
Àn
] = '\0';

158 
ps⁄g
->
∑th
 = 
	`°rdup
(
p
);

160 
√xt_löe
:

161 
p
 = 
	`fgës
(
buf
, 
MAX_BUF
, 
Â
);

164 
	`f˛o£
(
Â
);

166 
	}
}

169 
	$√xt_∂i°_åack
(
s⁄g_mëad©a
 *
ps⁄g
, 
°©
 *°©, *
œng
, *
ty≥
)

171 if(
_√xt_åack
)

172  
	`_√xt_åack
(
ps⁄g
, 
°©
, 
œng
, 
ty≥
);

174 
	}
}

	@tagutils/tagutils-wav.c

24 
	#GET_WAV_INT32
(
p
Ë((((
uöt8_t
)((p)[3])) << 24) | \

25 (((
uöt8_t
)((
p
)[2])) << 16) | \

26 (((
uöt8_t
)((
p
)[1])) << 8) | \

27 (((
uöt8_t
)((
p
)[0]))))

	)

29 
	#GET_WAV_INT16
(
p
Ë((((
uöt8_t
)((p)[1])) << 8) | \

30 (((
uöt8_t
)((
p
)[0]))))

	)

33 
	$_gë_wavègs
(*
fûíame
, 
s⁄g_mëad©a
 *
ps⁄g
)

35 
fd
;

36 
uöt32_t
 
Àn
;

37 
hdr
[12];

38 
fmt
[16];

40 
uöt32_t
 
f‹m©_d©a_Àngth
 = 0;

41 
uöt32_t
 
com¥essi⁄_code
 = 0;

42 
uöt32_t
 
ch™√l_cou¡
 = 0;

43 
uöt32_t
 
ßm∂e_øã
 = 0;

44 
uöt32_t
 
ßm∂e_bô_Àngth
 = 0;

45 
uöt32_t
 
bô_øã
;

46 
uöt32_t
 
d©a_Àngth
 = 0;

47 
uöt32_t
 
£c
, 
ms
;

49 
uöt32_t
 
cuºít_off£t
;

50 
uöt32_t
 
block_Àn
;

54 if(!(
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
)))

56 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "CouldÇot create file handle\n");

60 
Àn
 = 12;

61 if(!(
Àn
 = 
	`ªad
(
fd
, 
hdr
,Üen)) || (len != 12))

63 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "CouldÇŸÑód wav hódî from %s\n", 
fûíame
);

64 
	`˛o£
(
fd
);

70 if(
	`°∫cmp
((*)
hdr
 + 0, "RIFF", 4) ||

71 
	`°∫cmp
((*)
hdr
 + 8, "WAVE", 4))

73 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "InvÆid wav hódî i¿%s\n", 
fûíame
);

74 
	`˛o£
(
fd
);

81 
cuºít_off£t
 = 12;

82 
cuºít_off£t
 + 8 < 
ps⁄g
->
fûe_size
)

84 
Àn
 = 8;

85 if(!(
Àn
 = 
	`ªad
(
fd
, 
hdr
,Üen)) || (len != 8))

87 
	`˛o£
(
fd
);

88 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Eº‹Ñódög block: %s\n", 
fûíame
);

92 
cuºít_off£t
 += 8;

93 
block_Àn
 = 
	`GET_WAV_INT32
(
hdr
 + 4);

103 if(
block_Àn
 < 0)

105 
	`˛o£
(
fd
);

106 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Bad blockÜí: %s\n", 
fûíame
);

110 if(
	`°∫cmp
((*)&
hdr
, "fmt ", 4) == 0)

113 
Àn
 = 16;

114 if(!
	`ªad
(
fd
, 
fmt
, 
Àn
) || (len != 16))

116 
	`˛o£
(
fd
);

117 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "Bad .wav file: can'tÑead fmt: %s\n",

118 
fûíame
);

122 
f‹m©_d©a_Àngth
 = 
block_Àn
;

123 
com¥essi⁄_code
 = 
	`GET_WAV_INT16
(
fmt
);

124 
ch™√l_cou¡
 = 
	`GET_WAV_INT16
(
fmt
 + 2);

125 
ßm∂e_øã
 = 
	`GET_WAV_INT32
(
fmt
 + 4);

126 
ßm∂e_bô_Àngth
 = 
	`GET_WAV_INT16
(
fmt
 + 14);

133 if(
	`°∫cmp
((*)&
hdr
, "data", 4) == 0)

136 
d©a_Àngth
 = 
block_Àn
;

137 
√xt_block
;

139 if(
	`°∫cmp
((*)&
hdr
, "LIST", 4) == 0)

141 *
ègs
;

142 *
p
;

143 
off
;

144 
uöt32_t
 
ègÀn
;

145 **
m
;

147 
Àn
 = 
	`GET_WAV_INT32
(
hdr
 + 4);

148 if(
Àn
 > 65536 ||Üen < 9)

149 
√xt_block
;

151 
ègs
 = 
	`mÆloc
(
Àn
+1);

152 if(!
ègs
)

153 
√xt_block
;

155 if(
	`ªad
(
fd
, 
ègs
, 
Àn
) <Üen ||

156 
	`°∫cmp
(
ègs
, "INFO", 4) != 0)

158 
	`‰ì
(
ègs
);

159 
√xt_block
;

161 
ègs
[
Àn
] = '\0';

163 
off
 = 4;

164 
p
 = 
ègs
 + 
off
;

165 
off
 < 
Àn
 - 8)

167 
ègÀn
 = 
	`GET_WAV_INT32
(
p
 + 4);

170 
m
 = 
NULL
;

171 i‡(
ègÀn
 > 2048) {

172 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "IgnoringÜongÅag [%.*s] in %s\n",

173 4, 
p
+8, 
fûíame
);

175 if(
	`°∫cmp
(
p
, "INAM", 4) == 0)

176 
m
 = &(
ps⁄g
->
tôÀ
);

177 if(
	`°∫cmp
(
p
, "IALB", 4) == 0 ||

178 
	`°∫cmp
(
p
, "IPRD", 4) == 0)

179 
m
 = &(
ps⁄g
->
Æbum
);

180 if(
	`°∫cmp
(
p
, "IGRE", 4) == 0 ||

181 
	`°∫cmp
(
p
, "IGNR", 4) == 0)

182 
m
 = &(
ps⁄g
->
gíª
);

183 if(
	`°∫cmp
(
p
, "ICMT", 4) == 0)

184 
m
 = &(
ps⁄g
->
commít
);

185 if(
	`°∫cmp
(
p
, "IART", 4) == 0)

186 
m
 = &(
ps⁄g
->
c⁄åibut‹
[
ROLE_TRACKARTIST
]);

187 if(
	`°∫cmp
(
p
, "IAAR", 4) == 0)

188 
m
 = &(
ps⁄g
->
c⁄åibut‹
[
ROLE_ALBUMARTIST
]);

189 if(
	`°∫cmp
(
p
, "ICOM", 4) == 0 ||

190 
	`°∫cmp
(
p
, "IMUS", 4) == 0)

191 
m
 = &(
ps⁄g
->
c⁄åibut‹
[
ROLE_COMPOSER
]);

192 if(
	`°∫ˇ£cmp
(
p
, "ITRK", 4) == 0)

193 
ps⁄g
->
åack
 = 
	`©oi
(
p
 + 8);

194 if(
	`°∫cmp
(
p
, "ICRD", 4) == 0 ||

195 
	`°∫cmp
(
p
, "IYER", 4) == 0)

196 
ps⁄g
->
yór
 = 
	`©oi
(
p
 + 8);

197 if(
m
)

199 *
m
 = 
	`mÆloc
(
ègÀn
 + 1);

200 
	`°∫˝y
(*
m
, 
p
 + 8, 
ègÀn
);

201 (*
m
)[
ègÀn
] = '\0';

204 
p
 +
ègÀn
 + 8;

205 
off
 +
ègÀn
 + 8;

207 *
p
 ='\0' && 
off
 < 
Àn
) {

208 
p
++;

209 
off
++;

212 
	`‰ì
(
ègs
);

214 
√xt_block
:

215 
	`l£ek
(
fd
, 
cuºít_off£t
 + 
block_Àn
, 
SEEK_SET
);

216 
cuºít_off£t
 +
block_Àn
;

218 
	`˛o£
(
fd
);

220 if(((
f‹m©_d©a_Àngth
 != 16) && (format_data_length != 18)) ||

221 (
com¥essi⁄_code
 != 1) ||

222 (
ch™√l_cou¡
 < 1))

224 
	`DPRINTF
(
E_WARN
, 
L_SCANNER
, "InvÆid wav hódî i¿%s\n", 
fûíame
);

228 if–!
d©a_Àngth
 )

229 
d©a_Àngth
 = 
ps⁄g
->
fûe_size
 - 44;

231 
bô_øã
 = 
ßm∂e_øã
 * 
ch™√l_cou¡
 * ((
ßm∂e_bô_Àngth
 + 7) / 8) * 8;

232 
ps⁄g
->
bôøã
 = 
bô_øã
;

233 
ps⁄g
->
ßm∂î©e
 = 
ßm∂e_øã
;

234 
ps⁄g
->
ch™√ls
 = 
ch™√l_cou¡
;

236 
£c
 = 
d©a_Àngth
 / (
bô_øã
 / 8);

237 
ms
 = ((
d©a_Àngth
 % (
bô_øã
 / 8)) * 1000) / (bit_rate / 8);

238 
ps⁄g
->
s⁄g_Àngth
 = (
£c
 * 1000Ë+ 
ms
;

247 
	}
}

250 
	$_gë_wavfûeöfo
(*
fûíame
, 
s⁄g_mëad©a
 *
ps⁄g
)

252 
ps⁄g
->
los¶ess
 = 1;

258 
	}
}

	@tagutils/tagutils-wav.h

22 
_gë_wavfûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

23 
_gë_wavègs
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

	@tagutils/tagutils.c

24 
	~<˘y≥.h
>

25 
	~<î∫o.h
>

26 
	~<id3èg.h
>

27 
	~<°dlib.h
>

28 
	~<°ddef.h
>

29 
	~<°rög.h
>

30 
	~<f˙é.h
>

31 
	~<uni°d.h
>

32 
	~<time.h
>

33 
	~<sys/time.h
>

34 
	~<√töë/ö.h
>

35 
	~<ogg/ogg.h
>

36 
	~<v‹bis/codec.h
>

37 
	~<FLAC/mëad©a.h
>

39 
	~"../c⁄fig.h
"

40 #ifde‡
HAVE_ICONV


41 
	~<ic⁄v.h
>

44 
	~<sqlôe3.h
>

45 
	~"ègutûs.h
"

46 
	~"misc.h
"

47 
	~"ãxtutûs.h
"

48 
	~"../mëad©a.h
"

49 
	~"../utûs.h
"

50 
	~"../log.h
"

52 
	sid3hódî
 {

53 
	mid
[3];

54 
	mvîsi⁄
[2];

55 
	mÊags
;

56 
	msize
[4];

57 } 
__©åibuã
((
∑cked
));

59 *
	gwöamp_gíª
[] = {

100 
	#WINAMP_GENRE_UNKNOWN
 (((
wöamp_gíª
Ë/ (wöamp_gíª[0])Ë- 1)

	)

106 
	~"ègutûs-mp3.h
"

107 
	~"ègutûs-Øc.h
"

108 
	~"ègutûs-ogg.h
"

109 
	~"ègutûs-Êc.h
"

110 
	~"ègutûs-asf.h
"

111 
	~"ègutûs-wav.h
"

112 
	~"ègutûs-pcm.h
"

114 
_gë_ègs
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

115 
_gë_fûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
);

123 * 
	mty≥
;

124 (*
	mgë_ègs
)(* 
	mfûe
, 
s⁄g_mëad©a
* 
	mps⁄g
);

125 (*
	mgë_fûeöfo
)(* 
	mfûe
, 
s⁄g_mëad©a
* 
	mps⁄g
);

126 } 
	tègh™dÀr
;

128 
ègh™dÀr
 
	gègh™dÀrs
[] = {

129 { "Øc", 
_gë_Ø˘ags
, 
_gë_Øcfûeöfo
 },

130 { "mp3", 
_gë_mp3ègs
, 
_gë_mp3fûeöfo
 },

131 { "Êc", 
_gë_Ê˘ags
, 
_gë_Êcfûeöfo
 },

132 { "ogg", 0, 
_gë_oggfûeöfo
 },

133 { "asf", 0, 
_gë_asffûeöfo
 },

134 { "wav", 
_gë_wavègs
, 
_gë_wavfûeöfo
 },

135 { "pcm", 0, 
_gë_pcmfûeöfo
 },

136 { 
NULL
, 0 }

142 
	~"ègutûs-misc.c
"

143 
	~"ègutûs-mp3.c
"

144 
	~"ègutûs-Øc.c
"

145 
	~"ègutûs-ogg.c
"

146 
	~"ègutûs-Êc.c
"

147 
	~"ègutûs-asf.c
"

148 
	~"ègutûs-wav.c
"

149 
	~"ègutûs-pcm.c
"

150 
	~"ègutûs-∂i°.c
"

154 
	#MAYBEFREE
(
a
Ë{ if(◊)Ë
	`‰ì
(◊)); };

	)

156 
	$‰ìègs
(
s⁄g_mëad©a
 *
ps⁄g
)

158 
rﬁe
;

160 
	`MAYBEFREE
(
ps⁄g
->
∑th
);

161 
	`MAYBEFREE
(
ps⁄g
->
image
);

162 
	`MAYBEFREE
(
ps⁄g
->
tôÀ
);

163 
	`MAYBEFREE
(
ps⁄g
->
Æbum
);

164 
	`MAYBEFREE
(
ps⁄g
->
gíª
);

165 
	`MAYBEFREE
(
ps⁄g
->
commít
);

166 
rﬁe
 = 
ROLE_START
;Ñﬁê<
ROLE_LAST
;Ñole++)

168 
	`MAYBEFREE
(
ps⁄g
->
c⁄åibut‹
[
rﬁe
]);

169 
	`MAYBEFREE
(
ps⁄g
->
c⁄åibut‹_s‹t
[
rﬁe
]);

171 
	`MAYBEFREE
(
ps⁄g
->
groupög
);

172 
	`MAYBEFREE
(
ps⁄g
->
mime
);

173 
	`MAYBEFREE
(
ps⁄g
->
d a_≤
);

174 
	`MAYBEFREE
(
ps⁄g
->
ègvîsi⁄
);

175 
	`MAYBEFREE
(
ps⁄g
->
musicbøöz_Æbumid
);

176 
	`MAYBEFREE
(
ps⁄g
->
musicbøöz_åackid
);

177 
	`MAYBEFREE
(
ps⁄g
->
musicbøöz_¨ti°id
);

178 
	`MAYBEFREE
(
ps⁄g
->
musicbøöz_Æbum¨ti°id
);

179 
	}
}

183 
	$_gë_fûeöfo
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
)

185 
ègh™dÀr
 *
hdl
;

188 
hdl
 = 
ègh™dÀrs
; hdl->
ty≥
; ++hdl)

189 if(!
	`°rcmp
(
hdl
->
ty≥
, 
ps⁄g
->type))

192 if(
hdl
->
gë_fûeöfo
)

193  
hdl
->
	`gë_fûeöfo
(
fûe
, 
ps⁄g
);

196 
	}
}

200 
	$_make_composôe_ègs
(
s⁄g_mëad©a
 *
ps⁄g
)

202 
Àn
;

204 
Àn
 = 1;

206 if(!
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
] &&

207 (
ps⁄g
->
c⁄åibut‹
[
ROLE_BAND
] ||Ös⁄g->c⁄åibut‹[
ROLE_CONDUCTOR
]))

209 if(
ps⁄g
->
c⁄åibut‹
[
ROLE_BAND
])

210 
Àn
 +
	`°æí
(
ps⁄g
->
c⁄åibut‹
[
ROLE_BAND
]);

211 if(
ps⁄g
->
c⁄åibut‹
[
ROLE_CONDUCTOR
])

212 
Àn
 +
	`°æí
(
ps⁄g
->
c⁄åibut‹
[
ROLE_CONDUCTOR
]);

214 
Àn
 += 3;

216 
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
] = (*)
	`ˇŒoc
(
Àn
, 1);

217 if(
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
])

219 if(
ps⁄g
->
c⁄åibut‹
[
ROLE_BAND
])

220 
	`°rˇt
(
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
],Ös⁄g->c⁄åibut‹[
ROLE_BAND
]);

222 if(
ps⁄g
->
c⁄åibut‹
[
ROLE_BAND
] &&Ös⁄g->c⁄åibut‹[
ROLE_CONDUCTOR
])

223 
	`°rˇt
(
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
], " - ");

225 if(
ps⁄g
->
c⁄åibut‹
[
ROLE_CONDUCTOR
])

226 
	`°rˇt
(
ps⁄g
->
c⁄åibut‹
[
ROLE_ARTIST
],Ös⁄g->c⁄åibut‹[
ROLE_CONDUCTOR
]);

231 if(!
ps⁄g
->
tôÀ
)

233 *
suffix
;

234 
ps⁄g
->
tôÀ
 = 
	`°rdup
’s⁄g->
ba£«me
);

235 
suffix
 = 
	`°ºchr
(
ps⁄g
->
tôÀ
, '.');

236 if(
suffix
) *suffix = '\0';

239 
	}
}

245 
	$_gë_ègs
(*
fûe
, 
s⁄g_mëad©a
 *
ps⁄g
)

247 
ègh™dÀr
 *
hdl
;

250 
hdl
 = 
ègh™dÀrs
 ; hdl->
ty≥
 ; ++hdl)

251 if(!
	`°rˇ£cmp
(
hdl
->
ty≥
, 
ps⁄g
->type))

254 if(
hdl
->
gë_ègs
)

256  
hdl
->
	`gë_ègs
(
fûe
, 
ps⁄g
);

260 
	}
}

265 
	$ªadègs
(*
∑th
, 
s⁄g_mëad©a
 *
ps⁄g
, 
°©
 *°©, *
œng
, *
ty≥
)

267 *
‚ame
;

269 if(
œng_ödex
 == -1)

270 
œng_ödex
 = 
	`_œng2˝
(
œng
);

272 
	`mem£t
((*)
ps⁄g
, 0, (
s⁄g_mëad©a
));

273 
ps⁄g
->
∑th
 = 
	`°rdup
(path);

274 
ps⁄g
->
ty≥
 =Åype;

276 
‚ame
 = 
	`°ºchr
(
ps⁄g
->
∑th
, '/');

277 
ps⁄g
->
ba£«me
 = 
‚ame
 ? f«mê+ 1 :Ös⁄g->
∑th
;

279 if(
°©
)

281 if(!
ps⁄g
->
time_modifõd
)

282 
ps⁄g
->
time_modifõd
 = 
°©
->
°_mtime
;

283 
ps⁄g
->
fûe_size
 = 
°©
->
°_size
;

287 if–
	`_gë_ègs
(
∑th
, 
ps⁄g
) == 0 )

289 
	`_make_composôe_ègs
(
ps⁄g
);

293  
	`_gë_fûeöfo
(
∑th
, 
ps⁄g
);

294 
	}
}

	@tagutils/tagutils.h

27 #i‚de‡
_TAG_H_


28 
	#_TAG_H_


	)

30 
	~<°dio.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/°©.h
>

33 
	~<libgí.h
>

35 
	#ROLE_NOUSE
 0

	)

36 
	#ROLE_START
 1

	)

37 
	#ROLE_ARTIST
 1

	)

38 
	#ROLE_TRACKARTIST
 2

	)

39 
	#ROLE_ALBUMARTIST
 3

	)

40 
	#ROLE_BAND
 4

	)

41 
	#ROLE_CONDUCTOR
 5

	)

42 
	#ROLE_COMPOSER
 6

	)

43 
	#ROLE_LAST
 6

	)

44 
	#N_ROLE
 7

	)

46 
	ss⁄g_mëad©a
 {

47 
	mfûe_size
;

48 *
	mdú∑th
;

49 *
	m∑th
;

50 *
	mba£«me
;

51 *
	mty≥
;

52 
	mtime_modifõd
;

54 *
	mimage
;

55 
	mimage_size
;

57 *
	mtôÀ
;

58 *
	mÆbum
;

59 *
	mgíª
;

60 *
	mcommít
;

62 *
	mc⁄åibut‹
[
N_ROLE
];

66 *
	mc⁄åibut‹_s‹t
[
N_ROLE
];

69 *
	mgroupög
;

70 
	myór
;

71 
	måack
;

72 
	mtŸÆ_åacks
;

73 
	mdisc
;

74 
	mtŸÆ_discs
;

75 
	mbpm
;

76 
	mcompû©i⁄
;

78 
	mbôøã
;

79 
	mmax_bôøã
;

80 
	mßm∂î©e
;

81 
	mßm∂esize
;

82 
	mch™√ls
;

83 
	ms⁄g_Àngth
;

84 
	maudio_size
;

85 
	maudio_off£t
;

86 
	mvbr_sˇÀ
;

87 
	mlos¶ess
;

88 
	mblockÆignmít
;

90 *
	mmime
;

91 *
	md a_≤
;

93 *
	mègvîsi⁄
;

95 
	mÆbum_id
;

96 
	måack_id
;

97 
	mgíª_id
;

98 
	mc⁄åibut‹_id
[
N_ROLE
];

100 *
	mmusicbøöz_Æbumid
;

101 *
	mmusicbøöz_åackid
;

102 *
	mmusicbøöz_¨ti°id
;

103 *
	mmusicbøöz_Æbum¨ti°id
;

105 
	mis_∂i°
;

106 
	m∂i°_posôi⁄
;

107 
	m∂i°_id
;

110 
	#WMA
 0x161

	)

111 
	#WMAPRO
 0x162

	)

112 
	#WMALSL
 0x163

	)

114 
sˇn_öô
(*
∑th
);

115 
make_composôe_ègs
(
s⁄g_mëad©a
 *
ps⁄g
);

116 
ªadègs
(*
∑th
, 
s⁄g_mëad©a
 *
ps⁄g
, 
°©
 *°©, *
œng
, *
ty≥
);

117 
‰ìègs
(
s⁄g_mëad©a
 *
ps⁄g
);

119 
°¨t_∂i°
(c⁄° *
∑th
, 
s⁄g_mëad©a
 *
ps⁄g
, 
°©
 *°©, *
œng
, *
ty≥
);

120 
√xt_∂i°_åack
(
s⁄g_mëad©a
 *
ps⁄g
, 
°©
 *°©, *
œng
, *
ty≥
);

	@tagutils/textutils.c

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<˘y≥.h
>

28 
	~"misc.h
"

29 
	~"ãxtutûs.h
"

30 
	~"../log.h
"

33 
	$_ch¨_htoi
(
h
)

35 i‡(
h
<'0')

37 i‡(
h
<='9')

38  
h
-'0';

39 i‡(
h
<'A')

41 i‡(
h
<='F')

42  
h
-'A'+10;

43 i‡(
h
<'a')

45 i‡(
h
<='f')

46  
h
-'a'+10;

48 
	}
}

51 
	$uædecode
(*
§c
)

53 
c
, *
s
, *
d
;

55 
d
=
s
=
§c
; *s; s++, d++) {

56 
c
 = *
s
;

57 i‡(
c
=='%') {

58 
c
 = *++
s
;

59 i‡(
c
=='%')

60 
c
 = '%';

62 
c
 = 
	`_ch¨_htoi
(c)<<4 | _ch¨_htoi(*++
s
);

64 *
d
 = 
c
;

67 *
d
 = 
c
;

70 *
d
 = '\0';

71 
	}
}

75 
	$is_ign‹edw‹d
(c⁄° *
°r
)

77 
i
;

79 i‡(!
¥efs
.
ign‹edw‹ds
)

82 
i
=0; 
¥efs
.
ign‹edw‹ds
[i].
n
; i++) {

83 i‡(!(
	`°∫ˇ£cmp
(
¥efs
.
ign‹edw‹ds
[
i
].
w‹d
, 
°r
,Öªfs.ign‹edw‹ds[i].
n
))) {

84 
√xt_ch¨
 = 
°r
[
¥efs
.
ign‹edw‹ds
[
i
].
n
];

85 i‡(
	`iß um
(
√xt_ch¨
))

87  
¥efs
.
ign‹edw‹ds
[
i
].
n
;

91 
	}
}

95 
	$skù•a˚s
(c⁄° *
°r
)

97 
	`is•a˚
(*
°r
)) str++;

98  (*Ë
°r
;

99 
	}
}

122 
	gUtoAscii
[] = {

144 
	gUtoUµî
[] = {

167 
	$ß„_©oi
(*
s
)

169 i‡(!
s
)

171 i‡((
s
[0]>='0' && s[0]<='9') || s[0]=='-' || s[0]=='+')

172  
	`©oi
(
s
);

174 
	}
}

178 
	$utf16À_to_utf8
(*
d°
, 
n
, 
__u16
 
utf16À
)

180 
__u16
 
wc
 = 
	`À16_to_˝u
(
utf16À
);

181 i‡(
wc
 < 0x80) {

182 i‡(
n
<1)  0;

183 *
d°
++ = 
wc
 & 0xff;

186 i‡(
wc
 < 0x800) {

187 i‡(
n
<2)  0;

188 *
d°
++ = 0xc0 | (
wc
>>6);

189 *
d°
++ = 0x80 | (
wc
 & 0x3f);

193 i‡(
n
<3)  0;

194 *
d°
++ = 0xe0 | (
wc
>>12);

195 *
d°
++ = 0x80 | ((
wc
>>6) & 0x3f);

196 *
d°
++ = 0x80 | (
wc
 & 0x3f);

199 
	}
}

202 
	$„tch_°rög_txt
(*
‚ame
, *
œng
, 
n
, ...)

204 
va_li°
 
¨gs
;

205 **
keys
;

206 ***
°rs
;

207 **
def°r
;

208 
i
;

209 
FILE
 *
Â
;

210 
buf
[4096];

211 
°©e
;

212 *
p
;

213 *
œngid
;

214 c⁄° *
œng_í
 = "EN";

216 i‡(!(
keys
 = 
	`mÆloc
((keysË* 
n
))) {

217 
	`DPRINTF
(
E_FATAL
, 
L_SCANNER
, "Out of memory\n");

219 i‡(!(
°rs
 = 
	`mÆloc
((°rsË* 
n
))) {

220 
	`DPRINTF
(
E_FATAL
, 
L_SCANNER
, "Out of memory\n");

222 i‡(!(
def°r
 = 
	`mÆloc
((def°rË* 
n
))) {

223 
	`DPRINTF
(
E_FATAL
, 
L_SCANNER
, "Out of memory\n");

226 
	`va_°¨t
(
¨gs
, 
n
);

227 
i
=0; i<
n
; i++) {

228 
keys
[
i
] = 
	`va_¨g
(
¨gs
, *);

229 
°rs
[
i
] = 
	`va_¨g
(
¨gs
, **);

230 
def°r
[
i
] = 
	`va_¨g
(
¨gs
, *);

232 
	`va_íd
(
¨gs
);

234 i‡(!(
Â
 = 
	`f›í
(
‚ame
, "rb"))) {

235 
	`DPRINTF
(
E_ERROR
, 
L_SCANNER
, "C™nŸ o≥¿<%s>\n", 
‚ame
);

236 
_exô
;

239 
°©e
 = -1;

240 
	`fgës
(
buf
, (buf), 
Â
)) {

241 
Àn
 = 
	`°æí
(
buf
);

243 i‡(
buf
[
Àn
-1]=='\n') buf[len-1] = '\0';

245 i‡(
°©e
<0) {

246 i‡(
	`ißÕha
(
buf
[0])) {

247 
i
=0; i<
n
; i++) {

248 i‡(!(
	`°rcmp
(
keys
[
i
], 
buf
))) {

249 
°©e
 = 
i
;

256 
found
 = 0;

258 i‡(
	`ißÕha
(
buf
[0]) || buf[0]=='\0') {

259 
°©e
 = -1;

263 
p
 = 
buf
;

264 
	`is•a˚
(*
p
))Ö++;

265 i‡(*
p
 == '\0') {

266 
°©e
 = -1;

269 
œngid
 = 
p
;

270 !
	`is•a˚
(*
p
))Ö++;

271 *
p
++ = '\0';

273 i‡(!
	`°rcmp
(
œng
, 
œngid
))

274 
found
 = 1;

275 i‡(
	`°rcmp
(
œng_í
, 
œngid
))

278 
	`is•a˚
(*
p
))Ö++;

279 i‡(*
°rs
[
°©e
])

280 
	`‰ì
(*
°rs
[
°©e
]);

281 *
°rs
[
°©e
] = 
	`°rdup
(
p
);

283 i‡(
found
)

284 
°©e
 = -1;

288 
i
=0; i<
n
; i++) {

289 i‡(!*
°rs
[
i
])

290 *
°rs
[
i
] = 
def°r
[i];

292 
	`f˛o£
(
Â
);

294 
_exô
:

295 
	`‰ì
(
keys
);

296 
	`‰ì
(
°rs
);

297 
	`‰ì
(
def°r
);

298 
	}
}

	@tagutils/textutils.h

22 
	~<°d¨g.h
>

24 
uædecode
(*
§c
);

25 * 
skù•a˚s
(c⁄° *
§c
);

26 
ß„_©oi
(*
s
);

27 
utf16À_to_utf8
(*
d°
, 
n
, 
__u16
 
utf16À
);

28 
„tch_°rög_txt
(*
‚ame
, *
œng
, 
n
, ...);

	@testupnpdescgen.c

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<°rög.h
>

33 
	~"c⁄fig.h
"

34 
	~"u≤pdescgí.h
"

36 
	guuidvÆue
[] = "uuid:12345678-0000-0000-0000-00000000abcd";

37 
	g‰õndly_«me
[] = "localhost: system_type";

38 
	g£rü umbî
[] = "12345678";

39 
	gmodñ«me
[] = "MiniDLNA";

40 
	gmodñnumbî
[] = "1";

41 
	g¥e£¡©i⁄uæ
[] = "http://192.168.0.1:8080/";

42 
	gupd©eID
 = 0;

43 #i‡
PNPX


44 
	g≤px_hwid
[] = "VEN_01F2&amp;DEV_0101&amp;REV_01 VEN_0033&amp;DEV_0001&amp;REV_01";

47 
	$gëiÁddr
(c⁄° * 
i‚ame
, * 
buf
, 
Àn
)

49 
	`°∫˝y
(
buf
, "1.2.3.4", 
Àn
);

51 
	}
}

53 
	$u≤p_gë_p‹tm≠pög_numbî_of_íåõs
()

56 
	}
}

60 
	$xml_¥ëty_¥öt
(c⁄° * 
s
, 
Àn
, 
FILE
 * 
f
)

62 
n
 = 0, 
i
;

63 
ñt_˛o£
 = 0;

64 
c
, 
ödít
 = 0;

65 
Àn
 > 0)

67 
c
 = *(
s
++); 
Àn
--;

68 
c
)

71 if(
Àn
>0 && *
s
 == '/')

72 
ñt_˛o£
++;

73 if(
Àn
>0 && *
s
 == '?')

74 
ñt_˛o£
 = 1;

76 
ñt_˛o£
 = 0;

77 if(
ñt_˛o£
!=1)

79 if(
ñt_˛o£
 > 1)

80 
ödít
--;

81 
	`Âutc
('\n', 
f
); 
n
++;

82 
i
=
ödít
; i>0; i--)

83 
	`Âutc
(' ', 
f
);

84 
n
 +
ödít
;

86 
	`Âutc
(
c
, 
f
); 
n
++;

89 
	`Âutc
(
c
, 
f
); 
n
++;

90 if(
ñt_˛o£
==1)

94 if(
ödít
 > 0)

95 
ödít
--;

97 if(
ñt_˛o£
 == 0)

98 
ödít
++;

101 
	`Âutc
(
c
, 
f
); 
n
++;

104  
n
;

105 
	}
}

108 c⁄° * 
	g°r1
 = "Prefix123String";

109 c⁄° * 
	g°r2
 = "123String";

111 
	$°upid_ã°
()

113 
	`¥ötf
("°r1:'%s' så2:'%s'\n", 
°r1
, 
°r2
);

114 
	`¥ötf
("°r1:%∞°r2:%∞°r2-°r1:%ld\n", 
°r1
, 
°r2
, ()(str2-str1));

115 
	}
}

120 
	$maö
(
¨gc
, * * 
¨gv
)

122 * 
roŸDesc
;

123 
roŸDescLí
;

124 * 
s
;

125 
l
;

126 
roŸDesc
 = 
	`gíRoŸDesc
(&
roŸDescLí
);

127 
	`xml_¥ëty_¥öt
(
roŸDesc
, 
roŸDescLí
, 
°dout
);

128 
	`‰ì
(
roŸDesc
);

129 
	`¥ötf
("\n----------------\n");

130 
	`¥ötf
("ContentDirectory\n");

131 
	`¥ötf
("----------------\n");

132 
s
 = 
	`gíC⁄ã¡Dúe˘‹y
(&
l
);

133 
	`xml_¥ëty_¥öt
(
s
, 
l
, 
°dout
);

134 
	`‰ì
(
s
);

135 
	`¥ötf
("\n----------------\n");

136 
	`¥ötf
("ConnectionManager\n");

137 
	`¥ötf
("----------------\n");

138 
s
 = 
	`gíC⁄√˘i⁄M™agî
(&
l
);

139 
	`xml_¥ëty_¥öt
(
s
, 
l
, 
°dout
);

140 
	`‰ì
(
s
);

141 
	`¥ötf
("\n----------------\n");

142 
	`¥ötf
("X_MS_MRR\n");

143 
	`¥ötf
("----------------\n");

144 
s
 = 
	`gíX_MS_MedüRe˚ivîRegi°ør
(&
l
);

145 
	`xml_¥ëty_¥öt
(
s
, 
l
, 
°dout
);

146 
	`‰ì
(
s
);

147 
	`¥ötf
("\n-------------\n");

152 
	}
}

	@tivo_beacon.c

29 
	~"c⁄fig.h
"

30 #ifde‡
TIVO_SUPPORT


31 
	~<°dlib.h
>

32 
	~<°dio.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

35 
	~<sys/waô.h
>

36 
	~<sys/io˘l.h
>

37 
	~<sys/°©.h
>

38 
	~<f˙é.h
>

39 
	~<î∫o.h
>

40 
	~<time.h
>

42 
	~<sys/∑øm.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~<√t/if.h
>

47 
	~<sys/pﬁl.h
>

48 
	~<√tdb.h
>

50 
	~"tivo_bóc⁄.h
"

51 
	~"u≤pglobÆv¨s.h
"

52 
	~"log.h
"

57 
	$O≥nAndC⁄fTivoBóc⁄Sockë
()

59 
s
;

60 
i
 = 1;

61 
sockaddr_ö
 
bóc⁄
;

63 if–(
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
)) < 0)

65 
	`DPRINTF
(
E_ERROR
, 
L_TIVO
, "sockë(hâp): %s\n", 
	`°ªº‹
(
î∫o
));

69 if(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
i
, (i)) < 0)

71 
	`DPRINTF
(
E_WARN
, 
L_TIVO
, "£tsock›t(hâp, SO_REUSEADDR): %s\n", 
	`°ªº‹
(
î∫o
));

74 
	`mem£t
(&
bóc⁄
, 0, (
sockaddr_ö
));

75 
bóc⁄
.
sö_Ámûy
 = 
AF_INET
;

76 
bóc⁄
.
sö_p‹t
 = 
	`ht⁄s
(2190);

77 
bóc⁄
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

79 if(
	`böd
(
s
, (
sockaddr
 *)&
bóc⁄
, (
sockaddr_ö
)) < 0)

81 
	`DPRINTF
(
E_ERROR
, 
L_TIVO
, "böd(hâp): %s\n", 
	`°ªº‹
(
î∫o
));

82 
	`˛o£
(
s
);

85 
i
 = 1;

86 if(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
i
, (i)) < 0 )

88 
	`DPRINTF
(
E_WARN
, 
L_TIVO
, "£tsock›t(hâp, SO_BROADCAST): %s\n", 
	`°ªº‹
(
î∫o
));

89 
	`˛o£
(
s
);

93  
s
;

94 
	}
}

99 
uöt32_t


100 
	$gëBˇ°Addªss
()

102 
i
, 
rvÆ
;

103 
s
;

104 
sockaddr_ö
 
sö
;

105 
sockaddr_ö
 
addr
;

106 
i‰eq
 
i‰
[16];

107 
ifc⁄f
 
ifc
;

108 
cou¡
 = 0;

109 
uöt32_t
 
ªt
 = 
INADDR_BROADCAST
;

111 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

112 
	`mem£t
(&
ifc
, '\0', (ifc));

113 
ifc
.
ifc_Àn
 = (
i‰
);

114 
ifc
.
ifc_ªq
 = 
i‰
;

116 if(
	`io˘l
(
s
, 
SIOCGIFCONF
, &
ifc
) < 0) {

117 
	`DPRINTF
(
E_ERROR
, 
L_TIVO
, "Eº‹ gëtög i¡îÁ˚Üi° [%s]\n", 
	`°ªº‹
(
î∫o
));

118 
	`˛o£
(
s
);

119  
ªt
;

122 
cou¡
 = 
ifc
.
ifc_Àn
 / (
i‰eq
);

123 
i
 = 0; i < 
cou¡
; i++)

125 
	`mem˝y
(&
addr
, &
i‰
[
i
].
i‰_addr
, (addr));

126 if(
	`°rcmp
(
	`öë_¡ﬂ
(
addr
.
sö_addr
), 
œn_addr
[0].
°r
) == 0)

128 
rvÆ
 = 
	`io˘l
(
s
, 
SIOCGIFBRDADDR
, &
i‰
[
i
]);

129 if–
rvÆ
 < 0 )

131 
	`DPRINTF
(
E_ERROR
, 
L_TIVO
, "FaûedÅÿgë brﬂdˇ°ádd∏⁄ %†[%s]\n", 
i‰
[
i
].
i‰_«me
, 
	`°ªº‹
(
î∫o
));

134 
	`mem˝y
(&
sö
, &
i‰
[
i
].
i‰_brﬂdaddr
, (sin));

135 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "I¡îÁ˚: %†brﬂdˇ°ádd∏%s\n", 
i‰
[
i
].
i‰_«me
, 
	`öë_¡ﬂ
(
sö
.
sö_addr
));

136 
ªt
 = 
	`¡ohl
((
uöt32_t
)(
sö
.
sö_addr
.
s_addr
));

140 
	`˛o£
(
s
);

142  
ªt
;

143 
	}
}

150 
	$£ndBóc⁄Mesßge
(
fd
, 
sockaddr_ö
 * 
˛õ¡
, 
Àn
, 
brﬂdˇ°
)

152 * 
mesg
;

153 
mesg_Àn
;

155 
mesg_Àn
 = 
	`a•rötf
(&
mesg
, "TiVoConnect=1\n"

162 
brﬂdˇ°
 ? "broadcast" : "connected",

163 
uuidvÆue
, 
‰õndly_«me
, 
ru¡ime_v¨s
.
p‹t
);

164 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "Sídög TiVÿbóc⁄Åÿ%s\n", 
	`öë_¡ﬂ
(
˛õ¡
->
sö_addr
));

165 
	`£ndto
(
fd
, 
mesg
, 
mesg_Àn
, 0, (
sockaddr
*)
˛õ¡
, 
Àn
);

166 
	`‰ì
(
mesg
);

167 
	}
}

176 
	$rcvBóc⁄Mesßge
(*
bóc⁄
)

178 *
tivoC⁄√˘
 = 
NULL
;

179 *
mëhod
 = 
NULL
;

180 *
idítôy
 = 
NULL
;

181 *
machöe
 = 
NULL
;

182 *
∂©f‹m
 = 
NULL
;

183 *
£rvi˚s
 = 
NULL
;

184 *
˝
;

185 *
s˝
;

186 *
tok±r
;

188 
˝
 = 
	`°πok_r
(
bóc⁄
, "=\r\n", &
tok±r
);

189  
˝
 !
NULL
 )

191 
s˝
 = 
˝
;

192 
˝
 = 
	`°πok_r
(
NULL
, "=\r\n", &
tok±r
);

193 if–
	`°rˇ£cmp
(
s˝
, "tivoconnect") == 0 )

194 
tivoC⁄√˘
 = 
˝
;

195 if–
	`°rˇ£cmp
(
s˝
, "method") == 0 )

196 
mëhod
 = 
˝
;

197 if–
	`°rˇ£cmp
(
s˝
, "identity") == 0 )

198 
idítôy
 = 
˝
;

199 if–
	`°rˇ£cmp
(
s˝
, "machine") == 0 )

200 
machöe
 = 
˝
;

201 if–
	`°rˇ£cmp
(
s˝
, "platform") == 0 )

202 
∂©f‹m
 = 
˝
;

203 if–
	`°rˇ£cmp
(
s˝
, "services") == 0 )

204 
£rvi˚s
 = 
˝
;

205 
˝
 = 
	`°πok_r
(
NULL
, "=\r\n", &
tok±r
);

208 if–!
tivoC⁄√˘
 || !
∂©f‹m
 || !
mëhod
 )

211 #ifde‡
DEBUG


212 
aBóc⁄
 *
t›Bóc⁄
 = 
NULL
;

213 
aBóc⁄
 *
b
;

214 
time_t
 
cuºít
;

215 
Àn
;

216 
buf
[32];

217 
time_t
 
œ°Summ¨y
 = 0;

219 
cuºít
 = 
	`time
(
NULL
);

220  
b
 = 
t›Bóc⁄
; b !
NULL
; b = b->
√xt
 )

222 if–
	`°rˇ£cmp
(
machöe
, 
b
->machine) == 0 ||

223 
	`°rˇ£cmp
(
idítôy
, 
b
->identity) == 0 )

226 if–
b
 =
NULL
 )

228 
b
 = 
	`ˇŒoc
(1, (*b));

230 if–
machöe
 )

231 
b
->
machöe
 = 
	`°rdup
(machine);

232 if–
idítôy
 )

233 
b
->
idítôy
 = 
	`°rdup
(identity);

235 
b
->
√xt
 = 
t›Bóc⁄
;

236 
t›Bóc⁄
 = 
b
;

238 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "ReceivedÇew beacon: machine(%s)Ölatform(%s) services(%s)\n",

239 
machöe
 ? machine : "-",

240 
∂©f‹m
 ?Ölatform : "-",

241 
£rvi˚s
 ? services : "-" );

244 
b
->
œ°Sìn
 = 
cuºít
;

245 if–!
œ°Summ¨y
 )

246 
œ°Summ¨y
 = 
cuºít
;

248 if–
œ°Summ¨y
 + 1800 < 
cuºít
 )

250 
Àn
 = 0;

251  
b
 = 
t›Bóc⁄
; b !
NULL
; b = b->
√xt
 )

253 
Àn
 +
	`°æí
(
b
->
machöe
) + 32;

255 
s˝
 = 
	`mÆloc
(
Àn
 + 128);

256 
	`°r˝y
–
s˝
, "Known servers: " );

257  
b
 = 
t›Bóc⁄
; b !
NULL
; b = b->
√xt
 )

259 
	`°rˇt
(
s˝
, 
b
->
machöe
);

260 
	`•rötf
(
buf
, "(%ld)", 
cuºít
 - 
b
->
œ°Sìn
);

261 
	`°rˇt
(
s˝
, 
buf
);

262 if–
b
->
√xt
 !
NULL
 )

263 
	`°rˇt
(
s˝
, ",");

265 
	`°rˇt
(
s˝
, "\n");

266 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "%s\n", 
s˝
);

267 
	`‰ì
(
s˝
);

268 
œ°Summ¨y
 = 
cuºít
;

272 if–
	`°∫cmp
(
∂©f‹m
, "tcd/", 4) != 0 )

275 if–
	`°rˇ£cmp
(
mëhod
, "broadcast") == 0 )

277 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "ReceivedÇew beacon: machine(%s/%s)Ölatform(%s) services(%s)\n",

278 
machöe
 ? machine : "-",

279 
idítôy
 ? identity : "-",

280 
∂©f‹m
 ?Ölatform : "-",

281 
£rvi˚s
 ? services : "-" );

285 
	}
}

287 
	$Pro˚ssTiVoBóc⁄
(
s
)

289 
n
;

290 *
˝
;

291 
sockaddr_ö
 
£ndî«me
;

292 
sockÀn_t
 
Àn_r
;

293 
bu‰
[1500];

294 
Àn_r
 = (
sockaddr_ö
);

297 
n
 = 
	`ªcv‰om
(
s
, 
bu‰
, (bufr), 0,

298 (
sockaddr
 *)&
£ndî«me
, &
Àn_r
);

299 if–
n
 > 0 )

300 
bu‰
[
n
] = '\0';

303 
n
 = 0;Ç<
n_œn_addr
;Ç++)

305 if–(
£ndî«me
.
sö_addr
.
s_addr
 & 
œn_addr
[
n
].
mask
.s_addr)

306 =(
œn_addr
[
n
].
addr
.
s_addr
 &Ü™_addr[n].
mask
.s_addr))

309 if–
n
 =
n_œn_addr
 )

311 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "Ignoring TiVo beacon on other interface [%s]\n",

312 
	`öë_¡ﬂ
(
£ndî«me
.
sö_addr
));

316  
˝
 = 
bu‰
; *cp; cp++ )

318 if–
˝
[-1] == '\r' || cp[-1] == '\n' )

319 *--
˝
 = '\0';

320 if–
˝
[-1] == '\r' || cp[-1] == '\n' )

321 *--
˝
 = '\0';

323 if–
	`rcvBóc⁄Mesßge
(
bu‰
) )

324 
	`£ndBóc⁄Mesßge
(
s
, &
£ndî«me
, 
Àn_r
, 0);

325 
	}
}

	@tivo_beacon.h

24 
	~"c⁄fig.h
"

25 #ifde‡
TIVO_SUPPORT


29 
	saBóc⁄


31 #ifde‡
DEBUG


32 
time_t
 
	mœ°Sìn
;

34 * 
	mmachöe
;

35 * 
	midítôy
;

36 
aBóc⁄
 *
	m√xt
;

39 
uöt32_t


40 
gëBˇ°Addªss
();

43 
O≥nAndC⁄fTivoBóc⁄Sockë
();

46 
£ndBóc⁄Mesßge
(
fd
, 
sockaddr_ö
 * 
˛õ¡
, 
Àn
, 
brﬂdˇ°
);

49 
Pro˚ssTiVoBóc⁄
(
fd
);

	@tivo_commands.c

18 
	~"c⁄fig.h
"

19 #ifde‡
TIVO_SUPPORT


20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<libgí.h
>

24 
	~<time.h
>

25 
	~<sys/°©.h
>

27 
	~"tivo_utûs.h
"

28 
	~"u≤pglobÆv¨s.h
"

29 
	~"u≤phâp.h
"

30 
	~"u≤psﬂp.h
"

31 
	~"utûs.h
"

32 
	~"sql.h
"

33 
	~"log.h
"

36 
	$SídRoŸC⁄èöî
(
u≤phâp
 *
h
)

38 *
ª•
;

39 
Àn
;

41 
Àn
 = 
	`xa•rötf
(&
ª•
, "<?xml version='1.0'Éncoding='UTF-8' ?>\n"

90 
‰õndly_«me
, friendly_name, friendly_name, friendly_name);

91 
	`BuûdRe•_u≤phâp
(
h
, 
ª•
, 
Àn
);

92 
	`‰ì
(
ª•
);

93 
	`SídRe•_u≤phâp
(
h
);

94 
	}
}

97 
	$SídF‹m©s
(
u≤phâp
 *
h
, c⁄° *
sf‹m©
)

99 *
ª•
;

100 
Àn
;

102 
Àn
 = 
	`xa•rötf
(&
ª•
, "<?xml version=\"1.0\"Éncoding=\"utf-8\"?>"

112 "</TiVoF‹m©s>", 
sf‹m©
);

113 
	`BuûdRe•_u≤phâp
(
h
, 
ª•
, 
Àn
);

114 
	`‰ì
(
ª•
);

115 
	`SídRe•_u≤phâp
(
h
);

116 
	}
}

119 
	$u√sˇ≥_èg
(*
èg
)

121 
	`modifySåög
(
èg
, "&amp;amp;", "&amp;");

122 
	`modifySåög
(
èg
, "&amp;amp;lt;", "&lt;");

123 
	`modifySåög
(
èg
, "&amp;lt;", "&lt;");

124 
	`modifySåög
(
èg
, "&amp;amp;gt;", "&gt;");

125 
	`modifySåög
(
èg
, "&amp;gt;", "&gt;");

126  
èg
;

127 
	}
}

129 
	#FLAG_SEND_RESIZED
 0x01

	)

130 
	#FLAG_NO_PARAMS
 0x02

	)

131 
	#FLAG_VIDEO
 0x04

	)

133 
	$ˇŒback
(*
¨gs
, 
¨gc
, **
¨gv
, **
azCﬁName
)

135 
Re•⁄£
 *
∑s£d_¨gs
 = (Re•⁄£ *)
¨gs
;

136 *
id
 = 
¨gv
[0], *
˛ass
 =árgv[1], *
dëaûID
 =árgv[2], *
size
 =árgv[3], *
tôÀ
 =árgv[4], *
duøti⁄
 =árgv[5],

137 *
bôøã
 = 
¨gv
[6], *
ßm∂eFªquícy
 =árgv[7], *
¨ti°
 =árgv[8], *
Æbum
 =árgv[9], *
gíª
 =árgv[10],

138 *
commít
 = 
¨gv
[11], *
d©e
 =árgv[12], *
ªsﬁuti⁄
 =árgv[13], *
mime
 =árgv[14];

139 
°rög_s
 *
°r
 = 
∑s£d_¨gs
->str;

141 if–
	`°∫cmp
(
˛ass
, "item", 4) == 0 )

143 
Êags
 = 0;

144 
	`u√sˇ≥_èg
(
tôÀ
);

145 if–
	`°∫cmp
(
mime
, "audio", 5) == 0 )

147 
Êags
 |
FLAG_NO_PARAMS
;

148 
	`°rˇtf
(
°r
, "<Item><Details>"

152 "audio/*", 
mime
, 
size
);

153 
	`°rˇtf
(
°r
, "<S⁄gTôÀ>%s</S⁄gTôÀ>", 
tôÀ
);

154 if–
d©e
 )

155 
	`°rˇtf
(
°r
, "<AlbumYór>%.*s</AlbumYór>", 4, 
d©e
);

157 if–
	`°rcmp
(
mime
, "image/jpeg") == 0 )

159 
Êags
 |
FLAG_SEND_RESIZED
;

160 
	`°rˇtf
(
°r
, "<Item><Details>"

164 "image/*", 
mime
, 
size
);

165 if–
d©e
 )

167 
tm
Åm;

168 
	`mem£t
(&
tm
, 0, (tm));

169 
tm
.
tm_isd°
 = -1;

170 
	`°Ωtime
(
d©e
, "%Y-%m-%dT%H:%M:%S", &
tm
);

171 
	`°rˇtf
(
°r
, "<C≠tuªD©e>0x%X</C≠tuªD©e>", ()
	`mktime
(&
tm
));

173 if–
commít
 )

174 
	`°rˇtf
(
°r
, "<C≠ti⁄>%s</C≠ti⁄>", 
commít
);

176 if–
	`°∫cmp
(
mime
, "video", 5) == 0 )

178 *
ïisode
;

179 
Êags
 |
FLAG_VIDEO
;

180 
	`°rˇtf
(
°r
, "<Item><Details>"

184 
mime
, mime, 
size
);

185 
ïisode
 = 
	`°r°r
(
tôÀ
, " - ");

186 if–
ïisode
 )

188 
	`°rˇtf
(
°r
, "<Title>%.*s</Title>"

190 ()(
ïisode
-
tôÀ
),Åitle,Épisode+3);

194 
	`°rˇtf
(
°r
, "<TôÀ>%s</TôÀ>", 
tôÀ
);

196 if–
d©e
 )

198 
tm
Åm;

199 
	`mem£t
(&
tm
, 0, (tm));

200 
tm
.
tm_isd°
 = -1;

201 
	`°Ωtime
(
d©e
, "%Y-%m-%dT%H:%M:%S", &
tm
);

202 
	`°rˇtf
(
°r
, "<C≠tuªD©e>0x%X</C≠tuªD©e>", ()
	`mktime
(&
tm
));

204 if–
commít
 )

205 
	`°rˇtf
(
°r
, "<Des¸ùti⁄>%s</Des¸ùti⁄>", 
commít
);

211 
	`°rˇtf
(
°r
, "<TôÀ>%s</TôÀ>", 
	`u√sˇ≥_èg
(
tôÀ
));

212 if–
¨ti°
 ) {

213 
	`°rˇtf
(
°r
, "<Aπi°Name>%s</Aπi°Name>", 
	`u√sˇ≥_èg
(
¨ti°
));

215 if–
Æbum
 ) {

216 
	`°rˇtf
(
°r
, "<AlbumTôÀ>%s</AlbumTôÀ>", 
	`u√sˇ≥_èg
(
Æbum
));

218 if–
gíª
 ) {

219 
	`°rˇtf
(
°r
, "<MusicGíª>%s</MusicGíª>", 
	`u√sˇ≥_èg
(
gíª
));

221 if–
ªsﬁuti⁄
 ) {

222 *
width
 = 
	`°r£p
(&
ªsﬁuti⁄
, "x");

223 
	`°rˇtf
(
°r
, "<SourceWidth>%s</SourceWidth>"

225 
width
, 
ªsﬁuti⁄
);

227 if–
duøti⁄
 ) {

228 
	`°rˇtf
(
°r
, "<Duration>%d</Duration>",

229 
	`©oi
(
	`°ºchr
(
duøti⁄
, '.')+1) + (1000*atoi(strrchr(duration, ':')+1))

230 + (60000*
	`©oi
(
	`°ºchr
(
duøti⁄
, ':')-2)) + (3600000*atoi(duration)));

232 if–
bôøã
 ) {

233 
	`°rˇtf
(
°r
, "<Sour˚BôR©e>%s</Sour˚BôR©e>", 
bôøã
);

235 if–
ßm∂eFªquícy
 ) {

236 
	`°rˇtf
(
°r
, "<Sour˚Sam∂eR©e>%s</Sour˚Sam∂eR©e>", 
ßm∂eFªquícy
);

238 
	`°rˇtf
(
°r
, "</Details><Links>"

243 
mime
,

244 (
Êags
 & 
FLAG_SEND_RESIZED
) ? "Resized" : "MediaItems",

245 
dëaûID
, 
	`mime_to_ext
(
mime
),

246 (
Êags
 & 
FLAG_NO_PARAMS
) ? "<AcceptsParams>No</AcceptsParams>" : "");

247 if–
Êags
 & 
FLAG_VIDEO
 )

249 
	`°rˇtf
(
°r
, "<CustomIcon>"

254 
	`°rˇtf
(
°r
, "</Links>");

256 if–
	`°∫cmp
(
˛ass
, "container", 9) == 0 )

258 
cou¡
;

260 #ifde‡
__•¨c__


261 
cou¡
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT cou¡(*Ë‰om OBJECTS whîêPARENT_ID = '%s'", 
id
);

263 
cou¡
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT count(*) from OBJECTS oÜeft join DETAILS d on (d.ID = o.DETAIL_ID) where PARENT_ID = '%s'ánd "

265 " o∏CLASS glob 'c⁄èöî*')", 
id
);

267 
	`°rˇtf
(
°r
, "<Item>"

280 
	`u√sˇ≥_èg
(
tôÀ
), 
cou¡
, 
id
);

282 
	`°rˇtf
(
°r
, "</Item>");

284 
∑s£d_¨gs
->
ªtu∫ed
++;

287 
	}
}

289 
	#SELECT_COLUMNS
 "SELECT o.OBJECT_ID, o.CLASS, o.DETAIL_ID, d.SIZE, d.TITLE," \

291 " d.COMMENT, d.DATE, d.RESOLUTION, d.MIME, d.DISC, d.TRACK "

	)

294 
	$SídIãmDëaûs
(
u≤phâp
 *
h
, 
öt64_t
 
ôem
)

296 *
sql
;

297 *
zEºMsg
 = 
NULL
;

298 
Re•⁄£
 
¨gs
;

299 
°rög_s
 
°r
;

300 
ªt
;

301 
	`mem£t
(&
¨gs
, 0, (args));

302 
	`mem£t
(&
°r
, 0, (str));

304 
°r
.
d©a
 = 
	`mÆloc
(32768);

305 
°r
.
size
 = 32768;

306 
°r
.
off
 = 
	`•rötf
(°r.
d©a
, "<?xml version='1.0'Éncoding='UTF-8' ?>\n<TiVoItem>");

307 
¨gs
.
°r
 = &str;

308 
¨gs
.
ªque°ed
 = 1;

309 
	`xa•rötf
(&
sql
, 
SELECT_COLUMNS


311 " whîêo.DETAIL_ID = %Œd grou∞by o.DETAIL_ID", 
ôem
);

312 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "%s\n", 
sql
);

313 
ªt
 = 
	`sqlôe3_exec
(
db
, 
sql
, 
ˇŒback
, (*Ë&
¨gs
, &
zEºMsg
);

314 
	`‰ì
(
sql
);

315 if–
ªt
 !
SQLITE_OK
 )

317 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "SQLÉº‹: %s\n", 
zEºMsg
);

318 
	`sqlôe3_‰ì
(
zEºMsg
);

320 
	`°rˇtf
(&
°r
, "</TiVoItem>");

322 
	`BuûdRe•_u≤phâp
(
h
, 
°r
.
d©a
, så.
off
);

323 
	`‰ì
(
°r
.
d©a
);

324 
	`SídRe•_u≤phâp
(
h
);

325 
	}
}

328 
	$SídC⁄èöî
(
u≤phâp
 *
h
, c⁄° *
obje˘ID
, 
ôemSèπ
, 
ôemCou¡
, *
™ch‹Iãm
,

329 
™ch‹Off£t
, 
ªcur£
, *
s‹tOrdî
, *
fûãr
, 
øndomSìd
)

331 *
ª•
 = 
	`mÆloc
(262144);

332 *
sql
, *
ôem
, *
ßvïå
;

333 *
zEºMsg
 = 
NULL
;

334 **
ªsu…
;

335 *
tôÀ
, *
which
;

336 
wh©
[10], 
‹dî
[96]={0}, 
‹dî2
[96]={0}, 
myfûãr
[256]={0};

337 
°r_buf
[1024];

338 
ty≥
[8];

339 
groupBy
[19] = {0};

340 
Re•⁄£
 
¨gs
;

341 
°rög_s
 
°r
;

342 
tŸÆM©ches
 = 0;

343 
i
, 
ªt
;

344 
	`mem£t
(&
¨gs
, 0, (args));

345 
	`mem£t
(&
°r
, 0, (str));

347 
¨gs
.
°r
 = &str;

348 
°r
.
d©a
 = 
ª•
+1024;

349 
°r
.
size
 = 262144-1024;

350 if–
ôemCou¡
 >= 0 )

352 
¨gs
.
ªque°ed
 = 
ôemCou¡
;

356 if–
ôemCou¡
 == -100 )

357 
ôemCou¡
 = 1;

358 
¨gs
.
ªque°ed
 = 
ôemCou¡
 * -1;

361  *
obje˘ID
 )

364 
	`°r˝y
(
ty≥
, "music");

367 
	`°r˝y
(
ty≥
, "videos");

370 
	`°r˝y
(
ty≥
, "photos");

373 
	`°r˝y
(
ty≥
, "server");

377 if–
	`°æí
(
obje˘ID
) == 1 )

379  *
obje˘ID
 )

382 
	`xa•rötf
(&
tôÀ
, "Musi¯⁄ %s", 
‰õndly_«me
);

385 
	`xa•rötf
(&
tôÀ
, "Video†⁄ %s", 
‰õndly_«me
);

388 
	`xa•rötf
(&
tôÀ
, "Pi˘uª†⁄ %s", 
‰õndly_«me
);

391 
	`xa•rötf
(&
tôÀ
, "Unknow¿⁄ %s", 
‰õndly_«me
);

397 
ôem
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT NAME from OBJECTS whîêOBJECT_ID = '%q'", 
obje˘ID
);

398 if–
ôem
 )

400 
tôÀ
 = 
	`esˇ≥_èg
(
ôem
, 1);

401 
	`sqlôe3_‰ì
(
ôem
);

404 
tôÀ
 = 
	`°rdup
("UNKNOWN");

407 if–
ªcur£
 )

409 
which
 = 
	`sqlôe3_m¥ötf
("OBJECT_ID glob '%q$*'", 
obje˘ID
);

410 
	`°r˝y
(
groupBy
, "group by DETAIL_ID");

414 
which
 = 
	`sqlôe3_m¥ötf
("PARENT_ID = '%q'", 
obje˘ID
);

417 if–
s‹tOrdî
 )

419 if–
	`°rˇ£°r
(
s‹tOrdî
, "Random") )

421 
	`•rötf
(
‹dî
, "tiv‹™dom(%lu)", 
øndomSìd
);

422 if–
ôemCou¡
 < 0 )

423 
	`•rötf
(
‹dî2
, "tiv‹™dom(%luËDESC", 
øndomSìd
);

425 
	`•rötf
(
‹dî2
, "tiv‹™dom(%lu)", 
øndomSìd
);

429 
tôÀ_°©e
 = 0;

430 
ôem
 = 
	`°πok_r
(
s‹tOrdî
, ",", &
ßvïå
);

431  
ôem
 !
NULL
 )

433 
ªvî£
=0;

434 if–*
ôem
 == '!' )

436 
ªvî£
 = 1;

437 
ôem
++;

439 if–
	`°rˇ£cmp
(
ôem
, "Type") == 0 )

441 
	`°rˇt
(
‹dî
, "CLASS");

442 
	`°rˇt
(
‹dî2
, "CLASS");

444 if–
	`°rˇ£cmp
(
ôem
, "Title") == 0 )

447 if–
tôÀ_°©e
 < 2 && *
obje˘ID
 == '1' )

449 if–!
tôÀ_°©e
 )

451 
	`°rˇt
(
‹dî
, "DISC");

452 
	`°rˇt
(
‹dî2
, "DISC");

453 
tôÀ_°©e
 = 1;

457 
	`°rˇt
(
‹dî
, "TRACK");

458 
	`°rˇt
(
‹dî2
, "TRACK");

459 
tôÀ_°©e
 = 2;

464 
	`°rˇt
(
‹dî
, "TITLE");

465 
	`°rˇt
(
‹dî2
, "TITLE");

466 
tôÀ_°©e
 = -1;

469 if–
	`°rˇ£cmp
(
ôem
, "CreationDate") == 0 ||

470 
	`°rˇ£cmp
(
ôem
, "CaptureDate") == 0 )

472 
	`°rˇt
(
‹dî
, "DATE");

473 
	`°rˇt
(
‹dî2
, "DATE");

477 
	`DPRINTF
(
E_INFO
, 
L_TIVO
, "Unh™dÀd S‹tOrdî [%s]\n", 
ôem
);

478 
unh™dÀd_‹dî
;

481 if–
ªvî£
 )

483 
	`°rˇt
(
‹dî
, " DESC");

484 if–
ôemCou¡
 >= 0 )

485 
	`°rˇt
(
‹dî2
, " DESC");

487 
	`°rˇt
(
‹dî2
, " ASC");

491 
	`°rˇt
(
‹dî
, " ASC");

492 if–
ôemCou¡
 >= 0 )

493 
	`°rˇt
(
‹dî2
, " ASC");

495 
	`°rˇt
(
‹dî2
, " DESC");

497 
	`°rˇt
(
‹dî
, ", ");

498 
	`°rˇt
(
‹dî2
, ", ");

499 
unh™dÀd_‹dî
:

500 if–
tôÀ_°©e
 <= 0 )

501 
ôem
 = 
	`°πok_r
(
NULL
, ",", &
ßvïå
);

503 if–
tôÀ_°©e
 != -1 )

505 
	`°rˇt
(
‹dî
, "TITLE ASC, ");

506 if–
ôemCou¡
 >= 0 )

507 
	`°rˇt
(
‹dî2
, "TITLE ASC, ");

509 
	`°rˇt
(
‹dî2
, "TITLE DESC, ");

511 
	`°rˇt
(
‹dî
, "DETAIL_ID ASC");

512 if–
ôemCou¡
 >= 0 )

513 
	`°rˇt
(
‹dî2
, "DETAIL_ID ASC");

515 
	`°rˇt
(
‹dî2
, "DETAIL_ID DESC");

520 
	`•rötf
(
‹dî
, "CLASS, NAME, DETAIL_ID");

521 if–
ôemCou¡
 < 0 )

522 
	`•rötf
(
‹dî2
, "CLASS DESC, NAME DESC, DETAIL_ID DESC");

524 
	`•rötf
(
‹dî2
, "CLASS, NAME, DETAIL_ID");

527 if–
fûãr
 )

529 
ôem
 = 
	`°πok_r
(
fûãr
, ",", &
ßvïå
);

530  
i
=0; 
ôem
 !
NULL
; i++ )

532 if–
i
 )

534 
	`°rˇt
(
myfûãr
, " or ");

536 if–(
	`°rˇ£cmp
(
ôem
, "x-container/folder") == 0) ||

537 (
	`°∫ˇ£cmp
(
ôem
, "x-tivo-container/", 17) == 0) )

539 
	`°rˇt
(
myfûãr
, "CLASS glob 'container*'");

541 if–
	`°∫ˇ£cmp
(
ôem
, "image", 5) == 0 )

543 
	`°rˇt
(
myfûãr
, "MIME = 'image/jpeg'");

545 if–
	`°∫ˇ£cmp
(
ôem
, "audio", 5) == 0 )

547 
	`°rˇt
(
myfûãr
, "MIME = 'audio/mpeg'");

549 if–
	`°∫ˇ£cmp
(
ôem
, "video", 5) == 0 )

551 
	`°rˇt
(
myfûãr
, "MIME in ('video/mpeg', 'video/x-tivo-mpeg', 'video/x-tivo-mpeg-ts')");

555 
	`DPRINTF
(
E_INFO
, 
L_TIVO
, "Unh™dÀd Fûã∏[%s]\n", 
ôem
);

556 if–
i
 )

558 
ªt
 = 
	`°æí
(
myfûãr
);

559 
myfûãr
[
ªt
-4] = '\0';

561 
i
--;

563 
ôem
 = 
	`°πok_r
(
NULL
, ",", &
ßvïå
);

568 
	`°r˝y
(
myfûãr
, "MIME in ('image/jpeg', 'audio/mpeg', 'video/mpeg', 'video/x-tivo-mpeg', 'video/x-tivo-mpeg-ts') or CLASS glob 'container*'");

571 if–
™ch‹Iãm
 )

573 if–
	`°r°r
(
™ch‹Iãm
, "QueryContainer") )

575 
	`°r˝y
(
wh©
, "OBJECT_ID");

576 
ßvïå
 = 
	`°ºchr
(
™ch‹Iãm
, '=');

577 if–
ßvïå
 )

578 
™ch‹Iãm
 = 
ßvïå
 + 1;

582 
	`°r˝y
(
wh©
, "DETAIL_ID");

584 
sqlôe3P∫g
.
isInô
 = 0;

585 
sql
 = 
	`sqlôe3_m¥ötf
("SELECT %s from OBJECTS oÜeft join DETAILS d on (o.DETAIL_ID = d.ID)"

588 " ordî by %s", 
wh©
, 
which
, 
myfûãr
, 
groupBy
, 
‹dî2
);

589 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "%s\n", 
sql
);

590 if–(
	`sql_gë_èbÀ
(
db
, 
sql
, &
ªsu…
, &
ªt
, 
NULL
Ë=
SQLITE_OK
) &&Ñet )

592  
i
=1; i<=
ªt
; i++ )

594 if–
	`°rcmp
(
™ch‹Iãm
, 
ªsu…
[
i
]) == 0 )

596 if–
ôemCou¡
 < 0 )

597 
ôemSèπ
 = 
ªt
 - 
i
 + 
ôemCou¡
;

599 
ôemSèπ
 +
i
;

603 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

605 
	`sqlôe3_‰ì
(
sql
);

607 
¨gs
.
°¨t
 = 
ôemSèπ
+
™ch‹Off£t
;

608 
sqlôe3P∫g
.
isInô
 = 0;

610 
ªt
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT count(distinct DETAIL_ID) "

613 
which
, 
myfûãr
);

614 
tŸÆM©ches
 = (
ªt
 > 0) ?Ñet : 0;

615 if–
ôemCou¡
 < 0 && !
ôemSèπ
 && !
™ch‹Off£t
 )

617 
¨gs
.
°¨t
 = 
tŸÆM©ches
 + 
ôemCou¡
;

620 
sql
 = 
	`sqlôe3_m¥ötf
(
SELECT_COLUMNS


625 
which
, 
myfûãr
, 
groupBy
, 
‹dî
, 
¨gs
.
°¨t
,árgs.
ªque°ed
);

626 
	`DPRINTF
(
E_DEBUG
, 
L_TIVO
, "%s\n", 
sql
);

627 
ªt
 = 
	`sqlôe3_exec
(
db
, 
sql
, 
ˇŒback
, (*Ë&
¨gs
, &
zEºMsg
);

628 
	`sqlôe3_‰ì
(
sql
);

629 if–
ªt
 !
SQLITE_OK
 )

631 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "SQLÉº‹: %s\n", 
zEºMsg
);

632 
	`sqlôe3_‰ì
(
zEºMsg
);

633 
	`Síd500
(
h
);

634 
	`sqlôe3_‰ì
(
which
);

635 
	`‰ì
(
tôÀ
);

636 
	`‰ì
(
ª•
);

639 
	`°rˇtf
(&
°r
, "</TiVoContainer>");

641 
ªt
 = 
	`•rötf
(
°r_buf
, "<?xml version='1.0'Éncoding='UTF-8' ?>\n"

651 
ty≥
, 
tŸÆM©ches
, 
tôÀ
, 
¨gs
.
°¨t
,árgs.
ªtu∫ed
);

652 
°r
.
d©a
 -
ªt
;

653 
	`mem˝y
(
°r
.
d©a
, &
°r_buf
, 
ªt
);

654 
°r
.
size
 = så.
off
+
ªt
;

655 
	`‰ì
(
tôÀ
);

656 
	`sqlôe3_‰ì
(
which
);

657 
	`BuûdRe•_u≤phâp
(
h
, 
°r
.
d©a
, så.
size
);

658 
	`‰ì
(
ª•
);

659 
	`SídRe•_u≤phâp
(
h
);

660 
	}
}

663 
	$Pro˚ssTiVoComm™d
(
u≤phâp
 *
h
, c⁄° *
‹ig_∑th
)

665 *
∑th
;

666 *
key
, *
vÆ
;

667 *
ßvïå
 = 
NULL
, *
ôem
;

668 *
comm™d
 = 
NULL
, *
c⁄èöî
 = NULL, *
™ch‹Iãm
 = NULL;

669 *
s‹tOrdî
 = 
NULL
, *
fûãr
 = NULL, *
sf‹m©
 = NULL;

670 
öt64_t
 
dëaûIãm
=0;

671 
ôemSèπ
=0, 
ôemCou¡
=-100, 
™ch‹Off£t
=0, 
ªcur£
=0;

672 
øndomSìd
=0;

674 
∑th
 = 
	`°rdup
(
‹ig_∑th
);

675 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "Pro˚ssög TiVÿcomm™d %s\n", 
∑th
);

677 
ôem
 = 
	`°πok_r
–
∑th
, "&", &
ßvïå
 );

678  
ôem
 !
NULL
 )

680 if–*
ôem
 == '\0' )

682 
ôem
 = 
	`°πok_r
–
NULL
, "&", &
ßvïå
 );

685 
	`decodeSåög
(
ôem
, 1);

686 
vÆ
 = 
ôem
;

687 
key
 = 
	`°r£p
(&
vÆ
, "=");

688 
	`decodeSåög
(
vÆ
, 1);

689 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "%s: %s\n", 
key
, 
vÆ
);

690 if–
	`°rˇ£cmp
(
key
, "Command") == 0 )

692 
comm™d
 = 
vÆ
;

694 if–
	`°rˇ£cmp
(
key
, "Container") == 0 )

696 
c⁄èöî
 = 
vÆ
;

698 if–
	`°rˇ£cmp
(
key
, "ItemStart") == 0 )

700 
ôemSèπ
 = 
	`©oi
(
vÆ
);

702 if–
	`°rˇ£cmp
(
key
, "ItemCount") == 0 )

704 
ôemCou¡
 = 
	`©oi
(
vÆ
);

706 if–
	`°rˇ£cmp
(
key
, "AnchorItem") == 0 )

708 
™ch‹Iãm
 = 
	`ba£«me
(
vÆ
);

710 if–
	`°rˇ£cmp
(
key
, "AnchorOffset") == 0 )

712 
™ch‹Off£t
 = 
	`©oi
(
vÆ
);

714 if–
	`°rˇ£cmp
(
key
, "Recurse") == 0 )

716 
ªcur£
 = 
	`°rˇ£cmp
("yes", 
vÆ
) == 0 ? 1 : 0;

718 if–
	`°rˇ£cmp
(
key
, "SortOrder") == 0 )

720 
s‹tOrdî
 = 
vÆ
;

722 if–
	`°rˇ£cmp
(
key
, "Filter") == 0 )

724 
fûãr
 = 
vÆ
;

726 if–
	`°rˇ£cmp
(
key
, "RandomSeed") == 0 )

728 
øndomSìd
 = 
	`°πoul
(
vÆ
, 
NULL
, 10);

730 if–
	`°rˇ£cmp
(
key
, "Url") == 0 )

732 if–
vÆ
 )

733 
dëaûIãm
 = 
	`°πﬁl
(
	`ba£«me
(
vÆ
), 
NULL
, 10);

735 if–
	`°rˇ£cmp
(
key
, "SourceFormat") == 0 )

737 
sf‹m©
 = 
vÆ
;

739 if–
	`°rˇ£cmp
(
key
, "Format") == 0 ||

740 
	`°rˇ£cmp
(
key
, "SerialNum") == 0 ||

741 
	`°rˇ£cmp
(
key
, "DoGenres") == 0 )

747 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "Unh™dÀdÖ¨amëî [%s]\n", 
key
);

749 
ôem
 = 
	`°πok_r
–
NULL
, "&", &
ßvïå
 );

751 if–
™ch‹Iãm
 )

753 
	`°rù_ext
(
™ch‹Iãm
);

756 if–
comm™d
 )

758 if–
	`°rcmp
(
comm™d
, "QueryContainer") == 0 )

760 if–!
c⁄èöî
 || (
	`°rcmp
(container, "/") == 0) )

762 
	`SídRoŸC⁄èöî
(
h
);

766 
	`SídC⁄èöî
(
h
, 
c⁄èöî
, 
ôemSèπ
, 
ôemCou¡
, 
™ch‹Iãm
,

767 
™ch‹Off£t
, 
ªcur£
, 
s‹tOrdî
, 
fûãr
, 
øndomSìd
);

770 if–
	`°rcmp
(
comm™d
, "QueryItem") == 0 )

772 
	`SídIãmDëaûs
(
h
, 
dëaûIãm
);

774 if–
	`°rcmp
(
comm™d
, "QueryFormats") == 0 )

776 
	`SídF‹m©s
(
h
, 
sf‹m©
);

780 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "Unh™dÀd comm™d [%s]\n", 
comm™d
);

781 
	`Síd501
(
h
);

782 
	`‰ì
(
∑th
);

786 
	`‰ì
(
∑th
);

787 
	`Clo£Sockë_u≤phâp
(
h
);

788 
	}
}

	@tivo_commands.h

24 
	~"c⁄fig.h
"

25 #ifde‡
TIVO_SUPPORT


28 
Pro˚ssTiVoComm™d
(
u≤phâp
 *
h
, c⁄° *
‹ig_∑th
);

	@tivo_utils.c

18 
	~"c⁄fig.h
"

19 #ifde‡
TIVO_SUPPORT


20 
	~<°dlib.h
>

21 
	~<°döt.h
>

22 
	~<°rög.h
>

23 
	~<˘y≥.h
>

24 
	~<uni°d.h
>

25 
	~<f˙é.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sqlôe3.h
>

28 
	~"tivo_utûs.h
"

32 
	$decodeSåög
(*
°rög
, 
ö∂a˚
)

34 if–!
°rög
 )

35  
NULL
;

36 
Æloc
 = ()
	`°æí
(
°rög
)+1;

37 *
ns
 = 
NULL
;

38 
ö
;

39 
°rödex
=0;

40 
hex
;

42 if–!
ö∂a˚
 )

44 if–!(
ns
 = 
	`mÆloc
(
Æloc
)) )

45  
NULL
;

48 --
Æloc
 > 0)

50 
ö
 = *
°rög
;

51 if((
ö
 ='%'Ë&& 
	`isxdigô
(
°rög
[1]) && isxdigit(string[2]))

54 
hex°r
[3];

55 *
±r
;

56 
hex°r
[0] = 
°rög
[1];

57 
hex°r
[1] = 
°rög
[2];

58 
hex°r
[2] = 0;

60 
hex
 = 
	`°πﬁ
(
hex°r
, &
±r
, 16);

62 
ö
 = ()
hex
;

63 if–
ö∂a˚
 )

65 *
°rög
 = 
ö
;

66 
	`memmove
(
°rög
+1, såög+3, 
Æloc
-2);

70 
°rög
+=2;

72 
Æloc
-=2;

74 if–!
ö∂a˚
 )

75 
ns
[
°rödex
++] = 
ö
;

76 
°rög
++;

78 if–
ö∂a˚
 )

80 
	`‰ì
(
ns
);

81  
°rög
;

85 
ns
[
°rödex
] = '\0';

86  
ns
;

88 
	}
}

92 
	$£edR™domByã
(
uöt32_t
 
£ed
)

94 
t
;

96 if–!
sqlôe3P∫g
.
isInô
 )

98 
i
;

99 
k
[256];

100 
sqlôe3P∫g
.
j
 = 0;

101 
sqlôe3P∫g
.
i
 = 0;

102 
	`mem£t
(&
k
, '\0', (k));

103 
	`mem˝y
(&
k
, &
£ed
, 4);

104 
i
=0; i<256; i++)

105 
sqlôe3P∫g
.
s
[
i
] = i;

106 
i
=0; i<256; i++)

108 
sqlôe3P∫g
.
j
 +sqlôe3P∫g.
s
[
i
] + 
k
[i];

109 
t
 = 
sqlôe3P∫g
.
s
[sqlôe3P∫g.
j
];

110 
sqlôe3P∫g
.
s
[sqlôe3P∫g.
j
] = sqlôe3P∫g.s[
i
];

111 
sqlôe3P∫g
.
s
[
i
] = 
t
;

113 
sqlôe3P∫g
.
isInô
 = 1;

116 
sqlôe3P∫g
.
i
++;

117 
t
 = 
sqlôe3P∫g
.
s
[sqlôe3P∫g.
i
];

118 
sqlôe3P∫g
.
j
 +
t
;

119 
sqlôe3P∫g
.
s
[sqlôe3P∫g.
i
] = sqlôe3P∫g.s[sqlôe3P∫g.
j
];

120 
sqlôe3P∫g
.
s
[sqlôe3P∫g.
j
] = 
t
;

121 
t
 +
sqlôe3P∫g
.
s
[sqlôe3P∫g.
i
];

123  
sqlôe3P∫g
.
s
[
t
];

124 
	}
}

127 
	$£edR™dom√ss
(
n
, *
pbuf
, 
uöt32_t
 
£ed
)

129 *
zbuf
 = 
pbuf
;

131  
n
-- )

132 *(
zbuf
++Ë
	`£edR™domByã
(
£ed
);

133 
	}
}

136 
	$TiVoR™domSìdFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
)

138 
öt64_t
 
r
, 
£ed
;

140 if–
¨gc
 !1 || 
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]Ë!
SQLITE_INTEGER
 )

142 
£ed
 = 
	`sqlôe3_vÆue_öt64
(
¨gv
[0]);

143 
	`£edR™dom√ss
((
r
), &r, 
£ed
);

144 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
r
);

145 
	}
}

148 
	$is_tivo_fûe
(c⁄° *
∑th
)

150 
buf
[5];

151 
hdr
[5] = { 'T','i','V','o','\0' };

152 
fd
;

155 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

156 if–!
fd
 )

158 if–
	`ªad
(
fd
, 
buf
, 5) < 0 )

159 
buf
[0] = 'X';

160 
	`˛o£
(
fd
);

162  !
	`memcmp
(
buf
, 
hdr
, 5);

163 
	}
}

	@tivo_utils.h

24 
	~"c⁄fig.h
"

26 #ifde‡
TIVO_SUPPORT


27 
	~<sqlôe3.h
>

29 
	ssqlôe3P∫gTy≥
 {

30 
	misInô
;

31 
	mi
, 
	mj
;

32 
	ms
[256];

33 } 
	gsqlôe3P∫g
;

36 
decodeSåög
(*
°rög
, 
ö∂a˚
);

39 
TiVoR™domSìdFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
);

42 
is_tivo_fûe
(c⁄° *
∑th
);

45 
	#decodeSåög
(
X
, 
Y
Ë({})

	)

	@ubus.c

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

21 
	~<libubox/ulo›.h
>

22 
	~<libubox/blob.h
>

23 
	~<libubox/blobmsg.h
>

24 
	~<libubus.h
>

26 
	#DEBUG
(
fmt
, 
¨gs
...) \

29 
	`¥ötf
("%s():%d " 
fmt
, 
__FUNCTION__
, 
__LINE__
, ##
¨gs
); \

30 } 0)

	)

34 
	mGNET_GET_TYPE
,

35 
	mGNET_GET_MAX
,

38 
	sg√t_ª•


40 
	m∑r£d
;

41 
	mgue°_√t
;

44 
	gl_g√t_öô
;

45 
g√t_ª•
 
	gl_g√t_ª•
;

46 
ubus_c⁄ãxt
 *
	gl_ubus_˘x
;

47 
blob_buf
 
	gl_blob_buf
;

49 
blobmsg_pﬁicy
 
	gl_ª•_pﬁicy
[
GNET_GET_MAX
] =

52 .
«me
 = "guest",

53 .
	gty≥
 = 
BLOBMSG_TYPE_INT8
,

58 
	$g√t_d©a_cb
(
ubus_ªque°
 *
ªq
, 
ty≥
, 
blob_©å
 *
msg
)

60 
blob_©å
 *
tb
[
GNET_GET_MAX
];

61 
ªt
 = 0;

63 
l_g√t_ª•
.
∑r£d
 = 0;

65 i‡(!
msg
)

70 
ªt
 = 
	`blobmsg_∑r£
(
l_ª•_pﬁicy
, 
GNET_GET_MAX
, 
tb
, 
	`blob_d©a
(
msg
), 
	`blob_Àn
(msg));

71 i‡(
ªt
 < 0)

73 
	`DEBUG
("Response MSGÖarsed failed\n");

77 
l_g√t_ª•
.
gue°_√t
 = 
	`blobmsg_gë_u8
(
tb
[
GNET_GET_TYPE
]);

78 
l_g√t_ª•
.
∑r£d
 = 1;

79 
	}
}

81 
	$g√t_is_gue°
(
ùaddr
, *
gue°
)

83 
blob_buf
 *
buf
 = &
l_blob_buf
;

84 
uöt32_t
 
id
;

85 
ªt
;

87 
ªt
 = 
	`ubus_lookup_id
(
l_ubus_˘x
, "˛õ¡_mg¡", &
id
);

88 i‡(
ªt
 != 0)

90 
	`DEBUG
("FailedÅoÜook up \"client_mgnt\" object\n");

94 
	`blob_buf_öô
(
buf
, 0);

95 
	`blobmsg_add_u32
(
buf
, "ªque°_ty≥", 
ùaddr
);

97 
ªt
 = 
	`ubus_övoke
(
l_ubus_˘x
, 
id
, "gë", 
buf
->
hód
, 
g√t_d©a_cb
, 
NULL
, 3000);

98 i‡(
ªt
 !
UBUS_STATUS_OK
)

100 
	`DEBUG
("ubus_övokêªtu∫ %d\n", 
ªt
);

104 i‡(!
l_g√t_ª•
.
∑r£d
)

109 *
gue°
 = 
l_g√t_ª•
.
gue°_√t
;

111 
	}
}

113 
	$g√t_ubus_öô
()

115 *
ubus_sock_∑th
 = 
NULL
;

117 i‡(
l_g√t_öô
)

122 
	`ulo›_öô
();

123 
l_ubus_˘x
 = 
	`ubus_c⁄√˘
(
ubus_sock_∑th
);

124 i‡(!
l_ubus_˘x
)

126 
	`DEBUG
("FailedÅo connectÅo ubus\n");

130 
	`ubus_add_ulo›
(
l_ubus_˘x
);

132 
l_g√t_öô
 = 1;

134 
	}
}

136 
	$g√t_ubus_exô
()

138 i‡(!
l_g√t_öô
)

143 i‡(
l_ubus_˘x
 !
NULL
)

145 
	`ubus_‰ì
(
l_ubus_˘x
);

148 
	`ulo›_d⁄e
();

149 
l_g√t_öô
 = 0;

150 
	}
}

	@upnpdescgen.c

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 
	~"c⁄fig.h
"

34 
	~"gëiÁddr.h
"

35 
	~"u≤pdescgí.h
"

36 
	~"möid ≠©h.h
"

37 
	~"u≤pglobÆv¨s.h
"

39 #unde‡
DESC_DEBUG


41 c⁄° * c⁄° 
	gu≤±y≥s
[] =

53 c⁄° * c⁄° 
	gu≤pdeÁu…vÆues
[] =

59 c⁄° * c⁄° 
	gu≤∑ŒowedvÆues
[] =

105 
RESOURCE_PROTOCOL_INFO_VALUES
,

113 c⁄° 
	gxmlvî
[] =

115 c⁄° 
	groŸ_£rvi˚
[] =

117 c⁄° 
	groŸ_devi˚
[] =

119 #i‡
PNPX


126 c⁄° 
XMLE…
 
	groŸDesc
[] =

128 {
roŸ_devi˚
, 
INITHELPER
(1,2)},

129 {"•ecVîsi⁄", 
INITHELPER
(3,2)},

130 {"devi˚", 
INITHELPER
(5,(14+
PNPX
))},

134 #i‡
PNPX
 == 5

135 {"/≤px:X_h¨dw¨eId", 
≤px_hwid
},

141 {"/‰õndlyName", 
‰õndly_«me
},

142 {"/m™uÁ˘uªr", 
ROOTDEV_MANUFACTURER
},

143 {"/m™uÁ˘uªrURL", 
ROOTDEV_MANUFACTURERURL
},

144 {"/modñDes¸ùti⁄", 
ROOTDEV_MODELDESCRIPTION
},

145 {"/modñName", 
modñ«me
},

146 {"/modñNumbî", 
modñnumbî
},

147 {"/modñURL", 
ROOTDEV_MODELURL
},

148 {"/£rülNumbî", 
£rü umbî
},

149 {"/UDN", 
uuidvÆue
},

151 {"/¥e£¡©i⁄URL", 
¥e£¡©i⁄uæ
},

152 {"ic⁄Li°", 
INITHELPER
((19+
PNPX
),4)},

153 {"£rvi˚Li°", 
INITHELPER
((43+
PNPX
),3)},

154 {"ic⁄", 
INITHELPER
((23+
PNPX
),5)},

155 {"ic⁄", 
INITHELPER
((28+
PNPX
),5)},

156 {"ic⁄", 
INITHELPER
((33+
PNPX
),5)},

157 {"ic⁄", 
INITHELPER
((38+
PNPX
),5)},

178 {"£rvi˚", 
INITHELPER
((46+
PNPX
),5)},

179 {"£rvi˚", 
INITHELPER
((51+
PNPX
),5)},

180 {"£rvi˚", 
INITHELPER
((56+
PNPX
),5)},

183 {"/c⁄åﬁURL", 
CONTENTDIRECTORY_CONTROLURL
},

184 {"/evítSubURL", 
CONTENTDIRECTORY_EVENTURL
},

185 {"/SCPDURL", 
CONTENTDIRECTORY_PATH
},

188 {"/c⁄åﬁURL", 
CONNECTIONMGR_CONTROLURL
},

189 {"/evítSubURL", 
CONNECTIONMGR_EVENTURL
},

190 {"/SCPDURL", 
CONNECTIONMGR_PATH
},

193 {"/c⁄åﬁURL", 
X_MS_MEDIARECEIVERREGISTRAR_CONTROLURL
},

194 {"/evítSubURL", 
X_MS_MEDIARECEIVERREGISTRAR_EVENTURL
},

195 {"/SCPDURL", 
X_MS_MEDIARECEIVERREGISTRAR_PATH
},

199 c⁄° 
¨gumít
 
	gAddP‹tM≠pögArgs
[] =

201 {
NULL
, 1, 11},

202 {
NULL
, 1, 12},

203 {
NULL
, 1, 14},

204 {
NULL
, 1, 13},

205 {
NULL
, 1, 15},

206 {
NULL
, 1, 9},

207 {
NULL
, 1, 16},

208 {
NULL
, 1, 10},

209 {
NULL
, 0, 0}

212 c⁄° 
¨gumít
 
	gDñëeP‹tM≠pögArgs
[] =

214 {
NULL
, 1, 11},

215 {
NULL
, 1, 12},

216 {
NULL
, 1, 14},

217 {
NULL
, 0, 0}

220 c⁄° 
¨gumít
 
	gSëC⁄√˘i⁄Ty≥Args
[] =

222 {
NULL
, 1, 0},

223 {
NULL
, 0, 0}

226 c⁄° 
¨gumít
 
	gGëC⁄√˘i⁄Ty≥InfoArgs
[] =

228 {
NULL
, 2, 0},

229 {
NULL
, 2, 1},

230 {
NULL
, 0, 0}

233 c⁄° 
¨gumít
 
	gGëNATRSIPSètusArgs
[] =

235 {
NULL
, 2, 5},

236 {
NULL
, 2, 6},

237 {
NULL
, 0, 0}

240 c⁄° 
¨gumít
 
	gGëGíîicP‹tM≠pögE¡ryArgs
[] =

242 {
NULL
, 1, 8},

243 {
NULL
, 2, 11},

244 {
NULL
, 2, 12},

245 {
NULL
, 2, 14},

246 {
NULL
, 2, 13},

247 {
NULL
, 2, 15},

248 {
NULL
, 2, 9},

249 {
NULL
, 2, 16},

250 {
NULL
, 2, 10},

251 {
NULL
, 0, 0}

254 c⁄° 
¨gumít
 
	gGëS≥cificP‹tM≠pögE¡ryArgs
[] =

256 {
NULL
, 1, 11},

257 {
NULL
, 1, 12},

258 {
NULL
, 1, 14},

259 {
NULL
, 2, 13},

260 {
NULL
, 2, 15},

261 {
NULL
, 2, 9},

262 {
NULL
, 2, 16},

263 {
NULL
, 2, 10},

264 {
NULL
, 0, 0}

268 c⁄° 
¨gumít
 
	gGëPrŸocﬁInfoArgs
[] =

272 {
NULL
, 0, 0}

275 c⁄° 
¨gumít
 
	gPª∑ªF‹C⁄√˘i⁄Args
[] =

284 {
NULL
, 0, 0}

287 c⁄° 
¨gumít
 
	gC⁄√˘i⁄Com∂ëeArgs
[] =

290 {
NULL
, 0, 0}

293 c⁄° 
¨gumít
 
	gGëCuºítC⁄√˘i⁄IDsArgs
[] =

296 {
NULL
, 0, 0}

299 c⁄° 
¨gumít
 
	gGëCuºítC⁄√˘i⁄InfoArgs
[] =

309 {
NULL
, 0, 0}

312 c⁄° 
a˘i⁄
 
	gC⁄√˘i⁄M™agîA˘i⁄s
[] =

314 {"GëPrŸocﬁInfo", 
GëPrŸocﬁInfoArgs
},

317 {"GëCuºítC⁄√˘i⁄IDs", 
GëCuºítC⁄√˘i⁄IDsArgs
},

318 {"GëCuºítC⁄√˘i⁄Info", 
GëCuºítC⁄√˘i⁄InfoArgs
},

322 c⁄° 
°©eV¨
 
	gC⁄√˘i⁄M™agîV¨s
[] =

337 c⁄° 
¨gumít
 
	gGëSórchC≠abûôõsArgs
[] =

343 c⁄° 
¨gumít
 
	gGëS‹tC≠abûôõsArgs
[] =

349 c⁄° 
¨gumít
 
	gGëSy°emUpd©eIDArgs
[] =

355 c⁄° 
¨gumít
 
	gBrow£Args
[] =

370 c⁄° 
¨gumít
 
	gSórchArgs
[] =

385 c⁄° 
a˘i⁄
 
	gC⁄ã¡Dúe˘‹yA˘i⁄s
[] =

387 {"GëSórchC≠abûôõs", 
GëSórchC≠abûôõsArgs
},

388 {"GëS‹tC≠abûôõs", 
GëS‹tC≠abûôõsArgs
},

389 {"GëSy°emUpd©eID", 
GëSy°emUpd©eIDArgs
},

390 {"Brow£", 
Brow£Args
},

391 {"Sórch", 
SórchArgs
},

393 {"Cª©eObje˘", 
Cª©eObje˘Args
},

394 {"De°royObje˘", 
De°royObje˘Args
},

395 {"Upd©eObje˘", 
Upd©eObje˘Args
},

396 {"Imp‹tResour˚", 
Imp‹tResour˚Args
},

397 {"Exp‹tResour˚", 
Exp‹tResour˚Args
},

398 {"St›Tøns„rResour˚", 
St›Tøns„rResour˚Args
},

399 {"GëTøns„rProgªss", 
GëTøns„rProgªssArgs
},

400 {"DñëeResour˚", 
DñëeResour˚Args
},

401 {"Cª©eRe„ªn˚", 
Cª©eRe„ªn˚Args
},

406 c⁄° 
°©eV¨
 
	gC⁄ã¡Dúe˘‹yV¨s
[] =

433 c⁄° 
¨gumít
 
	gGëIsAuth‹izedArgs
[] =

437 {
NULL
, 0, 0}

440 c⁄° 
¨gumít
 
	gGëIsVÆid©edArgs
[] =

444 {
NULL
, 0, 0}

447 c⁄° 
¨gumít
 
	gGëRegi°îDevi˚Args
[] =

451 {
NULL
, 0, 0}

454 c⁄° 
a˘i⁄
 
	gX_MS_MedüRe˚ivîRegi°ørA˘i⁄s
[] =

456 {"IsAuth‹ized", 
GëIsAuth‹izedArgs
},

457 {"IsVÆid©ed", 
GëIsVÆid©edArgs
},

459 {"Regi°îDevi˚", 
GëRegi°îDevi˚Args
},

464 c⁄° 
°©eV¨
 
	gX_MS_MedüRe˚ivîRegi°ørV¨s
[] =

480 c⁄° 
¨gumít
 
	gGëComm⁄LökPr›îtõsArgs
[] =

482 {
NULL
, 2, 0},

483 {
NULL
, 2, 1},

484 {
NULL
, 2, 2},

485 {
NULL
, 2, 3},

486 {
NULL
, 0, 0}

489 c⁄° 
¨gumít
 
	gGëTŸÆByãsSítArgs
[] =

491 {
NULL
, 2, 4},

492 {
NULL
, 0, 0}

495 c⁄° 
¨gumít
 
	gGëTŸÆByãsRe˚ivedArgs
[] =

497 {
NULL
, 2, 5},

498 {
NULL
, 0, 0}

501 c⁄° 
¨gumít
 
	gGëTŸÆPackësSítArgs
[] =

503 {
NULL
, 2, 6},

504 {
NULL
, 0, 0}

507 c⁄° 
¨gumít
 
	gGëTŸÆPackësRe˚ivedArgs
[] =

509 {
NULL
, 2, 7},

510 {
NULL
, 0, 0}

513 c⁄° 
£rvi˚Desc
 
	gs˝dC⁄ã¡Dúe˘‹y
 =

514 { 
C⁄ã¡Dúe˘‹yA˘i⁄s
, 
C⁄ã¡Dúe˘‹yV¨s
 };

516 c⁄° 
£rvi˚Desc
 
	gs˝dC⁄√˘i⁄M™agî
 =

517 { 
C⁄√˘i⁄M™agîA˘i⁄s
, 
C⁄√˘i⁄M™agîV¨s
 };

519 c⁄° 
£rvi˚Desc
 
	gs˝dX_MS_MedüRe˚ivîRegi°ør
 =

520 { 
X_MS_MedüRe˚ivîRegi°ørA˘i⁄s
, 
X_MS_MedüRe˚ivîRegi°ørV¨s
 };

526 
	$°rˇt_°r
(* 
°r
, * 
Àn
, * 
tm∂í
, c⁄° * 
s2
)

528 *
p
;

529 
s2Àn
;

530 
s2Àn
 = ()
	`°æí
(
s2
);

531 if(*
tm∂í
 <(*
Àn
 + 
s2Àn
))

533 if(
s2Àn
 < 256)

534 *
tm∂í
 += 256;

536 *
tm∂í
 +
s2Àn
 + 1;

537 
p
 = 
	`ªÆloc
(
°r
, *
tm∂í
);

538 i‡(!
p
)

540 if(
s2Àn
 < 256)

541 *
tm∂í
 -= 256;

543 *
tm∂í
 -
s2Àn
 + 1;

544  
°r
;

547 
°r
 = 
p
;

550 
	`mem˝y
(
°r
 + *
Àn
, 
s2
, 
s2Àn
 + 1);

551 *
Àn
 +
s2Àn
;

552  
°r
;

553 
	}
}

559 
	$°rˇt_ch¨
(* 
°r
, * 
Àn
, * 
tm∂í
, 
c
)

561 *
p
;

562 if(*
tm∂í
 <(*
Àn
 + 1))

564 *
tm∂í
 += 256;

565 
p
 = (*)
	`ªÆloc
(
°r
, *
tm∂í
);

566 i‡(!
p
)

568 *
tm∂í
 -= 256;

569  
°r
;

572 
°r
 = 
p
;

574 
°r
[*
Àn
] = 
c
;

575 (*
Àn
)++;

576  
°r
;

577 
	}
}

582 
	$gíXML
(* 
°r
, * 
Àn
, * 
tm∂í
,

583 c⁄° 
XMLE…
 * 
p
)

585 
uöt16_t
 
i
, 
j
, 
k
;

586 
t›
;

587 c⁄° * 
ñäame
, *
s
;

588 
c
;

589 
ñemít
[64];

591 
i
;

592 
j
;

593 c⁄° * 
ñäame
;

594 } 
pûe
[16];

595 
t›
 = -1;

596 
i
 = 0;

597 
j
 = 1;

600 
ñäame
 = 
p
[
i
].eltname;

601 if(!
ñäame
)

602  
°r
;

603 if(
ñäame
[0] == '/')

605 #ifde‡
DESC_DEBUG


606 
	`¥ötf
("DBG: <%s>%s<%s>\n", 
ñäame
+1, 
p
[
i
].
d©a
,Éltname);

608 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '<');

609 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, 
tm∂í
, 
ñäame
+1);

610 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '>');

611 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, 
tm∂í
, 
p
[
i
].
d©a
);

612 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '<');

613 
	`ssˇnf
(
ñäame
, "%s", 
ñemít
);

614 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, 
tm∂í
, 
ñemít
);

615 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '>');

618 if(
t›
 < 0)

619  
°r
;

620 
i
 = ++(
pûe
[
t›
].i);

621 
j
 = 
pûe
[
t›
].j;

622 #ifde‡
DESC_DEBUG


623 
	`¥ötf
("DBG:Öûe[%d]\t%d %d\n", 
t›
, 
i
, 
j
);

625 if(
i
==
j
)

627 #ifde‡
DESC_DEBUG


628 
	`¥ötf
("DBG: i==j, </%s>\n", 
pûe
[
t›
].
ñäame
);

630 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '<');

631 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '/');

632 
s
 = 
pûe
[
t›
].
ñäame
;

633 
c
 = *
s
; c > ' '; c = *(++s))

634 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, 
c
);

635 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '>');

636 
t›
--;

644 #ifde‡
DESC_DEBUG


645 
	`¥ötf
("DBG: [%d] <%s>\n", 
i
, 
ñäame
);

647 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '<');

648 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, 
tm∂í
, 
ñäame
);

649 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, 
tm∂í
, '>');

650 
k
 = 
i
;

653 
i
 = ()
p
[
k
].
d©a
 & 0xffff;

654 
j
 = 
i
 + (()
p
[
k
].
d©a
 >> 16);

655 
t›
++;

656 #ifde‡
DESC_DEBUG


657 
	`¥ötf
("DBG: +pûe[%d]\t%d %d\n", 
t›
, 
i
, 
j
);

659 
pûe
[
t›
].
i
 = i;

660 
pûe
[
t›
].
j
 = j;

661 
pûe
[
t›
].
ñäame
 =Éltname;

664 
	}
}

672 
	$gíRoŸDesc
(* 
Àn
)

674 * 
°r
;

675 
tm∂í
;

676 
tm∂í
 = 2560;

677 
°r
 = (*)
	`mÆloc
(
tm∂í
);

678 if(
°r
 =
NULL
)

679  
NULL
;

680 * 
Àn
 = 
	`°æí
(
xmlvî
);

681 
	`mem˝y
(
°r
, 
xmlvî
, *
Àn
 + 1);

682 
°r
 = 
	`gíXML
(°r, 
Àn
, &
tm∂í
, 
roŸDesc
);

683 
°r
[*
Àn
] = '\0';

684  
°r
;

685 
	}
}

688 
	$gíRoŸDescSamsung
(* 
Àn
)

690 * 
°r
;

691 
tm∂í
;

692 
XMLE…
 
ßmsungRoŸDesc
[(
roŸDesc
)/(XMLElt)];

693 
tm∂í
 = 2560;

694 
°r
 = (*)
	`mÆloc
(
tm∂í
);

695 if(
°r
 =
NULL
)

696  
NULL
;

697 * 
Àn
 = 
	`°æí
(
xmlvî
);

698 
	`mem˝y
(
°r
, 
xmlvî
, *
Àn
 + 1);

700 
	`mem˝y
(&
ßmsungRoŸDesc
, &
roŸDesc
, (rootDesc));

701 
ßmsungRoŸDesc
[8+
PNPX
].
ñäame
 = "/sec:ProductCap";

702 
ßmsungRoŸDesc
[8+
PNPX
].
d©a
 = "smi,DCM10,getMediaInfo.sec,getCaptionInfo.sec";

703 
ßmsungRoŸDesc
[12+
PNPX
].
ñäame
 = "/sec:X_ProductCap";

704 
ßmsungRoŸDesc
[12+
PNPX
].
d©a
 = "smi,DCM10,getMediaInfo.sec,getCaptionInfo.sec";

705 
°r
 = 
	`gíXML
(°r, 
Àn
, &
tm∂í
, 
ßmsungRoŸDesc
);

706 
°r
[*
Àn
] = '\0';

707  
°r
;

708 
	}
}

714 
	$gíSîvi˚Desc
(* 
Àn
, c⁄° 
£rvi˚Desc
 * 
s
)

716 
i
, 
j
;

717 c⁄° 
a˘i⁄
 * 
a˘s
;

718 c⁄° 
°©eV¨
 * 
v¨s
;

719 c⁄° 
¨gumít
 * 
¨gs
;

720 c⁄° * 
p
;

721 * 
°r
;

722 
tm∂í
;

723 
tm∂í
 = 2048;

724 
°r
 = (*)
	`mÆloc
(
tm∂í
);

725 if(
°r
 =
NULL
)

726  
NULL
;

728 *
Àn
 = 
	`°æí
(
xmlvî
);

729 
	`mem˝y
(
°r
, 
xmlvî
, *
Àn
 + 1);

731 
a˘s
 = 
s
->
a˘i⁄Li°
;

732 
v¨s
 = 
s
->
£rvi˚SèãTabÀ
;

734 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, &
tm∂í
, '<');

735 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
roŸ_£rvi˚
);

736 
°r
 = 
	`°rˇt_ch¨
(°r, 
Àn
, &
tm∂í
, '>');

738 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
,

741 
i
 = 0;

742 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "<actionList>");

743 
a˘s
[
i
].
«me
)

745 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "<action><name>");

746 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
a˘s
[
i
].
«me
);

747 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</name>");

749 
¨gs
 = 
a˘s
[
i
].args;

750 if(
¨gs
)

752 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "<argumentList>");

753 
j
 = 0;

754 
¨gs
[
j
].
dú
)

756 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "<argument><name>");

757 
p
 = 
v¨s
[
¨gs
[
j
].
ªœãdV¨
].
«me
;

758 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, (
¨gs
[
j
].
«me
 ?árgs[j].«mê: 
p
));

759 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</name><direction>");

760 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
¨gs
[
j
].
dú
==1?"in":"out");

761 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
,

763 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
p
);

764 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
,

766 
j
++;

768 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
,"</argumentList>");

770 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</action>");

772 
i
++;

774 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</actionList><serviceStateTable>");

775 
i
 = 0;

776 
v¨s
[
i
].
«me
)

778 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
,

780 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, (
v¨s
[
i
].
ôy≥
 & 0x80)?"yes":"no");

781 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "\"><name>");

782 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
v¨s
[
i
].
«me
);

783 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</name><dataType>");

784 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
u≤±y≥s
[
v¨s
[
i
].
ôy≥
 & 0x0f]);

785 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</dataType>");

786 if(
v¨s
[
i
].
üŒowedli°
)

788 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "<allowedValueList>");

789 
j
=
v¨s
[
i
].
üŒowedli°
; 
u≤∑ŒowedvÆues
[j]; j++)

791 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "<allowedValue>");

792 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
u≤∑ŒowedvÆues
[
j
]);

793 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</allowedValue>");

795 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</allowedValueList>");

798 if(
v¨s
[
i
].
ideÁu…
)

800 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "<defaultValue>");

802 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
u≤pdeÁu…vÆues
[
v¨s
[
i
].
ideÁu…
]);

803 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</defaultValue>");

805 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</stateVariable>");

807 
i
++;

809 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</serviceStateTable></scpd>");

810 
°r
[*
Àn
] = '\0';

811  
°r
;

812 
	}
}

817 
	$gíC⁄ã¡Dúe˘‹y
(* 
Àn
)

819  
	`gíSîvi˚Desc
(
Àn
, &
s˝dC⁄ã¡Dúe˘‹y
);

820 
	}
}

825 
	$gíC⁄√˘i⁄M™agî
(* 
Àn
)

827  
	`gíSîvi˚Desc
(
Àn
, &
s˝dC⁄√˘i⁄M™agî
);

828 
	}
}

833 
	$gíX_MS_MedüRe˚ivîRegi°ør
(* 
Àn
)

835  
	`gíSîvi˚Desc
(
Àn
, &
s˝dX_MS_MedüRe˚ivîRegi°ør
);

836 
	}
}

839 
	$gíEvítV¨s
(* 
Àn
, c⁄° 
£rvi˚Desc
 * 
s
, c⁄° * 
£rvns
)

841 c⁄° 
°©eV¨
 * 
v
;

842 * 
°r
;

843 
tm∂í
;

844 
buf
[512];

845 
tm∂í
 = 512;

846 
°r
 = (*)
	`mÆloc
(
tm∂í
);

847 if(
°r
 =
NULL
)

848  
NULL
;

849 *
Àn
 = 0;

850 
v
 = 
s
->
£rvi˚SèãTabÀ
;

851 
	`¢¥ötf
(
buf
, (buf), "<e:¥›îty£àxm s:e=\"u∫:schemas-u≤p-‹g:evít-1-0\" xm s:s=\"%s\">", 
£rvns
);

852 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
buf
);

853 
v
->
«me
) {

854 if(
v
->
ôy≥
 & 0x80) {

855 
	`¢¥ötf
(
buf
, (buf), "<e:¥›îty><%s>", 
v
->
«me
);

856 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
buf
);

858 
v
->
õvítvÆue
) {

862 if–
	`°rcmp
(
v
->
«me
, "SystemUpdateID") == 0 )

864 
	`¢¥ötf
(
buf
, (buf), "%d", 
upd©eID
);

865 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
buf
);

869 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
u≤∑ŒowedvÆues
[
v
->
õvítvÆue
]);

872 
	`¢¥ötf
(
buf
, (buf), "</%s></e:¥›îty>", 
v
->
«me
);

873 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, 
buf
);

876 
v
++;

878 
°r
 = 
	`°rˇt_°r
(°r, 
Àn
, &
tm∂í
, "</e:propertyset>");

882 
°r
[*
Àn
] = '\0';

883  
°r
;

884 
	}
}

887 
	$gëV¨sC⁄ã¡Dúe˘‹y
(* 
l
)

889  
	`gíEvítV¨s
(
l
,

890 &
s˝dC⁄ã¡Dúe˘‹y
,

892 
	}
}

895 
	$gëV¨sC⁄√˘i⁄M™agî
(* 
l
)

897  
	`gíEvítV¨s
(
l
,

898 &
s˝dC⁄√˘i⁄M™agî
,

900 
	}
}

903 
	$gëV¨sX_MS_MedüRe˚ivîRegi°ør
(* 
l
)

905  
	`gíEvítV¨s
(
l
,

906 &
s˝dX_MS_MedüRe˚ivîRegi°ør
,

908 
	}
}

	@upnpdescgen.h

29 #i‚de‡
__UPNPDESCGEN_H__


30 
	#__UPNPDESCGEN_H__


	)

32 
	~"c⁄fig.h
"

38 
	sXMLE…
 {

39 c⁄° * 
	mñäame
;

40 c⁄° * 
	md©a
;

44 
	s£rvi˚Desc
 {

45 c⁄° 
a˘i⁄
 * 
	ma˘i⁄Li°
;

46 c⁄° 
°©eV¨
 * 
	m£rvi˚SèãTabÀ
;

49 
	sa˘i⁄
 {

50 c⁄° * 
	m«me
;

51 c⁄° 
¨gumít
 * 
	m¨gs
;

54 
	s¨gumít
 {

55 c⁄° * 
	m«me
;

56 
	mdú
;

57 
	mªœãdV¨
;

60 
	s°©eV¨
 {

61 c⁄° * 
	m«me
;

62 
	môy≥
;

63 
	mideÁu…
;

64 
	müŒowedli°
;

65 
	mõvítvÆue
;

70 
	#INITHELPER
(
i
, 
n
Ë((*)(“<<16)|i))

	)

75 
gíRoŸDesc
(* 
Àn
);

78 
gíRoŸDescSamsung
(* 
Àn
);

82 
gíC⁄ã¡Dúe˘‹y
(* 
Àn
);

85 
gíC⁄√˘i⁄M™agî
(* 
Àn
);

88 
gíX_MS_MedüRe˚ivîRegi°ør
(* 
Àn
);

91 
gëV¨sC⁄ã¡Dúe˘‹y
(* 
Àn
);

94 
gëV¨sC⁄√˘i⁄M™agî
(* 
Àn
);

97 
gëV¨sX_MS_MedüRe˚ivîRegi°ør
(* 
Àn
);

	@upnpevents.c

48 
	~"c⁄fig.h
"

50 
	~<°dio.h
>

51 
	~<°rög.h
>

52 
	~<î∫o.h
>

53 
	~<sys/queue.h
>

54 
	~<°dlib.h
>

55 
	~<uni°d.h
>

56 
	~<time.h
>

57 
	~<sys/ty≥s.h
>

58 
	~<sys/sockë.h
>

59 
	~<sys/∑øm.h
>

60 
	~<√töë/ö.h
>

61 
	~<¨∑/öë.h
>

62 
	~<f˙é.h
>

63 
	~<î∫o.h
>

65 
	~"u≤≥víts.h
"

66 
	~"möid ≠©h.h
"

67 
	~"u≤pglobÆv¨s.h
"

68 
	~"u≤pdescgí.h
"

69 
	~"uuid.h
"

70 
	~"log.h
"

73 
	ssubs¸ibî
 {

74 
LIST_ENTRY
(
subs¸ibî
Ë
	míåõs
;

75 
u≤p_evít_nŸify
 * 
	mnŸify
;

76 
time_t
 
	mtimeout
;

77 
uöt32_t
 
	m£q
;

78 
subs¸ibî_£rvi˚_íum
 
	m£rvi˚
;

79 
	muuid
[42];

80 
	mˇŒback
[];

83 
	su≤p_evít_nŸify
 {

84 
LIST_ENTRY
(
u≤p_evít_nŸify
Ë
	míåõs
;

85 
	ms
;

86 íum { 
	mECª©ed
=1,

87 
	mEC⁄√˘ög
,

88 
	mESídög
,

89 
	mEWaôögF‹Re•⁄£
,

90 
	mEFöished
,

91 
	mEEº‹
 } 
	m°©e
;

92 
subs¸ibî
 * 
	msub
;

93 * 
	mbuf„r
;

94 
	mbuf„rsize
;

95 
	mto£nd
;

96 
	m£¡
;

97 c⁄° * 
	m∑th
;

98 
	maddr°r
[16];

99 
	mp‹t°r
[8];

104 
u≤p_evít_¸óã_nŸify
(
subs¸ibî
 * 
sub
);

107 
	$LIST_HEAD
(
li°hód
, 
subs¸ibî
Ë
subs¸ibîli°
 = { 
NULL
 
	}
};

110 
	$LIST_HEAD
(
li°hódnŸif
, 
u≤p_evít_nŸify
Ë
nŸifyli°
 = { 
NULL
 
	}
};

113 
subs¸ibî
 *

114 
	$√wSubs¸ibî
(c⁄° * 
evítuæ
, c⁄° * 
ˇŒback
, 
ˇŒbackÀn
)

116 
subs¸ibî
 * 
tmp
;

117 if(!
evítuæ
 || !
ˇŒback
 || !
ˇŒbackÀn
)

118  
NULL
;

119 
tmp
 = 
	`ˇŒoc
(1, (
subs¸ibî
)+
ˇŒbackÀn
+1);

120 if(
	`°rcmp
(
evítuæ
, 
CONTENTDIRECTORY_EVENTURL
)==0)

121 
tmp
->
£rvi˚
 = 
EC⁄ã¡Dúe˘‹y
;

122 if(
	`°rcmp
(
evítuæ
, 
CONNECTIONMGR_EVENTURL
)==0)

123 
tmp
->
£rvi˚
 = 
EC⁄√˘i⁄M™agî
;

124 if(
	`°rcmp
(
evítuæ
, 
X_MS_MEDIARECEIVERREGISTRAR_EVENTURL
)==0)

125 
tmp
->
£rvi˚
 = 
EMSMedüRe˚ivîRegi°ør
;

127 
	`‰ì
(
tmp
);

128  
NULL
;

130 
	`mem˝y
(
tmp
->
ˇŒback
, cÆlback, 
ˇŒbackÀn
);

131 
tmp
->
ˇŒback
[
ˇŒbackÀn
] = '\0';

133 
	`°∫˝y
(
tmp
->
uuid
, 
uuidvÆue
, (tmp->uuid));

134 if–
	`gë_uuid_°rög
(
tmp
->
uuid
+5) != 0 )

136 
tmp
->
uuid
[(tmp->uuid)-1] = '\0';

137 
	`¢¥ötf
(
tmp
->
uuid
+37, 5, "%04lx", 
	`øndom
() & 0xffff);

140  
tmp
;

141 
	}
}

146 
	$u≤≥víts_addSubs¸ibî
(c⁄° * 
evítuæ
,

147 c⁄° * 
ˇŒback
, 
ˇŒbackÀn
,

148 
timeout
)

150 
subs¸ibî
 * 
tmp
;

151 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "addSubscriber(%s, %.*s, %d)\n",

152 
evítuæ
, 
ˇŒbackÀn
, 
ˇŒback
, 
timeout
);

153 
tmp
 = 
	`√wSubs¸ibî
(
evítuæ
, 
ˇŒback
, 
ˇŒbackÀn
);

154 if(!
tmp
)

155  
NULL
;

156 if(
timeout
)

157 
tmp
->
timeout
 = 
	`time
(
NULL
) +Åimeout;

158 
	`LIST_INSERT_HEAD
(&
subs¸ibîli°
, 
tmp
, 
íåõs
);

159 
	`u≤p_evít_¸óã_nŸify
(
tmp
);

160  
tmp
->
uuid
;

161 
	}
}

165 
	$ª√wSubs¸ùti⁄
(c⁄° * 
sid
, 
sidÀn
, 
timeout
)

167 
subs¸ibî
 * 
sub
;

168 
sub
 = 
subs¸ibîli°
.
lh_fú°
; sub !
NULL
; sub = sub->
íåõs
.
À_√xt
) {

169 if(
	`memcmp
(
sid
, 
sub
->
uuid
, 41) == 0) {

170 
sub
->
timeout
 = (timeouà? 
	`time
(
NULL
) +Åimeout : 0);

175 
	}
}

178 
	$u≤≥víts_ªmoveSubs¸ibî
(c⁄° * 
sid
, 
sidÀn
)

180 
subs¸ibî
 * 
sub
;

181 if(!
sid
)

183 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "removeSubscriber(%.*s)\n",

184 
sidÀn
, 
sid
);

185 
sub
 = 
subs¸ibîli°
.
lh_fú°
; sub !
NULL
; sub = sub->
íåõs
.
À_√xt
) {

186 if(
	`memcmp
(
sid
, 
sub
->
uuid
, 41) == 0) {

187 if(
sub
->
nŸify
) {

188 
sub
->
nŸify
->sub = 
NULL
;

190 
	`LIST_REMOVE
(
sub
, 
íåõs
);

191 
	`‰ì
(
sub
);

196 
	}
}

199 
	$u≤≥víts_ªmoveSubs¸ibîs
()

201 
subs¸ibî
 * 
sub
;

203 
sub
 = 
subs¸ibîli°
.
lh_fú°
; sub !
NULL
; sub = subscriberlist.lh_first) {

204 
	`u≤≥víts_ªmoveSubs¸ibî
(
sub
->
uuid
, (sub->uuid));

206 
	}
}

210 
	$u≤p_evít_v¨_ch™ge_nŸify
(
subs¸ibî_£rvi˚_íum
 
£rvi˚
)

212 
subs¸ibî
 * 
sub
;

213 
sub
 = 
subs¸ibîli°
.
lh_fú°
; sub !
NULL
; sub = sub->
íåõs
.
À_√xt
) {

214 if(
sub
->
£rvi˚
 =£rvi˚ && sub->
nŸify
 =
NULL
)

215 
	`u≤p_evít_¸óã_nŸify
(
sub
);

217 
	}
}

221 
	$u≤p_evít_¸óã_nŸify
(
subs¸ibî
 * 
sub
)

223 
u≤p_evít_nŸify
 * 
obj
;

224 
Êags
;

225 
obj
 = 
	`ˇŒoc
(1, (
u≤p_evít_nŸify
));

226 if(!
obj
) {

227 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "%s: cÆloc(): %s\n", "u≤p_evít_¸óã_nŸify", 
	`°ªº‹
(
î∫o
));

230 
obj
->
sub
 = sub;

231 
obj
->
°©e
 = 
ECª©ed
;

232 
obj
->
s
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

233 if(
obj
->
s
<0) {

234 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "%s: sockë(): %s\n", "u≤p_evít_¸óã_nŸify", 
	`°ªº‹
(
î∫o
));

235 
îr‹
;

237 if((
Êags
 = 
	`f˙é
(
obj
->
s
, 
F_GETFL
, 0)) < 0) {

238 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "%s: fcntl(..F_GETFL..): %s\n",

239 "u≤p_evít_¸óã_nŸify", 
	`°ªº‹
(
î∫o
));

240 
îr‹
;

242 if(
	`f˙é
(
obj
->
s
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0) {

243 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "%s: fcntl(..F_SETFL..): %s\n",

244 "u≤p_evít_¸óã_nŸify", 
	`°ªº‹
(
î∫o
));

245 
îr‹
;

247 if(
sub
)

248 
sub
->
nŸify
 = 
obj
;

249 
	`LIST_INSERT_HEAD
(&
nŸifyli°
, 
obj
, 
íåõs
);

251 
îr‹
:

252 if(
obj
->
s
 >= 0)

253 
	`˛o£
(
obj
->
s
);

254 
	`‰ì
(
obj
);

255 
	}
}

258 
	$u≤p_evít_nŸify_c⁄√˘
(
u≤p_evít_nŸify
 * 
obj
)

260 
i
;

261 c⁄° * 
p
;

262 
p‹t
;

263 
sockaddr_ö
 
addr
;

264 if(!
obj
)

266 
	`mem£t
(&
addr
, 0, (addr));

267 
i
 = 0;

268 if(
obj
->
sub
 =
NULL
) {

269 
obj
->
°©e
 = 
EEº‹
;

272 
p
 = 
obj
->
sub
->
ˇŒback
;

273 
p
 += 7;

274 *
p
 !'/' && *∞!':' && 
i
 < ((
obj
->
addr°r
)-1))

275 
obj
->
addr°r
[
i
++] = *(
p
++);

276 
obj
->
addr°r
[
i
] = '\0';

277 if(*
p
 == ':') {

278 
obj
->
p‹t°r
[0] = *
p
;

279 
i
 = 1;

280 
p
++;

281 
p‹t
 = ()
	`©oi
(
p
);

282 *
p
 != '/' && *p != '\0') {

283 if(
i
<7Ë
obj
->
p‹t°r
[i++] = *
p
;

284 
p
++;

286 
obj
->
p‹t°r
[
i
] = 0;

288 
p‹t
 = 80;

289 
obj
->
p‹t°r
[0] = '\0';

291 if–*
p
 )

292 
obj
->
∑th
 = 
p
;

294 
obj
->
∑th
 = "/";

295 
addr
.
sö_Ámûy
 = 
AF_INET
;

296 
	`öë_©⁄
(
obj
->
addr°r
, &
addr
.
sö_addr
);

297 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

298 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "%s: '%s' %hu '%s'\n", "upnp_event_notify_connect",

299 
obj
->
addr°r
, 
p‹t
, obj->
∑th
);

300 
obj
->
°©e
 = 
EC⁄√˘ög
;

301 if(
	`c⁄√˘
(
obj
->
s
, (
sockaddr
 *)&
addr
, (addr)) < 0) {

302 if(
î∫o
 !
EINPROGRESS
 &&Éºnÿ!
EWOULDBLOCK
) {

303 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "%s: c⁄√˘(): %s\n", "u≤p_evít_nŸify_c⁄√˘", 
	`°ªº‹
(
î∫o
));

304 
obj
->
°©e
 = 
EEº‹
;

307 
	}
}

309 
	$u≤p_evít_¥ï¨e
(
u≤p_evít_nŸify
 * 
obj
)

311 c⁄° 
nŸifymsg
[] =

324 * 
xml
;

325 
l
;

326 if(
obj
->
sub
 =
NULL
) {

327 
obj
->
°©e
 = 
EEº‹
;

330 
obj
->
sub
->
£rvi˚
) {

331 
EC⁄ã¡Dúe˘‹y
:

332 
xml
 = 
	`gëV¨sC⁄ã¡Dúe˘‹y
(&
l
);

334 
EC⁄√˘i⁄M™agî
:

335 
xml
 = 
	`gëV¨sC⁄√˘i⁄M™agî
(&
l
);

337 
EMSMedüRe˚ivîRegi°ør
:

338 
xml
 = 
	`gëV¨sX_MS_MedüRe˚ivîRegi°ør
(&
l
);

341 
xml
 = 
NULL
;

342 
l
 = 0;

344 
obj
->
to£nd
 = 
	`a•rötf
(&(obj->
buf„r
), 
nŸifymsg
,

345 
obj
->
∑th
, obj->
addr°r
, obj->
p‹t°r
, 
l
+2,

346 
obj
->
sub
->
uuid
, obj->sub->
£q
,

347 
l
, 
xml
);

348 
obj
->
buf„rsize
 = obj->
to£nd
;

349 
	`‰ì
(
xml
);

350 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Sídög UPnP Evíàª•⁄£:\n%s\n", 
obj
->
buf„r
);

351 
obj
->
°©e
 = 
ESídög
;

352 
	}
}

354 
	$u≤p_evít_£nd
(
u≤p_evít_nŸify
 * 
obj
)

356 
i
;

358  
obj
->
£¡
 < obj->
to£nd
 ) {

359 
i
 = 
	`£nd
(
obj
->
s
, obj->
buf„r
 + obj->
£¡
, obj->
to£nd
 - obj->sent, 0);

360 if(
i
<0) {

361 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "%s: síd(): %s\n", "u≤p_evít_£nd", 
	`°ªº‹
(
î∫o
));

362 
obj
->
°©e
 = 
EEº‹
;

365 
obj
->
£¡
 +
i
;

367 if(
obj
->
£¡
 =obj->
to£nd
)

368 
obj
->
°©e
 = 
EWaôögF‹Re•⁄£
;

369 
	}
}

371 
	$u≤p_evít_ªcv
(
u≤p_evít_nŸify
 * 
obj
)

373 
n
;

374 
n
 = 
	`ªcv
(
obj
->
s
, obj->
buf„r
, obj->
buf„rsize
, 0);

375 if(
n
<0) {

376 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "%s:Ñecv(): %s\n", "u≤p_evít_ªcv", 
	`°ªº‹
(
î∫o
));

377 
obj
->
°©e
 = 
EEº‹
;

380 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "%s: (%dbytes) %.*s\n", "upnp_event_recv",

381 
n
,Ç, 
obj
->
buf„r
);

382 
obj
->
°©e
 = 
EFöished
;

383 if(
obj
->
sub
)

385 
obj
->
sub
->
£q
++;

386 i‡(!
obj
->
sub
->
£q
)

387 
obj
->
sub
->
£q
++;

389 
	}
}

392 
	$u≤p_evít_¥o˚ss_nŸify
(
u≤p_evít_nŸify
 * 
obj
)

394 
obj
->
°©e
) {

395 
EC⁄√˘ög
:

397 
	`u≤p_evít_¥ï¨e
(
obj
);

398 
	`u≤p_evít_£nd
(
obj
);

400 
ESídög
:

401 
	`u≤p_evít_£nd
(
obj
);

403 
EWaôögF‹Re•⁄£
:

404 
	`u≤p_evít_ªcv
(
obj
);

406 
EFöished
:

407 
	`˛o£
(
obj
->
s
);

408 
obj
->
s
 = -1;

411 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "upnp_event_process_notify: unknown state\n");

413 
	}
}

415 
	$u≤≥víts_£À˘fds
(
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, * 
max_fd
)

417 
u≤p_evít_nŸify
 * 
obj
;

418 
obj
 = 
nŸifyli°
.
lh_fú°
; obj !
NULL
; obj = obj->
íåõs
.
À_√xt
) {

419 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "upnpevents_selectfds: %p %d %d\n",

420 
obj
, obj->
°©e
, obj->
s
);

421 if(
obj
->
s
 >= 0) {

422 
obj
->
°©e
) {

423 
ECª©ed
:

424 
	`u≤p_evít_nŸify_c⁄√˘
(
obj
);

425 if(
obj
->
°©e
 !
EC⁄√˘ög
)

427 
EC⁄√˘ög
:

428 
ESídög
:

429 
	`FD_SET
(
obj
->
s
, 
wrôe£t
);

430 if(
obj
->
s
 > *
max_fd
)

431 *
max_fd
 = 
obj
->
s
;

433 
EWaôögF‹Re•⁄£
:

434 
	`FD_SET
(
obj
->
s
, 
ªad£t
);

435 if(
obj
->
s
 > *
max_fd
)

436 *
max_fd
 = 
obj
->
s
;

443 
	}
}

445 
	$u≤≥víts_¥o˚ssfds
(
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
)

447 
u≤p_evít_nŸify
 * 
obj
;

448 
u≤p_evít_nŸify
 * 
√xt
;

449 
subs¸ibî
 * 
sub
;

450 
subs¸ibî
 * 
sub√xt
;

451 
time_t
 
cuπime
;

452 
obj
 = 
nŸifyli°
.
lh_fú°
; obj !
NULL
; obj = obj->
íåõs
.
À_√xt
) {

453 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "%s: %p %d %d %d %d\n",

454 "u≤≥víts_¥o˚ssfds", 
obj
, obj->
°©e
, obj->
s
,

455 
	`FD_ISSET
(
obj
->
s
, 
ªad£t
), FD_ISSET(obj->s, 
wrôe£t
));

456 if(
obj
->
s
 >= 0) {

457 if(
	`FD_ISSET
(
obj
->
s
, 
ªad£t
Ë|| FD_ISSET(obj->s, 
wrôe£t
))

458 
	`u≤p_evít_¥o˚ss_nŸify
(
obj
);

461 
obj
 = 
nŸifyli°
.
lh_fú°
;

462 
obj
 !
NULL
) {

463 
√xt
 = 
obj
->
íåõs
.
À_√xt
;

464 if(
obj
->
°©e
 =
EEº‹
 || obj->°©ê=
EFöished
) {

465 if(
obj
->
s
 >= 0) {

466 
	`˛o£
(
obj
->
s
);

468 if(
obj
->
sub
)

469 
obj
->
sub
->
nŸify
 = 
NULL
;

472 if(
obj
->
°©e
 =
EEº‹
 && obj->
sub
) {

473 
	`LIST_REMOVE
(
obj
->
sub
, 
íåõs
);

474 
	`‰ì
(
obj
->
sub
);

477 
	`‰ì
(
obj
->
buf„r
);

478 
	`LIST_REMOVE
(
obj
, 
íåõs
);

479 
	`‰ì
(
obj
);

481 
obj
 = 
√xt
;

484 
cuπime
 = 
	`time
(
NULL
);

485 
sub
 = 
subs¸ibîli°
.
lh_fú°
; sub !
NULL
; ) {

486 
sub√xt
 = 
sub
->
íåõs
.
À_√xt
;

487 if(
sub
->
timeout
 && 
cuπime
 > sub->timeouà&& sub->
nŸify
 =
NULL
) {

488 
	`LIST_REMOVE
(
sub
, 
íåõs
);

489 
	`‰ì
(
sub
);

491 
sub
 = 
sub√xt
;

493 
	}
}

	@upnpevents.h

48 #i‚de‡
__UPNPEVENTS_H__


49 
	#__UPNPEVENTS_H__


	)

50 
	esubs¸ibî_£rvi˚_íum
 {

51 
	mEC⁄ã¡Dúe˘‹y
 = 1,

52 
	mEC⁄√˘i⁄M™agî
,

53 
	mEMSMedüRe˚ivîRegi°ør


57 
u≤p_evít_v¨_ch™ge_nŸify
(
subs¸ibî_£rvi˚_íum
 
£rvi˚
);

60 
u≤≥víts_addSubs¸ibî
(c⁄° * 
evítuæ
,

61 c⁄° * 
ˇŒback
, 
ˇŒbackÀn
,

62 
timeout
);

64 
u≤≥víts_ªmoveSubs¸ibî
(c⁄° * 
sid
, 
sidÀn
);

65 
u≤≥víts_ªmoveSubs¸ibîs
();

67 
ª√wSubs¸ùti⁄
(c⁄° * 
sid
, 
sidÀn
, 
timeout
);

69 
u≤≥víts_£À˘fds
(
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, * 
max_fd
);

70 
u≤≥víts_¥o˚ssfds
(
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
);

72 #ifde‡
USE_MINIUPNPDCTL


73 
wrôe_evíts_dëaûs
(
s
);

	@upnpglobalvars.c

49 
	~<sys/ty≥s.h
>

50 
	~<√töë/ö.h
>

51 
	~<sys/∑øm.h
>

53 
	~"c⁄fig.h
"

54 
	~"u≤pglobÆv¨s.h
"

60 
time_t
 
	g°¨tup_time
 = 0;

62 
ru¡ime_v¨s_s
 
	gru¡ime_v¨s
;

63 
uöt32_t
 
	gru¡ime_Êags
 = 
INOTIFY_MASK
;

65 c⁄° * 
	gpidfûíame
 = "/var/run/minidlna/minidlna.pid";

67 
	guuidvÆue
[] = "uuid:00000000-0000-0000-0000-000000000000";

68 
	gmodñ«me
[
MODELNAME_MAX_LEN
] = 
ROOTDEV_MODELNAME
;

69 
	gmodñnumbî
[
MODELNUMBER_MAX_LEN
] = 
MINIDLNA_VERSION
;

70 
	g£rü umbî
[
SERIALNUMBER_MAX_LEN
] = "00000000";

71 #i‡
PNPX


72 
	g≤px_hwid
[] = "VEN_0000&amp;DEV_0000&amp;REV_01 VEN_0033&amp;DEV_0001&amp;REV_01";

77 
	g¥e£¡©i⁄uæ
[
PRESENTATIONURL_MAX_LEN
];

79 
	gn_œn_addr
 = 0;

80 
œn_addr_s
 
	gœn_addr
[
MAX_LAN_ADDR
];

83 c⁄° * 
	gmöissdpdsockë∑th
 = "/var/run/minissdpd.sock";

86 
sqlôe3
 * 
	gdb
;

87 
	g‰õndly_«me
[
FRIENDLYNAME_MAX_LEN
];

88 
	gdb_∑th
[
PATH_MAX
] = {'\0'};

89 
	glog_∑th
[
PATH_MAX
] = {'\0'};

90 
medü_dú_s
 * 
	gmedü_dús
 = 
NULL
;

91 
Æbum_¨t_«me_s
 * 
	gÆbum_¨t_«mes
 = 
NULL
;

92 
	gsˇ¬ög
 = 0;

93 vﬁ©ûê
	gquôtög
 = 0;

94 vﬁ©ûê
uöt32_t
 
	gupd©eID
 = 0;

	@upnpglobalvars.h

49 #i‚de‡
__UPNPGLOBALVARS_H__


50 
	#__UPNPGLOBALVARS_H__


	)

52 
	~<time.h
>

54 
	~"möid ©y≥s.h
"

55 
	~"˛õ¡s.h
"

56 
	~"c⁄fig.h
"

58 
	~<sqlôe3.h
>

60 
	#MINIDLNA_VERSION
 "1.1.0"

	)

62 #ifde‡
NETGEAR


63 
	#SERVER_NAME
 "RódyDLNA"

	)

65 
	#SERVER_NAME
 "MöiDLNA"

	)

68 
	#USE_FORK
 1

	)

69 
	#DB_VERSION
 9

	)

71 #ifde‡
ENABLE_NLS


72 
	#_
(
°rög
Ë
	`gëãxt
(°rög)

	)

74 
	#_
(
°rög
Ë(°rög)

	)

77 #i‚de‡
PNPX


78 
	#PNPX
 0

	)

81 
	#RESOURCE_PROTOCOL_INFO_VALUES
 \

181 "hâp-gë:*:≠∂iˇti⁄/ogg:*"

	)

183 
	#DLNA_FLAG_DLNA_V1_5
 0x00100000

	)

184 
	#DLNA_FLAG_HTTP_STALLING
 0x00200000

	)

185 
	#DLNA_FLAG_TM_B
 0x00400000

	)

186 
	#DLNA_FLAG_TM_I
 0x00800000

	)

187 
	#DLNA_FLAG_TM_S
 0x01000000

	)

188 
	#DLNA_FLAG_LOP_BYTES
 0x20000000

	)

189 
	#DLNA_FLAG_LOP_NPT
 0x40000000

	)

192 
time_t
 
°¨tup_time
;

194 
ru¡ime_v¨s_s
 
ru¡ime_v¨s
;

196 
uöt32_t
 
ru¡ime_Êags
;

197 
	#INOTIFY_MASK
 0x0001

	)

198 
	#TIVO_MASK
 0x0002

	)

199 
	#DLNA_STRICT_MASK
 0x0004

	)

200 
	#NO_PLAYLIST_MASK
 0x0008

	)

201 
	#SYSTEMD_MASK
 0x0010

	)

203 
	#SETFLAG
(
mask
Ë
ru¡ime_Êags
 |
	)
mask

204 
	#GETFLAG
(
mask
Ë(
ru¡ime_Êags
 & mask)

	)

205 
	#CLEARFLAG
(
mask
Ë
ru¡ime_Êags
 &~
	)
mask

207 c⁄° *
pidfûíame
;

209 
uuidvÆue
[];

211 
	#MODELNAME_MAX_LEN
 (64)

	)

212 
modñ«me
[];

214 
	#MODELNUMBER_MAX_LEN
 (16)

	)

215 
modñnumbî
[];

217 
	#SERIALNUMBER_MAX_LEN
 (16)

	)

218 
£rü umbî
[];

220 
	#PRESENTATIONURL_MAX_LEN
 (64)

	)

221 
¥e£¡©i⁄uæ
[];

223 #i‡
PNPX


224 
≤px_hwid
[];

230 
	#MAX_LAN_ADDR
 (4)

	)

231 
n_œn_addr
;

232 
œn_addr_s
 
œn_addr
[];

234 c⁄° * 
möissdpdsockë∑th
;

237 
sqlôe3
 *
db
;

238 
	#FRIENDLYNAME_MAX_LEN
 (64)

	)

239 
‰õndly_«me
[];

240 
db_∑th
[];

241 
log_∑th
[];

242 
medü_dú_s
 *
medü_dús
;

243 
Æbum_¨t_«me_s
 *
Æbum_¨t_«mes
;

244 
sˇ¬ög
;

245 vﬁ©ûê
quôtög
;

246 vﬁ©ûê
uöt32_t
 
upd©eID
;

	@upnphttp.c

49 
	~<°dlib.h
>

50 
	~<uni°d.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<sys/ty≥s.h
>

54 
	~<sys/sockë.h
>

55 
	~<sys/∑øm.h
>

56 
	~<˘y≥.h
>

57 
	~<sys/ty≥s.h
>

58 
	~<sys/°©.h
>

59 
	~<f˙é.h
>

60 
	~<î∫o.h
>

61 
	~<¨∑/öë.h
>

62 
	~<sys/time.h
>

63 
	~<sys/ªsour˚.h
>

65 
	~"c⁄fig.h
"

66 
	~"u≤pglobÆv¨s.h
"

67 
	~"u≤phâp.h
"

68 
	~"u≤pdescgí.h
"

69 
	~"möid ≠©h.h
"

70 
	~"u≤psﬂp.h
"

71 
	~"u≤≥víts.h
"

72 
	~"utûs.h
"

73 
	~"gëiÁddr.h
"

74 
	~"image_utûs.h
"

75 
	~"log.h
"

76 
	~"sql.h
"

77 
	~<libexif/exif-lﬂdî.h
>

78 
	~"tivo_utûs.h
"

79 
	~"tivo_comm™ds.h
"

80 
	~"˛õ¡s.h
"

82 
	~"£ndfûe.h
"

86 
	#MAX_BUFFER_SIZE
 1048576

87 
	#MIN_BUFFER_SIZE
 65536

	)

89 
	~"ic⁄s.c
"

91 
	eevít_ty≥
 {

92 
	mE_INVALID
,

93 
	mE_SUBSCRIBE
,

94 
	mE_RENEW


97 
u≤phâp
 *

98 
	$New_u≤phâp
(
s
)

100 
u≤phâp
 * 
ªt
;

101 if(
s
<0)

102  
NULL
;

103 
ªt
 = (
u≤phâp
 *)
	`mÆloc
((upnphttp));

104 if(
ªt
 =
NULL
)

105  
NULL
;

106 
	`mem£t
(
ªt
, 0, (
u≤phâp
));

107 
ªt
->
sockë
 = 
s
;

108  
ªt
;

109 
	}
}

112 
	$Clo£Sockë_u≤phâp
(
u≤phâp
 * 
h
)

114 if(
	`˛o£
(
h
->
sockë
) < 0)

116 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "Clo£Sockë_u≤phâp: clo£(%d): %s\n", 
h
->
sockë
, 
	`°ªº‹
(
î∫o
));

118 
h
->
sockë
 = -1;

119 
h
->
°©e
 = 100;

120 
	}
}

123 
	$Dñëe_u≤phâp
(
u≤phâp
 * 
h
)

125 if(
h
)

127 if(
h
->
sockë
 >= 0)

128 
	`Clo£Sockë_u≤phâp
(
h
);

129 
	`‰ì
(
h
->
ªq_buf
);

130 
	`‰ì
(
h
->
ªs_buf
);

131 
	`‰ì
(
h
);

133 
	}
}

137 
	$P¨£HâpHódîs
(
u≤phâp
 * 
h
)

139 * 
löe
;

140 * 
cﬁ⁄
;

141 * 
p
;

142 
n
;

143 
löe
 = 
h
->
ªq_buf
;

145 
löe
 < (
h
->
ªq_buf
 + h->
ªq_c⁄ã¡off
))

147 
cﬁ⁄
 = 
	`°rchr
(
löe
, ':');

148 if(
cﬁ⁄
)

150 if(
	`°∫ˇ£cmp
(
löe
, "Content-Length", 14)==0)

152 
p
 = 
cﬁ⁄
;

153 *
p
 < '0' || *p > '9')

154 
p
++;

155 
h
->
ªq_c⁄ã¡Àn
 = 
	`©oi
(
p
);

157 if(
	`°∫ˇ£cmp
(
löe
, "SOAPAction", 10)==0)

159 
p
 = 
cﬁ⁄
;

160 
n
 = 0;

161 *
p
 == ':' || *p == ' ' || *p == '\t')

162 
p
++;

163 
p
[
n
]>=' ')

165 
n
++;

167 if((
p
[0] ='"' &&Ö[
n
-1] == '"')

168 || (
p
[0] ='\'' &&Ö[
n
-1] == '\''))

170 
p
++; 
n
 -= 2;

172 
h
->
ªq_sﬂpA˘i⁄
 = 
p
;

173 
h
->
ªq_sﬂpA˘i⁄Lí
 = 
n
;

175 if(
	`°∫ˇ£cmp
(
löe
, "Callback", 8)==0)

177 
p
 = 
cﬁ⁄
;

178 *
p
 != '<' && *p != '\r' )

179 
p
++;

180 
n
 = 0;

181 
p
[
n
] != '>' &&Ö[n] != '\r' )

182 
n
++;

183 
h
->
ªq_CÆlback
 = 
p
 + 1;

184 
h
->
ªq_CÆlbackLí
 = 
	`MAX
(0, 
n
 - 1);

186 if(
	`°∫ˇ£cmp
(
löe
, "SID", 3)==0)

190 
p
=
löe
+3;p<
cﬁ⁄
;p++)

192 if(!
	`is•a˚
(*
p
))

194 
p
 = 
NULL
;

198 if(
p
) {

199 
p
 = 
cﬁ⁄
 + 1;

200 
	`is•a˚
(*
p
))

201 
p
++;

202 
n
 = 0;

203 !
	`is•a˚
(
p
[
n
]))

204 
n
++;

205 
h
->
ªq_SID
 = 
p
;

206 
h
->
ªq_SIDLí
 = 
n
;

209 if(
	`°∫ˇ£cmp
(
löe
, "NT", 2)==0)

211 
p
 = 
cﬁ⁄
 + 1;

212 
	`is•a˚
(*
p
))

213 
p
++;

214 
n
 = 0;

215 !
	`is•a˚
(
p
[
n
]))

216 
n
++;

217 
h
->
ªq_NT
 = 
p
;

218 
h
->
ªq_NTLí
 = 
n
;

227 if(
	`°∫ˇ£cmp
(
löe
, "Timeout", 7)==0)

229 
p
 = 
cﬁ⁄
 + 1;

230 
	`is•a˚
(*
p
))

231 
p
++;

232 if(
	`°∫ˇ£cmp
(
p
, "Second-", 7)==0) {

233 
h
->
ªq_Timeout
 = 
	`©oi
(
p
+7);

237 if(
	`°∫ˇ£cmp
(
löe
, "Range", 5)==0)

239 
p
 = 
cﬁ⁄
 + 1;

240 
	`is•a˚
(*
p
))

241 
p
++;

242 if(
	`°∫ˇ£cmp
(
p
, "bytes=", 6)==0) {

243 
h
->
ªqÊags
 |
FLAG_RANGE
;

244 
h
->
ªq_R™geSèπ
 = 
	`°πﬁl
(
p
+6, &
cﬁ⁄
, 10);

245 
h
->
ªq_R™geEnd
 = 
cﬁ⁄
 ? 
	`©ﬁl
(colon+1) : 0;

246 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Range Start-End: %lld - %lld\n",

247 
h
->
ªq_R™geSèπ
, h->
ªq_R™geEnd
?h->req_RangeEnd:-1);

250 if(
	`°∫ˇ£cmp
(
löe
, "Host", 4)==0)

252 
i
;

253 
h
->
ªqÊags
 |
FLAG_HOST
;

254 
p
 = 
cﬁ⁄
 + 1;

255 
	`is•a˚
(*
p
))

256 
p
++;

257 
n
 = 0;Ç<
n_œn_addr
;Ç++)

259 
i
=0; 
œn_addr
[
n
].
°r
[i]; i++)

261 if(
œn_addr
[
n
].
°r
[
i
] !
p
[i])

264 if(!
œn_addr
[
n
].
°r
[
i
])

266 
h
->
iÁ˚
 = 
n
;

271 if(
	`°∫ˇ£cmp
(
löe
, "User-Agent", 10)==0)

273 
i
;

275 if–
h
->
ªq_˛õ¡
 )

276 
√xt_hódî
;

277 
p
 = 
cﬁ⁄
 + 1;

278 
	`is•a˚
(*
p
))

279 
p
++;

280 
i
 = 0; 
˛õ¡_ty≥s
[i].
«me
; i++)

282 i‡(
˛õ¡_ty≥s
[
i
].
m©ch_ty≥
 !
EU£rAgít
)

284 i‡(
	`°r°rc
(
p
, 
˛õ¡_ty≥s
[
i
].
m©ch
, '\r'Ë!
NULL
)

286 
h
->
ªq_˛õ¡
 = 
i
;

291 if(
	`°∫ˇ£cmp
(
löe
, "X-AV-Client-Info", 16)==0)

293 
i
;

295 if–
h
->
ªq_˛õ¡
 && 
˛õ¡_ty≥s
[h->ªq_˛õ¡].
ty≥
 < 
ESènd¨dDLNA150
 )

296 
√xt_hódî
;

297 
p
 = 
cﬁ⁄
 + 1;

298 
	`is•a˚
(*
p
))

299 
p
++;

300 
i
 = 0; 
˛õ¡_ty≥s
[i].
«me
; i++)

302 i‡(
˛õ¡_ty≥s
[
i
].
m©ch_ty≥
 !
EXAVClõ¡Info
)

304 i‡(
	`°r°rc
(
p
, 
˛õ¡_ty≥s
[
i
].
m©ch
, '\r'Ë!
NULL
)

306 
h
->
ªq_˛õ¡
 = 
i
;

311 if(
	`°∫ˇ£cmp
(
löe
, "Transfer-Encoding", 17)==0)

313 
p
 = 
cﬁ⁄
 + 1;

314 
	`is•a˚
(*
p
))

315 
p
++;

316 if(
	`°∫ˇ£cmp
(
p
, "chunked", 7)==0)

318 
h
->
ªqÊags
 |
FLAG_CHUNKED
;

321 if(
	`°∫ˇ£cmp
(
löe
, "Accept-Language", 15)==0)

323 
h
->
ªqÊags
 |
FLAG_LANGUAGE
;

325 if(
	`°∫ˇ£cmp
(
löe
, "getcontentFeatures.dlna.org", 27)==0)

327 
p
 = 
cﬁ⁄
 + 1;

328 
	`is•a˚
(*
p
))

329 
p
++;

330 if–(*
p
 !'1'Ë|| !
	`is•a˚
(p[1]) )

331 
h
->
ªqÊags
 |
FLAG_INVALID_REQ
;

333 if(
	`°∫ˇ£cmp
(
löe
, "TimeSeekRange.dlna.org", 22)==0)

335 
h
->
ªqÊags
 |
FLAG_TIMESEEK
;

337 if(
	`°∫ˇ£cmp
(
löe
, "PlaySpeed.dlna.org", 18)==0)

339 
h
->
ªqÊags
 |
FLAG_PLAYSPEED
;

341 if(
	`°∫ˇ£cmp
(
löe
, "realTimeInfo.dlna.org", 21)==0)

343 
h
->
ªqÊags
 |
FLAG_REALTIMEINFO
;

345 if(
	`°∫ˇ£cmp
(
löe
, "getAvailableSeekRange.dlna.org", 21)==0)

347 
p
 = 
cﬁ⁄
 + 1;

348 
	`is•a˚
(*
p
))

349 
p
++;

350 if–(*
p
 !'1'Ë|| !
	`is•a˚
(p[1]) )

351 
h
->
ªqÊags
 |
FLAG_INVALID_REQ
;

353 if(
	`°∫ˇ£cmp
(
löe
, "transferMode.dlna.org", 21)==0)

355 
p
 = 
cﬁ⁄
 + 1;

356 
	`is•a˚
(*
p
))

357 
p
++;

358 if(
	`°∫ˇ£cmp
(
p
, "Streaming", 9)==0)

360 
h
->
ªqÊags
 |
FLAG_XFERSTREAMING
;

362 if(
	`°∫ˇ£cmp
(
p
, "Interactive", 11)==0)

364 
h
->
ªqÊags
 |
FLAG_XFERINTERACTIVE
;

366 if(
	`°∫ˇ£cmp
(
p
, "Background", 10)==0)

368 
h
->
ªqÊags
 |
FLAG_XFERBACKGROUND
;

371 if(
	`°∫ˇ£cmp
(
löe
, "getCaptionInfo.sec", 18)==0)

373 
h
->
ªqÊags
 |
FLAG_CAPTION
;

375 if(
	`°∫ˇ£cmp
(
löe
, "FriendlyName", 12)==0)

377 
i
;

378 
p
 = 
cﬁ⁄
 + 1;

379 
	`is•a˚
(*
p
))

380 
p
++;

381 
i
 = 0; 
˛õ¡_ty≥s
[i].
«me
; i++)

383 i‡(
˛õ¡_ty≥s
[
i
].
m©ch_ty≥
 !
EFrõndlyName
)

385 i‡(
	`°r°rc
(
p
, 
˛õ¡_ty≥s
[
i
].
m©ch
, '\r'Ë!
NULL
)

387 
h
->
ªq_˛õ¡
 = 
i
;

393 
√xt_hódî
:

394 !(
löe
[0] == '\r' &&Üine[1] == '\n'))

395 
löe
++;

396 
löe
 += 2;

398 if–
h
->
ªqÊags
 & 
FLAG_CHUNKED
 )

400 *
íd±r
;

401 
h
->
ªq_chunkÀn
 = -1;

402 if–
h
->
ªq_buÊí
 <h->
ªq_c⁄ã¡off
 )

404  (
löe
 < (
h
->
ªq_buf
 + h->
ªq_buÊí
)) &&

405 (
h
->
ªq_chunkÀn
 = 
	`°πﬁ
(
löe
, &
íd±r
, 16)) &&

406 (
íd±r
 !
löe
) )

408 !(
íd±r
[0] == '\r' &&Éndptr[1] == '\n'))

410 
íd±r
++;

412 
löe
 = 
íd±r
+
h
->
ªq_chunkÀn
+2;

415 if–
íd±r
 =
löe
 )

417 
h
->
ªq_chunkÀn
 = -1;

424 
n
 = 
	`SórchClõ¡Cache
(
h
->
˛õ¡addr
, 0);

425 if–
h
->
ªq_˛õ¡
 )

428 if–
n
 < 0 )

430 
	`AddClõ¡Cache
(
h
->
˛õ¡addr
, h->
ªq_˛õ¡
);

434 
˛õ¡_ty≥s
 
ty≥
 = clõ¡_ty≥s[
h
->
ªq_˛õ¡
].type;

435 
˛õ¡_ty≥s
 
˘y≥
 = clõ¡_ty≥s[
˛õ¡s
[
n
].
ty≥
].type;

438 i‡((
˘y≥
 < 
ESènd¨dDLNA150
 && 
ty≥
 == EStandardDLNA150) ||

439 (
˘y≥
 =
ESamsungSîõsB
 && 
ty≥
 =
ESamsungSîõsA
))

441 
h
->
ªq_˛õ¡
 = 
˛õ¡s
[
n
].
ty≥
;

444 
˛õ¡s
[
n
].
ty≥
 = 
h
->
ªq_˛õ¡
;

445 
˛õ¡s
[
n
].
age
 = 
	`time
(
NULL
);

448 if–
n
 >= 0 )

450 
h
->
ªq_˛õ¡
 = 
˛õ¡s
[
n
].
ty≥
;

452 
	}
}

456 
	$Síd400
(
u≤phâp
 * 
h
)

458 c⁄° 
body400
[] =

462 
h
->
ª•Êags
 = 
FLAG_HTML
;

463 
	`BuûdRe•2_u≤phâp
(
h
, 400, "Bad Request",

464 
body400
, (body400) - 1);

465 
	`SídRe•_u≤phâp
(
h
);

466 
	`Clo£Sockë_u≤phâp
(
h
);

467 
	}
}

471 
	$Síd404
(
u≤phâp
 * 
h
)

473 c⁄° 
body404
[] =

477 
h
->
ª•Êags
 = 
FLAG_HTML
;

478 
	`BuûdRe•2_u≤phâp
(
h
, 404, "Not Found",

479 
body404
, (body404) - 1);

480 
	`SídRe•_u≤phâp
(
h
);

481 
	`Clo£Sockë_u≤phâp
(
h
);

482 
	}
}

486 
	$Síd406
(
u≤phâp
 * 
h
)

488 c⁄° 
body406
[] =

492 
h
->
ª•Êags
 = 
FLAG_HTML
;

493 
	`BuûdRe•2_u≤phâp
(
h
, 406, "Not Acceptable",

494 
body406
, (body406) - 1);

495 
	`SídRe•_u≤phâp
(
h
);

496 
	`Clo£Sockë_u≤phâp
(
h
);

497 
	}
}

501 
	$Síd416
(
u≤phâp
 * 
h
)

503 c⁄° 
body416
[] =

507 
h
->
ª•Êags
 = 
FLAG_HTML
;

508 
	`BuûdRe•2_u≤phâp
(
h
, 416, "Requested Range Not Satisfiable",

509 
body416
, (body416) - 1);

510 
	`SídRe•_u≤phâp
(
h
);

511 
	`Clo£Sockë_u≤phâp
(
h
);

512 
	}
}

516 
	$Síd500
(
u≤phâp
 * 
h
)

518 c⁄° 
body500
[] =

522 
h
->
ª•Êags
 = 
FLAG_HTML
;

523 
	`BuûdRe•2_u≤phâp
(
h
, 500, "Internal Server Errror",

524 
body500
, (body500) - 1);

525 
	`SídRe•_u≤phâp
(
h
);

526 
	`Clo£Sockë_u≤phâp
(
h
);

527 
	}
}

531 
	$Síd501
(
u≤phâp
 * 
h
)

533 c⁄° 
body501
[] =

537 
h
->
ª•Êags
 = 
FLAG_HTML
;

538 
	`BuûdRe•2_u≤phâp
(
h
, 501, "Not Implemented",

539 
body501
, (body501) - 1);

540 
	`SídRe•_u≤phâp
(
h
);

541 
	`Clo£Sockë_u≤phâp
(
h
);

542 
	}
}

545 
	$födídhódîs
(c⁄° * 
s
, 
Àn
)

547 
Àn
-- > 0)

549 if(
s
[0]=='\r' && s[1]=='\n' && s[2]=='\r' && s[3]=='\n')

550  
s
;

551 
s
++;

553  
NULL
;

554 
	}
}

558 
£ndXMLdesc
(
u≤phâp
 * 
h
, * (
f
)(*))

560 * 
	gdesc
;

561 
	gÀn
;

562 
	gdesc
 = 
f
(&
Àn
);

563 if(!
	gdesc
)

565 
DPRINTF
(
E_ERROR
, 
L_HTTP
, "FailedÅo generate XML description\n");

566 
Síd500
(
h
);

569 
BuûdRe•_u≤phâp
(
h
, 
desc
, 
Àn
);

570 
SídRe•_u≤phâp
(
h
);

571 
Clo£Sockë_u≤phâp
(
h
);

572 
‰ì
(
desc
);

576 
	$SídRe•_¥e£¡©i⁄
(
u≤phâp
 * 
h
)

578 
body
[1024];

579 
l
;

580 
h
->
ª•Êags
 = 
FLAG_HTML
;

582 #ifde‡
READYNAS


583 
l
 = 
	`¢¥ötf
(
body
, (body), "<meta http-equiv=\"refresh\" content=\"0; url=https://%s/admin/\">",

584 
œn_addr
[
h
->
iÁ˚
].
°r
);

586 
a
, 
v
, 
p
;

587 
a
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT count(*) from DETAILS where MIME glob 'a*'");

588 
v
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT count(*) from DETAILS where MIME glob 'v*'");

589 
p
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT count(*) from DETAILS where MIME glob 'i*'");

590 
l
 = 
	`¢¥ötf
(
body
, (body),

591 "<HTML><HEAD><TITLE>" 
SERVER_NAME
 " " 
MINIDLNA_VERSION
 "</TITLE></HEAD>"

593 "<h3>" 
SERVER_NAME
 " status</h3>"

597 "</BODY></HTML>\r\n", 
a
, 
v
, 
p
);

599 
	`BuûdRe•_u≤phâp
(
h
, 
body
, 
l
);

600 
	`SídRe•_u≤phâp
(
h
);

601 
	`Clo£Sockë_u≤phâp
(
h
);

602 
	}
}

607 
	$Pro˚ssHTTPPOST_u≤phâp
(
u≤phâp
 * 
h
)

609 if((
h
->
ªq_buÊí
 - h->
ªq_c⁄ã¡off
Ë>h->
ªq_c⁄ã¡Àn
)

611 if(
h
->
ªq_sﬂpA˘i⁄
)

614 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "SOAPA˘i⁄: %.*s\n", 
h
->
ªq_sﬂpA˘i⁄Lí
, h->
ªq_sﬂpA˘i⁄
);

615 
	`ExecuãSﬂpA˘i⁄
(
h
,

616 
h
->
ªq_sﬂpA˘i⁄
,

617 
h
->
ªq_sﬂpA˘i⁄Lí
);

621 c⁄° 
îr400°r
[] =

623 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "No SOAPAction in HTTP headers\n");

624 
h
->
ª•Êags
 = 
FLAG_HTML
;

625 
	`BuûdRe•2_u≤phâp
(
h
, 400, "Bad Request",

626 
îr400°r
, (err400str) - 1);

627 
	`SídRe•_u≤phâp
(
h
);

628 
	`Clo£Sockë_u≤phâp
(
h
);

634 
h
->
°©e
 = 1;

636 
	}
}

639 
	$check_evít
(
u≤phâp
 *
h
)

641 
evít_ty≥
 
ty≥
;

643 i‡(
h
->
ªq_CÆlback
)

645 i‡(
h
->
ªq_SID
 || !h->
ªq_NT
)

647 
	`BuûdRe•2_u≤phâp
(
h
, 400, "Bad Request",

649 
ty≥
 = 
E_INVALID
;

651 i‡(
	`°∫cmp
(
h
->
ªq_CÆlback
, "http://", 7) != 0 ||

652 
	`°∫cmp
(
h
->
ªq_NT
, "u≤p:evít", h->
ªq_NTLí
) != 0)

657 
	`BuûdRe•2_u≤phâp
(
h
, 412, "Precondition Failed", 0, 0);

658 
ty≥
 = 
E_INVALID
;

661 
ty≥
 = 
E_SUBSCRIBE
;

663 i‡(
h
->
ªq_SID
)

666 i‡(
h
->
ªq_NT
)

668 
	`BuûdRe•2_u≤phâp
(
h
, 400, "Bad Request",

670 
ty≥
 = 
E_INVALID
;

673 
ty≥
 = 
E_RENEW
;

677 
	`BuûdRe•2_u≤phâp
(
h
, 412, "Precondition Failed", 0, 0);

678 
ty≥
 = 
E_INVALID
;

681  
ty≥
;

682 
	}
}

685 
	$Pro˚ssHTTPSubs¸ibe_u≤phâp
(
u≤phâp
 * 
h
, c⁄° * 
∑th
)

687 c⁄° * 
sid
;

688 
evít_ty≥
 
ty≥
;

689 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Pro˚ssHTTPSubs¸ibê%s\n", 
∑th
);

690 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Callback '%.*s' Timeout=%d\n",

691 
h
->
ªq_CÆlbackLí
, h->
ªq_CÆlback
, h->
ªq_Timeout
);

692 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "SID '%.*s'\n", 
h
->
ªq_SIDLí
, h->
ªq_SID
);

694 
ty≥
 = 
	`check_evít
(
h
);

695 i‡(
ty≥
 =
E_SUBSCRIBE
)

701 
sid
 = 
	`u≤≥víts_addSubs¸ibî
(
∑th
, 
h
->
ªq_CÆlback
,

702 
h
->
ªq_CÆlbackLí
, h->
ªq_Timeout
);

703 
h
->
ª•Êags
 = 
FLAG_TIMEOUT
;

704 i‡(
sid
)

706 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "gíî©ed sid=%s\n", 
sid
);

707 
h
->
ª•Êags
 |
FLAG_SID
;

708 
h
->
ªq_SID
 = 
sid
;

709 
h
->
ªq_SIDLí
 = 
	`°æí
(
sid
);

711 
	`BuûdRe•_u≤phâp
(
h
, 0, 0);

713 i‡(
ty≥
 =
E_RENEW
)

716 i‡(
	`ª√wSubs¸ùti⁄
(
h
->
ªq_SID
, h->
ªq_SIDLí
, h->
ªq_Timeout
) < 0)

722 
	`BuûdRe•2_u≤phâp
(
h
, 412, "Precondition Failed", 0, 0);

727 
h
->
ª•Êags
 = 
FLAG_TIMEOUT
;

728 
h
->
ªq_Timeout
 = 300;

729 
h
->
ª•Êags
 |
FLAG_SID
;

730 
	`BuûdRe•_u≤phâp
(
h
, 0, 0);

733 
	`SídRe•_u≤phâp
(
h
);

734 
	`Clo£Sockë_u≤phâp
(
h
);

735 
	}
}

738 
	$Pro˚ssHTTPUnSubs¸ibe_u≤phâp
(
u≤phâp
 * 
h
, c⁄° * 
∑th
)

740 
evít_ty≥
 
ty≥
;

741 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Pro˚ssHTTPUnSubs¸ibê%s\n", 
∑th
);

742 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "SID '%.*s'\n", 
h
->
ªq_SIDLí
, h->
ªq_SID
);

744 
ty≥
 = 
	`check_evít
(
h
);

745 i‡(
ty≥
 !
E_INVALID
)

747 if(
	`u≤≥víts_ªmoveSubs¸ibî
(
h
->
ªq_SID
, h->
ªq_SIDLí
) < 0)

748 
	`BuûdRe•2_u≤phâp
(
h
, 412, "Precondition Failed", 0, 0);

750 
	`BuûdRe•_u≤phâp
(
h
, 0, 0);

752 
	`SídRe•_u≤phâp
(
h
);

753 
	`Clo£Sockë_u≤phâp
(
h
);

754 
	}
}

759 
	$Pro˚ssHâpQuîy_u≤phâp
(
u≤phâp
 * 
h
)

761 
HâpComm™d
[16];

762 
HâpUæ
[512];

763 * 
HâpVî
;

764 * 
p
;

765 
i
;

766 
p
 = 
h
->
ªq_buf
;

767 if(!
p
)

769 
i
 = 0; i<15 && *
p
 != ' ' && *p != '\r'; i++)

770 
HâpComm™d
[
i
] = *(
p
++);

771 
HâpComm™d
[
i
] = '\0';

772 *
p
==' ')

773 
p
++;

774 if(
	`°∫cmp
(
p
, "http://", 7) == 0)

776 
p
 =Ö+7;

777 *
p
!='/')

778 
p
++;

780 
i
 = 0; i<511 && *
p
 != ' ' && *p != '\r'; i++)

781 
HâpUæ
[
i
] = *(
p
++);

782 
HâpUæ
[
i
] = '\0';

783 *
p
==' ')

784 
p
++;

785 
HâpVî
 = 
h
->HttpVer;

786 
i
 = 0; i<15 && *
p
 != '\r'; i++)

787 
HâpVî
[
i
] = *(
p
++);

788 
HâpVî
[
i
] = '\0';

793 
i
 = 0; i<
n_œn_addr
; i++)

795 if–(
h
->
˛õ¡addr
.
s_addr
 & 
œn_addr
[
i
].
mask
.s_addr)

796 =(
œn_addr
[
i
].
addr
.
s_addr
 &Ü™_addr[i].
mask
.s_addr))

798 
h
->
iÁ˚
 = 
i
;

803 
	`P¨£HâpHódîs
(
h
);

806 if–(
h
->
ªqÊags
 & 
FLAG_CHUNKED
) )

808 if–
h
->
ªq_chunkÀn
 )

810 
h
->
°©e
 = 2;

813 *
chunk°¨t
, *
chunk
, *
íd±r
, *
ídbuf
;

814 
chunk
 = 
ídbuf
 = 
chunk°¨t
 = 
h
->
ªq_buf
 + h->
ªq_c⁄ã¡off
;

816  (
h
->
ªq_chunkÀn
 = 
	`°πﬁ
(
chunk
, &
íd±r
, 16)) && (endptr != chunk) )

818 !(
íd±r
[0] == '\r' &&Éndptr[1] == '\n'))

820 
íd±r
++;

822 
íd±r
 += 2;

824 
	`memmove
(
ídbuf
, 
íd±r
, 
h
->
ªq_chunkÀn
);

826 
ídbuf
 +
h
->
ªq_chunkÀn
;

827 
chunk
 = 
íd±r
 + 
h
->
ªq_chunkÀn
;

829 
h
->
ªq_c⁄ã¡Àn
 = 
ídbuf
 - 
chunk°¨t
;

830 
h
->
ªq_buÊí
 = 
ídbuf
 - h->
ªq_buf
;

831 
h
->
°©e
 = 100;

834 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "HTTP REQUEST: %.*s\n", 
h
->
ªq_buÊí
, h->
ªq_buf
);

835 if(
	`°rcmp
("POST", 
HâpComm™d
) == 0)

837 
h
->
ªq_comm™d
 = 
EPo°
;

838 
	`Pro˚ssHTTPPOST_u≤phâp
(
h
);

840 if((
	`°rcmp
("GET", 
HâpComm™d
) == 0) || (strcmp("HEAD", HttpCommand) == 0))

842 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "HâpComm™d: %s, HâpUæ: %s\n", 
HâpComm™d
, 
HâpUæ
);

843 if–((
	`°rcmp
(
h
->
HâpVî
, "HTTP/1.1")==0Ë&& !(h->
ªqÊags
 & 
FLAG_HOST
)Ë|| (h->ªqÊag†& 
FLAG_INVALID_REQ
) )

845 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "InvalidÑequest,Ñesponding ERROR 400. (No Host specified in HTTP headers?)\n");

846 
	`Síd400
(
h
);

850 if–(
h
->
ªqÊags
 & (
FLAG_TIMESEEK
|
FLAG_PLAYSPEED
)) &&

851 !(
h
->
ªqÊags
 & 
FLAG_RANGE
) )

853 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "DLNA %sÑequested,Ñesponding ERROR 406\n",

854 
h
->
ªqÊags
&
FLAG_TIMESEEK
 ? "TimeSeek" : "PlaySpeed");

855 
	`Síd406
(
h
);

858 if(
	`°rcmp
("GET", 
HâpComm™d
) == 0)

860 
h
->
ªq_comm™d
 = 
EGë
;

864 
h
->
ªq_comm™d
 = 
EHód
;

866 if(
	`°rcmp
(
ROOTDESC_PATH
, 
HâpUæ
) == 0)

869 if–
˛õ¡_ty≥s
[
h
->
ªq_˛õ¡
].
ty≥
 =
EXbox
 )

871 
modñ_ßv
[2];

872 
i
 = 0;

873 
	`mem˝y
(
modñ_ßv
, 
modñnumbî
, 2);

874 
	`°r˝y
(
modñnumbî
, "1");

875 if–!
	`°rchr
(
‰õndly_«me
, ':') )

877 
i
 = 
	`°æí
(
‰õndly_«me
);

878 
	`¢¥ötf
(
‰õndly_«me
+
i
, 
FRIENDLYNAME_MAX_LEN
-i, ": 1");

880 
	`£ndXMLdesc
(
h
, 
gíRoŸDesc
);

881 if–
i
 )

882 
‰õndly_«me
[
i
] = '\0';

883 
	`mem˝y
(
modñnumbî
, 
modñ_ßv
, 2);

885 if–
˛õ¡_ty≥s
[
h
->
ªq_˛õ¡
].
Êags
 & 
FLAG_SAMSUNG_TV
 )

887 
	`£ndXMLdesc
(
h
, 
gíRoŸDescSamsung
);

891 
	`£ndXMLdesc
(
h
, 
gíRoŸDesc
);

894 if(
	`°rcmp
(
CONTENTDIRECTORY_PATH
, 
HâpUæ
) == 0)

896 
	`£ndXMLdesc
(
h
, 
gíC⁄ã¡Dúe˘‹y
);

898 if(
	`°rcmp
(
CONNECTIONMGR_PATH
, 
HâpUæ
) == 0)

900 
	`£ndXMLdesc
(
h
, 
gíC⁄√˘i⁄M™agî
);

902 if(
	`°rcmp
(
X_MS_MEDIARECEIVERREGISTRAR_PATH
, 
HâpUæ
) == 0)

904 
	`£ndXMLdesc
(
h
, 
gíX_MS_MedüRe˚ivîRegi°ør
);

906 if(
	`°∫cmp
(
HâpUæ
, "/MediaItems/", 12) == 0)

908 
	`SídRe•_d afûe
(
h
, 
HâpUæ
+12);

910 if(
	`°∫cmp
(
HâpUæ
, "/Thumbnails/", 12) == 0)

912 
	`SídRe•_thumb«û
(
h
, 
HâpUæ
+12);

914 if(
	`°∫cmp
(
HâpUæ
, "/AlbumArt/", 10) == 0)

916 
	`SídRe•_ÆbumAπ
(
h
, 
HâpUæ
+10);

918 #ifde‡
TIVO_SUPPORT


919 if(
	`°∫cmp
(
HâpUæ
, "/TiVoConnect", 12) == 0)

921 if–
	`GETFLAG
(
TIVO_MASK
) )

923 if–*(
HâpUæ
+12) == '?' )

925 
	`Pro˚ssTiVoComm™d
(
h
, 
HâpUæ
+13);

929 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "InvÆid TiVÿªque°! %s\n", 
HâpUæ
+12);

930 
	`Síd404
(
h
);

935 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "TiVoÑequest with out TiVo supportÉnabled! %s\n",

936 
HâpUæ
+12);

937 
	`Síd404
(
h
);

941 if(
	`°∫cmp
(
HâpUæ
, "/Resized/", 9) == 0)

943 
	`SídRe•_ªsizedimg
(
h
, 
HâpUæ
+9);

945 if(
	`°∫cmp
(
HâpUæ
, "/icons/", 7) == 0)

947 
	`SídRe•_ic⁄
(
h
, 
HâpUæ
+7);

949 if(
	`°∫cmp
(
HâpUæ
, "/Captions/", 10) == 0)

951 
	`SídRe•_ˇ±i⁄
(
h
, 
HâpUæ
+10);

953 if(
	`°rcmp
(
HâpUæ
, "/") == 0)

955 
	`SídRe•_¥e£¡©i⁄
(
h
);

959 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "%†nŸ found,Ñe•⁄dög ERROR 404\n", 
HâpUæ
);

960 
	`Síd404
(
h
);

963 if(
	`°rcmp
("SUBSCRIBE", 
HâpComm™d
) == 0)

965 
h
->
ªq_comm™d
 = 
ESubs¸ibe
;

966 
	`Pro˚ssHTTPSubs¸ibe_u≤phâp
(
h
, 
HâpUæ
);

968 if(
	`°rcmp
("UNSUBSCRIBE", 
HâpComm™d
) == 0)

970 
h
->
ªq_comm™d
 = 
EUnSubs¸ibe
;

971 
	`Pro˚ssHTTPUnSubs¸ibe_u≤phâp
(
h
, 
HâpUæ
);

975 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "Unsuµ‹ãd HTTP Comm™d %s\n", 
HâpComm™d
);

976 
	`Síd501
(
h
);

978 
	}
}

982 
	$Pro˚ss_u≤phâp
(
u≤phâp
 * 
h
)

984 
buf
[2048];

985 
n
;

986 if(!
h
)

988 
h
->
°©e
)

991 
n
 = 
	`ªcv
(
h
->
sockë
, 
buf
, 2048, 0);

992 if(
n
<0)

994 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "ªcv (°©e0): %s\n", 
	`°ªº‹
(
î∫o
));

995 
h
->
°©e
 = 100;

997 if(
n
==0)

999 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "HTTP Connection closed unexpectedly\n");

1000 
h
->
°©e
 = 100;

1004 c⁄° * 
ídhódîs
;

1007 
h
->
ªq_buf
 = (*)
	`ªÆloc
(h->ªq_buf, 
n
 + h->
ªq_buÊí
 + 1);

1008 
	`mem˝y
(
h
->
ªq_buf
 + h->
ªq_buÊí
, 
buf
, 
n
);

1009 
h
->
ªq_buÊí
 +
n
;

1010 
h
->
ªq_buf
[h->
ªq_buÊí
] = '\0';

1012 
ídhódîs
 = 
	`födídhódîs
(
h
->
ªq_buf
, h->
ªq_buÊí
);

1013 if(
ídhódîs
)

1015 
h
->
ªq_c⁄ã¡off
 = 
ídhódîs
 - h->
ªq_buf
 + 4;

1016 
h
->
ªq_c⁄ã¡Àn
 = h->
ªq_buÊí
 - h->
ªq_c⁄ã¡off
;

1017 
	`Pro˚ssHâpQuîy_u≤phâp
(
h
);

1023 
n
 = 
	`ªcv
(
h
->
sockë
, 
buf
, 2048, 0);

1024 if(
n
<0)

1026 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "ªcv (°©e%d): %s\n", 
h
->
°©e
, 
	`°ªº‹
(
î∫o
));

1027 
h
->
°©e
 = 100;

1029 if(
n
==0)

1031 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "HTTP Connection closed unexpectedly\n");

1032 
h
->
°©e
 = 100;

1037 
h
->
ªq_buf
 = (*)
	`ªÆloc
(h->ªq_buf, 
n
 + h->
ªq_buÊí
);

1038 
	`mem˝y
(
h
->
ªq_buf
 + h->
ªq_buÊí
, 
buf
, 
n
);

1039 
h
->
ªq_buÊí
 +
n
;

1040 if((
h
->
ªq_buÊí
 - h->
ªq_c⁄ã¡off
Ë>h->
ªq_c⁄ã¡Àn
)

1043 if–
h
->
°©e
 == 1 )

1045 
	`P¨£HâpHódîs
(
h
);

1046 
	`Pro˚ssHTTPPOST_u≤phâp
(
h
);

1048 if–
h
->
°©e
 == 2 )

1050 
	`Pro˚ssHâpQuîy_u≤phâp
(
h
);

1056 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "U√x≥˘ed sèã: %d\n", 
h
->
°©e
);

1058 
	}
}

1064 
	$BuûdHódî_u≤phâp
(
u≤phâp
 * 
h
, 
ª•code
,

1065 c⁄° * 
ª•msg
,

1066 
bodyÀn
)

1068 c⁄° 
hâ¥e•hód
[] =

1073 "Sîvî: " 
MINIDLNA_SERVER_STRING
 "\r\n";

1074 
time_t
 
cuπime
 = 
	`time
(
NULL
);

1075 
d©e
[30];

1076 
ãm∂í
;

1077 if(!
h
->
ªs_buf
)

1079 
ãm∂í
 = (
hâ¥e•hód
Ë+ 256 + 
bodyÀn
;

1080 
h
->
ªs_buf
 = (*)
	`mÆloc
(
ãm∂í
);

1081 
h
->
ªs_buf_Ælo˛í
 = 
ãm∂í
;

1083 
h
->
ªs_buÊí
 = 
	`¢¥ötf
(h->
ªs_buf
, h->
ªs_buf_Ælo˛í
,

1084 
hâ¥e•hód
, "HTTP/1.1",

1085 
ª•code
, 
ª•msg
,

1086 (
h
->
ª•Êags
&
FLAG_HTML
)?"text/html":"text/xml; charset=\"utf-8\"",

1087 
bodyÀn
);

1089 if(
h
->
ª•Êags
 & 
FLAG_TIMEOUT
) {

1090 
h
->
ªs_buÊí
 +
	`¢¥ötf
(h->
ªs_buf
 + h->res_buflen,

1091 
h
->
ªs_buf_Ælo˛í
 - h->
ªs_buÊí
,

1093 if(
h
->
ªq_Timeout
) {

1094 
h
->
ªs_buÊí
 +
	`¢¥ötf
(h->
ªs_buf
 + h->res_buflen,

1095 
h
->
ªs_buf_Ælo˛í
 - h->
ªs_buÊí
,

1096 "%d\r\n", 
h
->
ªq_Timeout
);

1098 
h
->
ªs_buÊí
 +
	`¢¥ötf
(h->
ªs_buf
 + h->res_buflen,

1099 
h
->
ªs_buf_Ælo˛í
 - h->
ªs_buÊí
,

1103 if(
h
->
ª•Êags
 & 
FLAG_SID
) {

1104 
h
->
ªs_buÊí
 +
	`¢¥ötf
(h->
ªs_buf
 + h->res_buflen,

1105 
h
->
ªs_buf_Ælo˛í
 - h->
ªs_buÊí
,

1106 "SID: %.*s\r\n", 
h
->
ªq_SIDLí
, h->
ªq_SID
);

1108 if(
h
->
ªqÊags
 & 
FLAG_LANGUAGE
) {

1109 
h
->
ªs_buÊí
 +
	`¢¥ötf
(h->
ªs_buf
 + h->res_buflen,

1110 
h
->
ªs_buf_Ælo˛í
 - h->
ªs_buÊí
,

1113 
	`°r·ime
(
d©e
, 30,"%a, %d %b %Y %H:%M:%S GMT" , 
	`gmtime
(&
cuπime
));

1114 
h
->
ªs_buÊí
 +
	`¢¥ötf
(h->
ªs_buf
 + h->res_buflen,

1115 
h
->
ªs_buf_Ælo˛í
 - h->
ªs_buÊí
,

1116 "D©e: %s\r\n", 
d©e
);

1117 
h
->
ªs_buÊí
 +
	`¢¥ötf
(h->
ªs_buf
 + h->res_buflen,

1118 
h
->
ªs_buf_Ælo˛í
 - h->
ªs_buÊí
,

1121 
h
->
ªs_buÊí
 +
	`¢¥ötf
(h->
ªs_buf
 + h->res_buflen,

1122 
h
->
ªs_buf_Ælo˛í
 - h->
ªs_buÊí
,

1125 
h
->
ªs_buf
[h->
ªs_buÊí
++] = '\r';

1126 
h
->
ªs_buf
[h->
ªs_buÊí
++] = '\n';

1127 if(
h
->
ªs_buf_Ælo˛í
 < (h->
ªs_buÊí
 + 
bodyÀn
))

1129 
h
->
ªs_buf
 = (*)
	`ªÆloc
(h->ªs_buf, (h->
ªs_buÊí
 + 
bodyÀn
));

1130 
h
->
ªs_buf_Ælo˛í
 = h->
ªs_buÊí
 + 
bodyÀn
;

1132 
	}
}

1135 
	$BuûdRe•2_u≤phâp
(
u≤phâp
 * 
h
, 
ª•code
,

1136 c⁄° * 
ª•msg
,

1137 c⁄° * 
body
, 
bodyÀn
)

1139 
	`BuûdHódî_u≤phâp
(
h
, 
ª•code
, 
ª•msg
, 
bodyÀn
);

1140 if–
h
->
ªq_comm™d
 =
EHód
 )

1142 if(
body
)

1143 
	`mem˝y
(
h
->
ªs_buf
 + h->
ªs_buÊí
, 
body
, 
bodyÀn
);

1144 
h
->
ªs_buÊí
 +
bodyÀn
;

1145 
	}
}

1149 
	$BuûdRe•_u≤phâp
(
u≤phâp
 * 
h
,

1150 c⁄° * 
body
, 
bodyÀn
)

1152 
	`BuûdRe•2_u≤phâp
(
h
, 200, "OK", 
body
, 
bodyÀn
);

1153 
	}
}

1156 
	$SídRe•_u≤phâp
(
u≤phâp
 * 
h
)

1158 
n
;

1159 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "HTTP RESPONSE: %.*s\n", 
h
->
ªs_buÊí
, h->
ªs_buf
);

1160 
n
 = 
	`£nd
(
h
->
sockë
, h->
ªs_buf
, h->
ªs_buÊí
, 0);

1161 if(
n
<0)

1163 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "£nd‘es_buf): %s\n", 
	`°ªº‹
(
î∫o
));

1165 if(
n
 < 
h
->
ªs_buÊí
)

1168 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "send(res_buf): %d bytes sent (out of %d)\n",

1169 
n
, 
h
->
ªs_buÊí
);

1171 
	}
}

1174 
	$£nd_d©a
(
u≤phâp
 * 
h
, * 
hódî
, 
size_t
 
size
, 
Êags
)

1176 
n
;

1178 
n
 = 
	`£nd
(
h
->
sockë
, 
hódî
, 
size
, 
Êags
);

1179 if(
n
<0)

1181 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "£nd‘es_buf): %s\n", 
	`°ªº‹
(
î∫o
));

1183 if(
n
 < 
h
->
ªs_buÊí
)

1186 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "send(res_buf): %d bytes sent (out of %d)\n",

1187 
n
, 
h
->
ªs_buÊí
);

1194 
	}
}

1197 
	$£nd_fûe
(
u≤phâp
 * 
h
, 
£ndfd
, 
off_t
 
off£t
, off_à
íd_off£t
)

1199 
off_t
 
£nd_size
;

1200 
off_t
 
ªt
;

1201 *
buf
 = 
NULL
;

1202 #i‡
HAVE_SENDFILE


1203 
åy_£ndfûe
 = 1;

1206  
off£t
 <
íd_off£t
 )

1208 #i‡
HAVE_SENDFILE


1209 if–
åy_£ndfûe
 )

1211 
£nd_size
 = ( ((
íd_off£t
 - 
off£t
Ë< 
MAX_BUFFER_SIZE
) ? (end_offset - offset + 1) : MAX_BUFFER_SIZE);

1212 
ªt
 = 
	`sys_£ndfûe
(
h
->
sockë
, 
£ndfd
, &
off£t
, 
£nd_size
);

1213 if–
ªt
 == -1 )

1215 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "£ndfûêîr‹ ::Éº‹Ço. %d [%s]\n", 
î∫o
, 
	`°ªº‹
(errno));

1217 if–
î∫o
 =
EOVERFLOW
 ||Éºnÿ=
EINVAL
 )

1218 
åy_£ndfûe
 = 0;

1219 if–
î∫o
 !
EAGAIN
 )

1230 if–!
buf
 )

1231 
buf
 = 
	`mÆloc
(
MIN_BUFFER_SIZE
);

1232 
£nd_size
 = ( ((
íd_off£t
 - 
off£t
Ë< 
MIN_BUFFER_SIZE
) ? (end_offset - offset + 1) : MIN_BUFFER_SIZE);

1233 
	`l£ek
(
£ndfd
, 
off£t
, 
SEEK_SET
);

1234 
ªt
 = 
	`ªad
(
£ndfd
, 
buf
, 
£nd_size
);

1235 if–
ªt
 == -1 ) {

1236 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "ªadÉº‹ ::Éº‹Ço. %d [%s]\n", 
î∫o
, 
	`°ªº‹
(errno));

1237 if–
î∫o
 !
EAGAIN
 )

1240 
ªt
 = 
	`wrôe
(
h
->
sockë
, 
buf
,Ñet);

1241 if–
ªt
 == -1 ) {

1242 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "wrôêîr‹ ::Éº‹Ço. %d [%s]\n", 
î∫o
, 
	`°ªº‹
(errno));

1243 if–
î∫o
 !
EAGAIN
 )

1246 
off£t
+=
ªt
;

1249 i‡(
buf
 !
NULL
)

1251 
	`‰ì
(
buf
);

1253 
	}
}

1256 
	$SídRe•_ic⁄
(
u≤phâp
 * 
h
, * 
ic⁄
)

1258 
hódî
[512];

1259 
mime
[12] = "image/";

1260 
d©e
[30];

1261 *
d©a
;

1262 
size
, 
ªt
;

1263 
time_t
 
cuπime
 = 
	`time
(
NULL
);

1265 if–
	`°rcmp
(
ic⁄
, "sm.png") == 0 )

1267 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Sending small PNG icon\n");

1268 
d©a
 = (*)
≤g_sm
;

1269 
size
 = (
≤g_sm
)-1;

1270 
	`°r˝y
(
mime
+6, "png");

1272 if–
	`°rcmp
(
ic⁄
, "lrg.png") == 0 )

1274 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "SendingÜarge PNG icon\n");

1275 
d©a
 = (*)
≤g_Ãg
;

1276 
size
 = (
≤g_Ãg
)-1;

1277 
	`°r˝y
(
mime
+6, "png");

1279 if–
	`°rcmp
(
ic⁄
, "sm.jpg") == 0 )

1281 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Sending small JPEG icon\n");

1282 
d©a
 = (*)
j≥g_sm
;

1283 
size
 = (
j≥g_sm
)-1;

1284 
	`°r˝y
(
mime
+6, "jpeg");

1286 if–
	`°rcmp
(
ic⁄
, "lrg.jpg") == 0 )

1288 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "SendingÜarge JPEG icon\n");

1289 
d©a
 = (*)
j≥g_Ãg
;

1290 
size
 = (
j≥g_Ãg
)-1;

1291 
	`°r˝y
(
mime
+6, "jpeg");

1295 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "InvÆid ic⁄Ñeque°: %s\n", 
ic⁄
);

1296 
	`Síd404
(
h
);

1300 
	`°r·ime
(
d©e
, 30,"%a, %d %b %Y %H:%M:%S GMT" , 
	`gmtime
(&
cuπime
));

1301 
ªt
 = 
	`¢¥ötf
(
hódî
, (header), "HTTP/1.1 200 OK\r\n"

1306 "Sîvî: " 
MINIDLNA_SERVER_STRING
 "\r\n\r\n",

1307 
mime
, 
size
, 
d©e
);

1309 if–
	`£nd_d©a
(
h
, 
hódî
, 
ªt
, 
MSG_MORE
) == 0 )

1311 if–
h
->
ªq_comm™d
 !
EHód
 )

1312 
	`£nd_d©a
(
h
, 
d©a
, 
size
, 0);

1314 
	`Clo£Sockë_u≤phâp
(
h
);

1315 
	}
}

1318 
	$SídRe•_ÆbumAπ
(
u≤phâp
 * 
h
, * 
obje˘
)

1320 
hódî
[512];

1321 *
∑th
;

1322 
d©e
[30];

1323 
time_t
 
cuπime
 = 
	`time
(
NULL
);

1324 
off_t
 
size
;

1325 
id
;

1326 
fd
, 
ªt
;

1328 if–
h
->
ªqÊags
 & (
FLAG_XFERSTREAMING
|
FLAG_RANGE
) )

1330 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "ClientÅriedÅo specifyÅransferModeás Streaming withán image!\n");

1331 
	`Síd406
(
h
);

1335 
id
 = 
	`°πﬁl
(
obje˘
, 
NULL
, 10);

1337 
∑th
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT PATH from ALBUM_ART whîêID = '%Œd'", 
id
);

1338 if–!
∑th
 )

1340 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "ALBUM_ART ID %†nŸ found,Ñe•⁄dög ERROR 404\n", 
obje˘
);

1341 
	`Síd404
(
h
);

1344 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "Sîvögálbumáπ ID: %Œd [%s]\n", 
id
, 
∑th
);

1346 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

1347 if–
fd
 < 0 ) {

1348 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "Eº‹ o≥nög %s\n", 
∑th
);

1349 
	`sqlôe3_‰ì
(
∑th
);

1350 
	`Síd404
(
h
);

1353 
	`sqlôe3_‰ì
(
∑th
);

1354 
size
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

1355 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

1357 
	`°r·ime
(
d©e
, 30,"%a, %d %b %Y %H:%M:%S GMT" , 
	`gmtime
(&
cuπime
));

1358 
ªt
 = 
	`¢¥ötf
(
hódî
, (header), "HTTP/1.1 200 OK\r\n"

1366 "Sîvî: " 
MINIDLNA_SERVER_STRING
 "\r\n"

1368 (
ötmax_t
)
size
, 
d©e
);

1370 if–
	`£nd_d©a
(
h
, 
hódî
, 
ªt
, 
MSG_MORE
) == 0 )

1372 if–
h
->
ªq_comm™d
 !
EHód
 )

1373 
	`£nd_fûe
(
h
, 
fd
, 0, 
size
-1);

1375 
	`˛o£
(
fd
);

1376 
	`Clo£Sockë_u≤phâp
(
h
);

1377 
	}
}

1380 
	$SídRe•_ˇ±i⁄
(
u≤phâp
 * 
h
, * 
obje˘
)

1382 
hódî
[512];

1383 *
∑th
;

1384 
d©e
[30];

1385 
time_t
 
cuπime
 = 
	`time
(
NULL
);

1386 
off_t
 
size
;

1387 
id
;

1388 
fd
, 
ªt
;

1390 
id
 = 
	`°πﬁl
(
obje˘
, 
NULL
, 10);

1392 
∑th
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT PATH from CAPTIONS whîêID = %Œd", 
id
);

1393 if–!
∑th
 )

1395 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "CAPTION ID %†nŸ found,Ñe•⁄dög ERROR 404\n", 
obje˘
);

1396 
	`Síd404
(
h
);

1399 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "Sîvög c≠ti⁄ ID: %Œd [%s]\n", 
id
, 
∑th
);

1401 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

1402 if–
fd
 < 0 ) {

1403 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "Eº‹ o≥nög %s\n", 
∑th
);

1404 
	`sqlôe3_‰ì
(
∑th
);

1405 
	`Síd404
(
h
);

1408 
	`sqlôe3_‰ì
(
∑th
);

1409 
size
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

1410 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

1412 
	`°r·ime
(
d©e
, 30,"%a, %d %b %Y %H:%M:%S GMT" , 
	`gmtime
(&
cuπime
));

1413 
ªt
 = 
	`¢¥ötf
(
hódî
, (header), "HTTP/1.1 200 OK\r\n"

1419 "Sîvî: " 
MINIDLNA_SERVER_STRING
 "\r\n\r\n",

1420 (
ötmax_t
)
size
, 
d©e
);

1422 if–
	`£nd_d©a
(
h
, 
hódî
, 
ªt
, 
MSG_MORE
) == 0 )

1424 if–
h
->
ªq_comm™d
 !
EHód
 )

1425 
	`£nd_fûe
(
h
, 
fd
, 0, 
size
-1);

1427 
	`˛o£
(
fd
);

1428 
	`Clo£Sockë_u≤phâp
(
h
);

1429 
	}
}

1432 
	$SídRe•_thumb«û
(
u≤phâp
 * 
h
, * 
obje˘
)

1434 
hódî
[512];

1435 *
∑th
;

1436 
d©e
[30];

1437 
time_t
 
cuπime
 = 
	`time
(
NULL
);

1438 
id
;

1439 
ªt
;

1440 
ExifD©a
 *
ed
;

1441 
ExifLﬂdî
 *
l
;

1443 if–
h
->
ªqÊags
 & (
FLAG_XFERSTREAMING
|
FLAG_RANGE
) )

1445 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "ClientÅriedÅo specifyÅransferModeás Streaming withán image!\n");

1446 
	`Síd406
(
h
);

1450 
id
 = 
	`°πﬁl
(
obje˘
, 
NULL
, 10);

1451 
∑th
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT PATH from DETAILS whîêID = '%Œd'", 
id
);

1452 if–!
∑th
 )

1454 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "DETAIL ID %†nŸ found,Ñe•⁄dög ERROR 404\n", 
obje˘
);

1455 
	`Síd404
(
h
);

1458 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "SîvögÅhumb«û f‹ Obje˘Id: %Œd [%s]\n", 
id
, 
∑th
);

1460 if–
	`ac˚ss
(
∑th
, 
F_OK
) != 0 )

1462 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "Eº‹ác˚ssög %s\n", 
∑th
);

1463 
	`sqlôe3_‰ì
(
∑th
);

1467 
l
 = 
	`exif_lﬂdî_√w
();

1468 
	`exif_lﬂdî_wrôe_fûe
(
l
, 
∑th
);

1469 
ed
 = 
	`exif_lﬂdî_gë_d©a
(
l
);

1470 
	`exif_lﬂdî_uƒef
(
l
);

1471 
	`sqlôe3_‰ì
(
∑th
);

1473 if–!
ed
 || !ed->
size
 )

1475 
	`Síd404
(
h
);

1476 if–
ed
 )

1477 
	`exif_d©a_uƒef
(
ed
);

1480 
	`°r·ime
(
d©e
, 30,"%a, %d %b %Y %H:%M:%S GMT" , 
	`gmtime
(&
cuπime
));

1481 
ªt
 = 
	`¢¥ötf
(
hódî
, (header), "HTTP/1.1 200 OK\r\n"

1489 "Sîvî: " 
MINIDLNA_SERVER_STRING
 "\r\n"

1491 (
ötmax_t
)
ed
->
size
, 
d©e
);

1493 if–
	`£nd_d©a
(
h
, 
hódî
, 
ªt
, 
MSG_MORE
) == 0 )

1495 if–
h
->
ªq_comm™d
 !
EHód
 )

1496 
	`£nd_d©a
(
h
, (*)
ed
->
d©a
,Éd->
size
, 0);

1498 
	`exif_d©a_uƒef
(
ed
);

1499 
	`Clo£Sockë_u≤phâp
(
h
);

1500 
	}
}

1503 
	$SídRe•_ªsizedimg
(
u≤phâp
 * 
h
, * 
obje˘
)

1505 
hódî
[512];

1506 
buf
[128];

1507 
°rög_s
 
°r
;

1508 **
ªsu…
;

1509 
d©e
[30];

1510 *
d a_≤
 = 
NULL
;

1511 
uöt32_t
 
d a_Êags
 = 
DLNA_FLAG_DLNA_V1_5
|
DLNA_FLAG_HTTP_STALLING
|
DLNA_FLAG_TM_B
|
DLNA_FLAG_TM_I
;

1512 
time_t
 
cuπime
 = 
	`time
(
NULL
);

1513 
width
=640, 
height
=480, 
d°w
, 
d°h
, 
size
;

1514 
§cw
, 
§ch
;

1515 * 
d©a
 = 
NULL
;

1516 *
∑th
, *
fûe_∑th
 = 
NULL
;

1517 *
ªsﬁuti⁄
 = 
NULL
;

1518 *
mime
 = 
NULL
;

1519 *
key
, *
vÆ
;

1520 *
ßvïå
, *
ôem
 = 
NULL
;

1521 
rŸ©e
 = 0;

1524 
id
;

1525 
rows
=0, 
chunked
, 
ªt
;

1526 
image_s
 *
im§c
 = 
NULL
, *
imd°
 = NULL;

1527 
sˇÀ
 = 1;

1529 
id
 = 
	`°πﬁl
(
obje˘
, &
ßvïå
, 10);

1530 
	`¢¥ötf
(
buf
, (buf), "SELECT PATH, RESOLUTION, ROTATION, MIME, DLNA_PN from DETAILS whîêID = '%Œd'", ()
id
);

1531 
ªt
 = 
	`sql_gë_èbÀ
(
db
, 
buf
, &
ªsu…
, &
rows
, 
NULL
);

1532 if–
ªt
 !
SQLITE_OK
 )

1534 
	`Síd500
(
h
);

1537 if–
rows
 )

1539 
fûe_∑th
 = 
ªsu…
[5];

1540 
ªsﬁuti⁄
 = 
ªsu…
[6];

1541 
rŸ©e
 = 
ªsu…
[7] ? 
	`©oi
(result[7]) : 0;

1542 
mime
 = 
ªsu…
[8];

1543 
d a_≤
 = 
ªsu…
[9];

1545 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "file_path: %s,Ñesolution: %s,Ñotate: %d, mime: %s\n",

1546 
fûe_∑th
, 
ªsﬁuti⁄
, 
rŸ©e
, 
mime
);

1547 if–!
fûe_∑th
 || !
ªsﬁuti⁄
 || (
	`ac˚ss
(fûe_∑th, 
F_OK
Ë!0Ë|| !
mime
)

1549 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "%†nŸ found,Ñe•⁄dög ERROR 404\n", 
obje˘
);

1550 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

1551 
	`Síd404
(
h
);

1555 if–
ßvïå
 )

1556 
ßvïå
 = 
	`°rchr
(saveptr, '?');

1557 
∑th
 = 
ßvïå
 ? savïå + 1 : 
obje˘
;

1558  
ôem
 = 
	`°πok_r
(
∑th
, "&,", &
ßvïå
); iãm !
NULL
; item = strtok_r(NULL, "&,", &saveptr) )

1560 
	`decodeSåög
(
ôem
, 1);

1561 
vÆ
 = 
ôem
;

1562 
key
 = 
	`°r£p
(&
vÆ
, "=");

1563 if–!
vÆ
 )

1565 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "%s: %s\n", 
key
, 
vÆ
);

1566 if–
	`°rˇ£cmp
(
key
, "width") == 0 )

1568 
width
 = 
	`©oi
(
vÆ
);

1570 if–
	`°rˇ£cmp
(
key
, "height") == 0 )

1572 
height
 = 
	`©oi
(
vÆ
);

1574 if–
	`°rˇ£cmp
(
key
, "rotation") == 0 )

1576 
rŸ©e
 = (rŸ©ê+ 
	`©oi
(
vÆ
)) % 360;

1577 
	`sql_exec
(
db
, "UPDATE DETAILS së ROTATION = %d whîêID = %Œd", 
rŸ©e
, 
id
);

1586 #i‡
USE_FORK


1587 
pid_t
 
√wpid
 = 0;

1588 
√wpid
 = 
	`f‹k
();

1589 if–
√wpid
 )

1591 
	`Clo£Sockë_u≤phâp
(
h
);

1592 
ªsized_îr‹
;

1595 if–
h
->
ªqÊags
 & (
FLAG_XFERSTREAMING
|
FLAG_RANGE
) )

1597 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "ClientÅriedÅo specifyÅransferModeás Streaming withán image!\n");

1598 
	`Síd406
(
h
);

1599 
ªsized_îr‹
;

1602 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "SîvögÑesized imagêf‹ Obje˘Id: %Œd [%s]\n", 
id
, 
fûe_∑th
);

1603  
rŸ©e
 )

1606 
ªt
 = 
	`ssˇnf
(
ªsﬁuti⁄
, "%dx%d", &
§ch
, &
§cw
);

1607 
rŸ©e
 = 
ROTATE_90
;

1610 
ªt
 = 
	`ssˇnf
(
ªsﬁuti⁄
, "%dx%d", &
§ch
, &
§cw
);

1611 
rŸ©e
 = 
ROTATE_270
;

1614 
ªt
 = 
	`ssˇnf
(
ªsﬁuti⁄
, "%dx%d", &
§cw
, &
§ch
);

1615 
rŸ©e
 = 
ROTATE_180
;

1618 
ªt
 = 
	`ssˇnf
(
ªsﬁuti⁄
, "%dx%d", &
§cw
, &
§ch
);

1619 
rŸ©e
 = 
ROTATE_NONE
;

1622 if–
ªt
 != 2 )

1624 
	`Síd500
(
h
);

1628 
d°w
 = 
width
;

1629 
d°h
 = ((((
width
<<10)/
§cw
)*
§ch
)>>10);

1630 if–
d°h
 > 
height
 )

1632 
d°h
 = 
height
;

1633 
d°w
 = (((
height
<<10)/
§ch
Ë* 
§cw
>>10);

1637 if–
d°w
 <640 && 
d°h
 <= 480 )

1638 
	`°r˝y
(
d a_≤
, "DLNA.ORG_PN=JPEG_SM;");

1639 if–
d°w
 <1024 && 
d°h
 <= 768 )

1640 
	`°r˝y
(
d a_≤
, "DLNA.ORG_PN=JPEG_MED;");

1642 
	`°r˝y
(
d a_≤
, "DLNA.ORG_PN=JPEG_LRG;");

1645 if–
§cw
>>4 >
d°w
 && 
§ch
>>4 >
d°h
)

1646 
sˇÀ
 = 8;

1647 if–
§cw
>>3 >
d°w
 && 
§ch
>>3 >
d°h
 )

1648 
sˇÀ
 = 4;

1649 if–
§cw
>>2 >
d°w
 && 
§ch
>>2 >
d°h
 )

1650 
sˇÀ
 = 2;

1652 
°r
.
d©a
 = 
hódî
;

1653 
°r
.
size
 = (
hódî
);

1654 
°r
.
off
 = 0;

1656 
	`°r·ime
(
d©e
, 30,"%a, %d %b %Y %H:%M:%S GMT" , 
	`gmtime
(&
cuπime
));

1657 
	`°rˇtf
(&
°r
, "HTTP/1.1 200 OK\r\n"

1664 "Sîvî: " 
MINIDLNA_SERVER_STRING
 "\r\n",

1665 
mime
, 
d©e
, 
d a_≤
, 1, 
d a_Êags
, 0);

1666 #i‡
USE_FORK


1667 if–(
h
->
ªqÊags
 & 
FLAG_XFERBACKGROUND
Ë&& (
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 19) == 0) )

1668 
	`°rˇtf
(&
°r
, "transferMode.dlna.org: Background\r\n");

1671 
	`°rˇtf
(&
°r
, "transferMode.dlna.org: Interactive\r\n");

1673 if–
	`°rcmp
(
h
->
HâpVî
, "HTTP/1.0") == 0 )

1675 
chunked
 = 0;

1676 
im§c
 = 
	`image_√w_‰om_j≥g
(
fûe_∑th
, 1, 
NULL
, 0, 
sˇÀ
, 
rŸ©e
);

1680 
chunked
 = 1;

1681 
	`°rˇtf
(&
°r
, "Transfer-Encoding: chunked\r\n\r\n");

1684 if–!
chunked
 )

1686 if–!
im§c
 )

1688 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "U«bÀÅÿ›í imagê%s!\n", 
fûe_∑th
);

1689 
	`Síd500
(
h
);

1690 
ªsized_îr‹
;

1693 
imd°
 = 
	`image_ªsize
(
im§c
, 
d°w
, 
d°h
);

1694 
d©a
 = 
	`image_ßve_to_j≥g_buf
(
imd°
, &
size
);

1696 
	`°rˇtf
(&
°r
, "C⁄ã¡-Lígth: %d\r\n\r\n", 
size
);

1699 if–(
	`£nd_d©a
(
h
, 
°r
.
d©a
, så.
off
, 0Ë=0Ë&& (h->
ªq_comm™d
 !
EHód
) )

1701 if–
chunked
 )

1703 
im§c
 = 
	`image_√w_‰om_j≥g
(
fûe_∑th
, 1, 
NULL
, 0, 
sˇÀ
, 
rŸ©e
);

1704 if–!
im§c
 )

1706 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "U«bÀÅÿ›í imagê%s!\n", 
fûe_∑th
);

1707 
	`Síd500
(
h
);

1708 
ªsized_îr‹
;

1710 
imd°
 = 
	`image_ªsize
(
im§c
, 
d°w
, 
d°h
);

1711 
d©a
 = 
	`image_ßve_to_j≥g_buf
(
imd°
, &
size
);

1713 
ªt
 = 
	`•rötf
(
buf
, "%x\r\n", 
size
);

1714 
	`£nd_d©a
(
h
, 
buf
, 
ªt
, 
MSG_MORE
);

1715 
	`£nd_d©a
(
h
, (*)
d©a
, 
size
, 
MSG_MORE
);

1716 
	`£nd_d©a
(
h
, "\r\n0\r\n\r\n", 7, 0);

1720 
	`£nd_d©a
(
h
, (*)
d©a
, 
size
, 0);

1723 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "D⁄ê£rvög %s\n", 
fûe_∑th
);

1724 if–
im§c
 )

1725 
	`image_‰ì
(
im§c
);

1726 if–
imd°
 )

1727 
	`image_‰ì
(
imd°
);

1728 
	`Clo£Sockë_u≤phâp
(
h
);

1729 
ªsized_îr‹
:

1730 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

1731 #i‡
USE_FORK


1732 if–!
√wpid
 )

1733 
	`_exô
(0);

1735 
	}
}

1738 
	$SídRe•_d afûe
(
u≤phâp
 *
h
, *
obje˘
)

1740 
hódî
[1024];

1741 
°rög_s
 
°r
;

1742 
buf
[128];

1743 **
ªsu…
;

1744 
rows
, 
ªt
;

1745 
d©e
[30];

1746 
time_t
 
cuπime
 = 
	`time
(
NULL
);

1747 
off_t
 
tŸÆ
, 
off£t
, 
size
;

1748 
öt64_t
 
id
;

1749 
£ndfh
;

1750 
uöt32_t
 
d a_Êags
 = 
DLNA_FLAG_DLNA_V1_5
|
DLNA_FLAG_HTTP_STALLING
|
DLNA_FLAG_TM_B
;

1751 
uöt32_t
 
cÊags
 = 
˛õ¡_ty≥s
[
h
->
ªq_˛õ¡
].
Êags
;

1752 °ru˘ { 
öt64_t
 
id
;

1753 
˛õ¡_ty≥s
 
˛õ¡
;

1754 
∑th
[
PATH_MAX
];

1755 
mime
[32];

1756 
d a
[96];

1757 } 
œ°_fûe
 = { 0, 0 };

1758 #i‡
USE_FORK


1759 
pid_t
 
√wpid
 = 0;

1762 
id
 = 
	`°πﬁl
(
obje˘
, 
NULL
, 10);

1763 if–
cÊags
 & 
FLAG_MS_PFS
 )

1765 if–
	`°r°r
(
obje˘
, "?albumArt=true") )

1767 *
¨t
;

1768 
¨t
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT ALBUM_ART from DETAILS whîêID = '%Œd'", 
id
);

1769 
	`SídRe•_ÆbumAπ
(
h
, 
¨t
);

1770 
	`sqlôe3_‰ì
(
¨t
);

1774 if–
id
 !
œ°_fûe
.id || 
h
->
ªq_˛õ¡
 !œ°_fûe.
˛õ¡
 )

1776 
	`¢¥ötf
(
buf
, (buf), "SELECT PATH, MIME, DLNA_PN from DETAILS whîêID = '%Œd'", ()
id
);

1777 
ªt
 = 
	`sql_gë_èbÀ
(
db
, 
buf
, &
ªsu…
, &
rows
, 
NULL
);

1778 if–(
ªt
 !
SQLITE_OK
) )

1780 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "Didn'àföd vÆid fûêf‹ %Œd!\n", 
id
);

1781 
	`Síd500
(
h
);

1784 if–!
rows
 || !
ªsu…
[3] || !result[4] )

1786 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "%†nŸ found,Ñe•⁄dög ERROR 404\n", 
obje˘
);

1787 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

1788 
	`Síd404
(
h
);

1792 
œ°_fûe
.
id
 = id;

1793 
œ°_fûe
.
˛õ¡
 = 
h
->
ªq_˛õ¡
;

1794 
	`°∫˝y
(
œ°_fûe
.
∑th
, 
ªsu…
[3], (last_file.path)-1);

1795 if–
ªsu…
[4] )

1797 
	`°∫˝y
(
œ°_fûe
.
mime
, 
ªsu…
[4], (last_file.mime)-1);

1799 if–
cÊags
 & 
FLAG_SAMSUNG
 )

1801 if–
	`°rcmp
(
œ°_fûe
.
mime
+6, "x-matroska") == 0 )

1802 
	`°r˝y
(
œ°_fûe
.
mime
+8, "mkv");

1806 if–
h
->
ªq_˛õ¡
 =
ESamsungSîõsA
 &&

1807 
	`°rcmp
(
œ°_fûe
.
mime
+6, "x-msvideo") == 0 )

1808 
	`°r˝y
(
œ°_fûe
.
mime
+6, "mpeg");

1811 if–
h
->
ªq_˛õ¡
 =
ES⁄yBDP
 )

1813 if–
	`°rcmp
(
œ°_fûe
.
mime
+6, "x-matroska") == 0 ||

1814 
	`°rcmp
(
œ°_fûe
.
mime
+6, "mpeg") == 0 )

1815 
	`°r˝y
(
œ°_fûe
.
mime
+6, "divx");

1818 if–
ªsu…
[5] )

1819 
	`¢¥ötf
(
œ°_fûe
.
d a
, ÷a°_fûe.d a), "DLNA.ORG_PN=%s;", 
ªsu…
[5]);

1821 
œ°_fûe
.
d a
[0] = '\0';

1822 
	`sqlôe3_‰ì_èbÀ
(
ªsu…
);

1824 #i‡
USE_FORK


1825 
√wpid
 = 
	`f‹k
();

1826 if–
√wpid
 )

1828 
	`Clo£Sockë_u≤phâp
(
h
);

1829 
îr‹
;

1833 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "Sîvög DëaûID: %Œd [%s]\n", 
id
, 
œ°_fûe
.
∑th
);

1835 if–
h
->
ªqÊags
 & 
FLAG_XFERSTREAMING
 )

1837 if–
	`°∫cmp
(
œ°_fûe
.
mime
, "image", 5) == 0 )

1839 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "ClientÅriedÅo specifyÅransferModeás Streaming withán image!\n");

1840 
	`Síd406
(
h
);

1841 
îr‹
;

1844 if–
h
->
ªqÊags
 & 
FLAG_XFERINTERACTIVE
 )

1846 if–
h
->
ªqÊags
 & 
FLAG_REALTIMEINFO
 )

1848 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "BadÑealTimeInfo flag with InteractiveÑequest!\n");

1849 
	`Síd400
(
h
);

1850 
îr‹
;

1852 if–
	`°∫cmp
(
œ°_fûe
.
mime
, "image", 5) != 0 )

1854 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "ClientÅriedÅo specifyÅransferModeás Interactive withoután image!\n");

1857 if–!(
cÊags
 & 
FLAG_SAMSUNG
Ë|| 
	`GETFLAG
(
DLNA_STRICT_MASK
) )

1859 
	`Síd406
(
h
);

1860 
îr‹
;

1865 
off£t
 = 
h
->
ªq_R™geSèπ
;

1866 
£ndfh
 = 
	`›í
(
œ°_fûe
.
∑th
, 
O_RDONLY
);

1867 if–
£ndfh
 < 0 ) {

1868 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "Eº‹ o≥nög %s\n", 
œ°_fûe
.
∑th
);

1869 
	`Síd404
(
h
);

1870 
îr‹
;

1872 
size
 = 
	`l£ek
(
£ndfh
, 0, 
SEEK_END
);

1873 
	`l£ek
(
£ndfh
, 0, 
SEEK_SET
);

1875 
°r
.
d©a
 = 
hódî
;

1876 
°r
.
size
 = (
hódî
);

1877 
°r
.
off
 = 0;

1879 
	`°rˇtf
(&
°r
, "HTTP/1.1 20%c OK\r\n"

1881 (
h
->
ªqÊags
 & 
FLAG_RANGE
 ? '6' : '0'),

1882 
œ°_fûe
.
mime
);

1883 if–
h
->
ªqÊags
 & 
FLAG_RANGE
 )

1885 if–!
h
->
ªq_R™geEnd
 || h->ªq_R™geEnd =
size
 )

1887 
h
->
ªq_R™geEnd
 = 
size
 - 1;

1889 if–(
h
->
ªq_R™geSèπ
 > h->
ªq_R™geEnd
) || (h->req_RangeStart < 0) )

1891 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "SpecifiedÑange was invalid!\n");

1892 
	`Síd400
(
h
);

1893 
	`˛o£
(
£ndfh
);

1894 
îr‹
;

1896 if–
h
->
ªq_R™geEnd
 >
size
 )

1898 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "SpecifiedÑange was outside file boundaries!\n");

1899 
	`Síd416
(
h
);

1900 
	`˛o£
(
£ndfh
);

1901 
îr‹
;

1904 
tŸÆ
 = 
h
->
ªq_R™geEnd
 - h->
ªq_R™geSèπ
 + 1;

1905 
	`°rˇtf
(&
°r
, "Content-Length: %jd\r\n"

1907 (
ötmax_t
)
tŸÆ
, (ötmax_t)
h
->
ªq_R™geSèπ
,

1908 (
ötmax_t
)
h
->
ªq_R™geEnd
, (ötmax_t)
size
);

1912 
h
->
ªq_R™geEnd
 = 
size
 - 1;

1913 
tŸÆ
 = 
size
;

1914 
	`°rˇtf
(&
°r
, "C⁄ã¡-Lígth: %jd\r\n", (
ötmax_t
)
tŸÆ
);

1917 #i‡
USE_FORK


1918 if–(
h
->
ªqÊags
 & 
FLAG_XFERBACKGROUND
Ë&& (
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 19) == 0) )

1919 
	`°rˇtf
(&
°r
, "transferMode.dlna.org: Background\r\n");

1922 if–
	`°∫cmp
(
œ°_fûe
.
mime
, "image", 5) == 0 )

1923 
	`°rˇtf
(&
°r
, "transferMode.dlna.org: Interactive\r\n");

1925 
	`°rˇtf
(&
°r
, "transferMode.dlna.org: Streaming\r\n");

1927  *
œ°_fûe
.
mime
 )

1930 
d a_Êags
 |
DLNA_FLAG_TM_I
;

1935 
d a_Êags
 |
DLNA_FLAG_TM_S
;

1939 if–
h
->
ªqÊags
 & 
FLAG_CAPTION
 )

1941 if–
	`sql_gë_öt_fõld
(
db
, "SELECT ID from CAPTIONS whîêID = '%Œd'", 
id
) > 0 )

1942 
	`°rˇtf
(&
°r
, "CaptionInfo.sec: http://%s:%d/Captions/%lld.srt\r\n",

1943 
œn_addr
[
h
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
id
);

1946 
	`°r·ime
(
d©e
, 30,"%a, %d %b %Y %H:%M:%S GMT" , 
	`gmtime
(&
cuπime
));

1947 
	`°rˇtf
(&
°r
, "Accept-Ranges: bytes\r\n"

1953 "Sîvî: " 
MINIDLNA_SERVER_STRING
 "\r\n\r\n",

1954 
d©e
, 
œ°_fûe
.
d a
, 1, 0, 
d a_Êags
, 0);

1957 if–
	`£nd_d©a
(
h
, 
°r
.
d©a
, så.
off
, 
MSG_MORE
) == 0 )

1959 if–
h
->
ªq_comm™d
 !
EHód
 )

1960 
	`£nd_fûe
(
h
, 
£ndfh
, 
off£t
, h->
ªq_R™geEnd
);

1962 
	`˛o£
(
£ndfh
);

1964 
	`Clo£Sockë_u≤phâp
(
h
);

1965 
îr‹
:

1966 #i‡
USE_FORK


1967 if–!
√wpid
 )

1968 
	`_exô
(0);

1971 
	}
}

	@upnphttp.h

49 #i‚de‡
__UPNPHTTP_H__


50 
	#__UPNPHTTP_H__


	)

52 
	~<√töë/ö.h
>

53 
	~<sys/queue.h
>

55 
	~"möid ©y≥s.h
"

56 
	~"c⁄fig.h
"

59 
	#MINIDLNA_SERVER_STRING
 
OS_VERSION
 " DLNADOC/1.50 UPnP/1.0 " 
SERVER_NAME
 "/" 
MINIDLNA_VERSION


	)

68 
	ehâpComm™ds
 {

69 
	mEUnknown
 = 0,

70 
	mEGë
,

71 
	mEPo°
,

72 
	mEHód
,

73 
	mESubs¸ibe
,

74 
	mEUnSubs¸ibe


77 
	su≤phâp
 {

78 
	msockë
;

79 
ö_addr
 
	m˛õ¡addr
;

80 
	miÁ˚
;

81 
	m°©e
;

82 
	mHâpVî
[16];

84 * 
	mªq_buf
;

85 
	mªq_buÊí
;

86 
	mªq_c⁄ã¡Àn
;

87 
	mªq_c⁄ã¡off
;

88 
hâpComm™ds
 
	mªq_comm™d
;

89 
˛õ¡_ty≥s
 
	mªq_˛õ¡
;

90 c⁄° * 
	mªq_sﬂpA˘i⁄
;

91 
	mªq_sﬂpA˘i⁄Lí
;

92 c⁄° * 
	mªq_CÆlback
;

93 
	mªq_CÆlbackLí
;

94 c⁄° * 
	mªq_NT
;

95 
	mªq_NTLí
;

96 
	mªq_Timeout
;

97 c⁄° * 
	mªq_SID
;

98 
	mªq_SIDLí
;

99 
off_t
 
	mªq_R™geSèπ
;

100 
off_t
 
	mªq_R™geEnd
;

101 
	mªq_chunkÀn
;

102 
uöt32_t
 
	mªqÊags
;

104 * 
	mªs_buf
;

105 
	mªs_buÊí
;

106 
	mªs_buf_Ælo˛í
;

107 
uöt32_t
 
	mª•Êags
;

110 
LIST_ENTRY
(
u≤phâp
Ë
	míåõs
;

113 
	#FLAG_TIMEOUT
 0x00000001

	)

114 
	#FLAG_SID
 0x00000002

	)

115 
	#FLAG_RANGE
 0x00000004

	)

116 
	#FLAG_HOST
 0x00000008

	)

117 
	#FLAG_LANGUAGE
 0x00000010

	)

119 
	#FLAG_INVALID_REQ
 0x00000040

	)

120 
	#FLAG_HTML
 0x00000080

	)

122 
	#FLAG_CHUNKED
 0x00000100

	)

123 
	#FLAG_TIMESEEK
 0x00000200

	)

124 
	#FLAG_REALTIMEINFO
 0x00000400

	)

125 
	#FLAG_PLAYSPEED
 0x00000800

	)

126 
	#FLAG_XFERSTREAMING
 0x00001000

	)

127 
	#FLAG_XFERINTERACTIVE
 0x00002000

	)

128 
	#FLAG_XFERBACKGROUND
 0x00004000

	)

129 
	#FLAG_CAPTION
 0x00008000

	)

131 #i‚de‡
MSG_MORE


132 
	#MSG_MORE
 0

	)

136 
u≤phâp
 *

137 
New_u≤phâp
();

141 
Clo£Sockë_u≤phâp
(
u≤phâp
 *);

145 
Dñëe_u≤phâp
(
u≤phâp
 *);

149 
Pro˚ss_u≤phâp
(
u≤phâp
 *);

155 
BuûdHódî_u≤phâp
(
u≤phâp
 * 
h
, 
ª•code
,

156 c⁄° * 
ª•msg
,

157 
bodyÀn
);

163 
BuûdRe•_u≤phâp
(
u≤phâp
 *, const *, );

168 
BuûdRe•2_u≤phâp
(
u≤phâp
 * 
h
, 
ª•code
,

169 c⁄° * 
ª•msg
,

170 c⁄° * 
body
, 
bodyÀn
);

174 
Síd500
(
u≤phâp
 *);

176 
Síd501
(
u≤phâp
 *);

180 
SídRe•_u≤phâp
(
u≤phâp
 *);

183 
SídRe•_ic⁄
(
u≤phâp
 *, * 
uæ
);

185 
SídRe•_ÆbumAπ
(
u≤phâp
 *, * 
uæ
);

187 
SídRe•_ˇ±i⁄
(
u≤phâp
 *, * 
uæ
);

189 
SídRe•_ªsizedimg
(
u≤phâp
 *, * 
uæ
);

191 
SídRe•_thumb«û
(
u≤phâp
 *, * 
uæ
);

195 
SídRe•_d afûe
(
u≤phâp
 *, * 
uæ
);

	@upnpreplyparse.c

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<°dio.h
>

33 
	~"u≤¥ïly∑r£.h
"

34 
	~"möixml.h
"

37 
	$NameVÆueP¨£rSèπE…
(* 
d
, c⁄° * 
«me
, 
l
)

39 
NameVÆueP¨£rD©a
 * 
d©a
 = (NameVÆueP¨£rD©®*)
d
;

40 if(
l
>63)

41 
l
 = 63;

42 
	`mem˝y
(
d©a
->
cuª…
, 
«me
, 
l
);

43 
d©a
->
cuª…
[
l
] = '\0';

46 if(!
d©a
->
hód
.
lh_fú°
)

48 
NameVÆue
 * 
nv
;

49 
nv
 = 
	`mÆloc
((
NameVÆue
)+
l
+1);

50 
	`°r˝y
(
nv
->
«me
, "rootElement");

51 
	`mem˝y
(
nv
->
vÆue
, 
«me
, 
l
);

52 
nv
->
vÆue
[
l
] = '\0';

53 
	`LIST_INSERT_HEAD
(&(
d©a
->
hód
), 
nv
, 
íåõs
);

55 
	}
}

58 
	$NameVÆueP¨£rGëD©a
(* 
d
, c⁄° * 
d©as
, 
l
)

60 
NameVÆueP¨£rD©a
 * 
d©a
 = (NameVÆueP¨£rD©®*)
d
;

61 
NameVÆue
 * 
nv
;

62 if(
l
>1975)

63 
l
 = 1975;

64 
nv
 = 
	`mÆloc
((
NameVÆue
)+
l
+1);

65 
	`°∫˝y
(
nv
->
«me
, 
d©a
->
cuª…
, 64);

66 
nv
->
«me
[63] = '\0';

67 
	`mem˝y
(
nv
->
vÆue
, 
d©as
, 
l
);

68 
nv
->
vÆue
[
l
] = '\0';

69 
	`LIST_INSERT_HEAD
(&(
d©a
->
hód
), 
nv
, 
íåõs
);

70 
	}
}

73 
	$P¨£NameVÆue
(c⁄° * 
buf„r
, 
bufsize
,

74 
NameVÆueP¨£rD©a
 * 
d©a
, 
uöt32_t
 
Êags
)

76 
xmÕ¨£r
 
∑r£r
;

77 
	`LIST_INIT
(&(
d©a
->
hód
));

79 
∑r£r
.
xml°¨t
 = 
buf„r
;

80 
∑r£r
.
xmlsize
 = 
bufsize
;

81 
∑r£r
.
d©a
 = data;

82 
∑r£r
.
°¨ã…func
 = 
NameVÆueP¨£rSèπE…
;

83 
∑r£r
.
ídñtfunc
 = 0;

84 
∑r£r
.
d©afunc
 = 
NameVÆueP¨£rGëD©a
;

85 
∑r£r
.
©tfunc
 = 0;

86 
∑r£r
.
Êags
 = flags;

87 
	`∑r£xml
(&
∑r£r
);

88 
	}
}

91 
	$CÀ¨NameVÆueLi°
(
NameVÆueP¨£rD©a
 * 
pd©a
)

93 
NameVÆue
 * 
nv
;

94 (
nv
 = 
pd©a
->
hód
.
lh_fú°
Ë!
NULL
)

96 
	`LIST_REMOVE
(
nv
, 
íåõs
);

97 
	`‰ì
(
nv
);

99 
	}
}

102 
	$GëVÆueFromNameVÆueLi°
(
NameVÆueP¨£rD©a
 * 
pd©a
,

103 c⁄° * 
Name
)

105 
NameVÆue
 * 
nv
;

106 * 
p
 = 
NULL
;

107 
nv
 = 
pd©a
->
hód
.
lh_fú°
;

108 (
nv
 !
NULL
Ë&& (
p
 == NULL);

109 
nv
 =Çv->
íåõs
.
À_√xt
)

111 if(
	`°rcmp
(
nv
->
«me
, 
Name
) == 0)

112 
p
 = 
nv
->
vÆue
;

114  
p
;

115 
	}
}

119 #ifde‡
DEBUG


121 
	$Di•œyNameVÆueLi°
(* 
buf„r
, 
bufsize
)

123 
NameVÆueP¨£rD©a
 
pd©a
;

124 
NameVÆue
 * 
nv
;

125 
	`P¨£NameVÆue
(
buf„r
, 
bufsize
, &
pd©a
);

126 
nv
 = 
pd©a
.
hód
.
lh_fú°
;

127 
nv
 !
NULL
;

128 
nv
 =Çv->
íåõs
.
À_√xt
)

130 
	`¥ötf
("%†%s\n", 
nv
->
«me
,Çv->
vÆue
);

132 
	`CÀ¨NameVÆueLi°
(&
pd©a
);

133 
	}
}

	@upnpreplyparse.h

29 #i‚de‡
__UPNPREPLYPARSE_H__


30 
	#__UPNPREPLYPARSE_H__


	)

32 
	~<°döt.h
>

33 
	~<sys/queue.h
>

35 #ifde‡
__˝lu•lus


39 
	sNameVÆue
 {

40 
LIST_ENTRY
(
NameVÆue
Ë
íåõs
;

41 
«me
[64];

42 
vÆue
[];

45 
	sNameVÆueP¨£rD©a
 {

46 
LIST_HEAD
(
li°hód
, 
NameVÆue
Ë
hód
;

47 
cuª…
[64];

50 
	#XML_STORE_EMPTY_FL
 0x01

	)

54 
P¨£NameVÆue
(c⁄° * 
buf„r
, 
bufsize
,

55 
NameVÆueP¨£rD©a
 * 
d©a
, 
uöt32_t
 
Êags
);

59 
CÀ¨NameVÆueLi°
(
NameVÆueP¨£rD©a
 * 
pd©a
);

63 
GëVÆueFromNameVÆueLi°
(
NameVÆueP¨£rD©a
 * 
pd©a
,

64 c⁄° * 
Name
);

68 
GëVÆueFromNameVÆueLi°Ign‹eNS
(
NameVÆueP¨£rD©a
 * 
pd©a
,

69 c⁄° * 
Name
);

72 #ifde‡
DEBUG


74 
Di•œyNameVÆueLi°
(* 
buf„r
, 
bufsize
);

77 #ifde‡
__˝lu•lus


	@upnpsoap.c

49 
	~"c⁄fig.h
"

51 
	~<°dio.h
>

52 
	~<°dlib.h
>

53 
	~<°rög.h
>

54 
	~<sys/sockë.h
>

55 
	~<uni°d.h
>

56 
	~<dúít.h
>

57 
	~<sys/°©.h
>

58 
	~<sys/ty≥s.h
>

59 
	~<¨∑/öë.h
>

60 
	~<√töë/ö.h
>

61 
	~<√tdb.h
>

62 
	~<˘y≥.h
>

64 
	~"u≤pglobÆv¨s.h
"

65 
	~"utûs.h
"

66 
	~"u≤phâp.h
"

67 
	~"u≤psﬂp.h
"

68 
	~"u≤¥ïly∑r£.h
"

69 
	~"gëiÁddr.h
"

70 
	~"sˇ¬î.h
"

71 
	~"sql.h
"

72 
	~"log.h
"

74 
g√t_is_gue°
(
ùaddr
, *
gue°
);

77 
	$BuûdSídAndClo£SﬂpRe•
(
u≤phâp
 * 
h
,

78 c⁄° * 
body
, 
bodyÀn
)

80 c⁄° 
bef‹ebody
[] =

86 c⁄° 
a·îbody
[] =

90 i‡(!
body
 || 
bodyÀn
 < 0)

92 
	`Síd500
(
h
);

96 
	`BuûdHódî_u≤phâp
(
h
, 200, "OK", (
bef‹ebody
) - 1

97 + (
a·îbody
Ë- 1 + 
bodyÀn
 );

99 
	`mem˝y
(
h
->
ªs_buf
 + h->
ªs_buÊí
, 
bef‹ebody
, (beforebody) - 1);

100 
h
->
ªs_buÊí
 +(
bef‹ebody
) - 1;

102 
	`mem˝y
(
h
->
ªs_buf
 + h->
ªs_buÊí
, 
body
, 
bodyÀn
);

103 
h
->
ªs_buÊí
 +
bodyÀn
;

105 
	`mem˝y
(
h
->
ªs_buf
 + h->
ªs_buÊí
, 
a·îbody
, (afterbody) - 1);

106 
h
->
ªs_buÊí
 +(
a·îbody
) - 1;

108 
	`SídRe•_u≤phâp
(
h
);

109 
	`Clo£Sockë_u≤phâp
(
h
);

110 
	}
}

113 
	$GëSy°emUpd©eID
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

115 c⁄° 
ª•
[] =

121 
body
[512];

122 
bodyÀn
;

124 
bodyÀn
 = 
	`¢¥ötf
(
body
, (body), 
ª•
,

125 
a˘i⁄
, "urn:schemas-upnp-org:service:ContentDirectory:1",

126 
upd©eID
, 
a˘i⁄
);

127 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
body
, 
bodyÀn
);

128 
	}
}

131 
	$IsAuth‹izedVÆid©ed
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

133 c⁄° 
ª•
[] =

139 
body
[512];

140 
NameVÆueP¨£rD©a
 
d©a
;

141 c⁄° * 
id
;

143 
	`P¨£NameVÆue
(
h
->
ªq_buf
 + h->
ªq_c⁄ã¡off
, h->
ªq_c⁄ã¡Àn
, &
d©a
, 
XML_STORE_EMPTY_FL
);

144 
id
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "DeviceID");

145 if(
id
)

147 
bodyÀn
;

148 
bodyÀn
 = 
	`¢¥ötf
(
body
, (body), 
ª•
,

149 
a˘i⁄
, "urn:microsoft.com:service:X_MS_MediaReceiverRegistrar:1",

150 1, 
a˘i⁄
);

151 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
body
, 
bodyÀn
);

154 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

156 
	`CÀ¨NameVÆueLi°
(&
d©a
);

157 
	}
}

160 
	$GëPrŸocﬁInfo
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

162 c⁄° 
ª•
[] =

166 
RESOURCE_PROTOCOL_INFO_VALUES


171 * 
body
;

172 
bodyÀn
;

174 
bodyÀn
 = 
	`a•rötf
(&
body
, 
ª•
,

175 
a˘i⁄
, "urn:schemas-upnp-org:service:ConnectionManager:1",

176 
a˘i⁄
);

177 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
body
, 
bodyÀn
);

178 
	`‰ì
(
body
);

179 
	}
}

182 
	$GëS‹tC≠abûôõs
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

184 c⁄° 
ª•
[] =

196 
body
[512];

197 
bodyÀn
;

199 
bodyÀn
 = 
	`¢¥ötf
(
body
, (body), 
ª•
,

200 
a˘i⁄
, "urn:schemas-upnp-org:service:ContentDirectory:1",

201 
a˘i⁄
);

202 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
body
, 
bodyÀn
);

203 
	}
}

206 
	$GëSórchC≠abûôõs
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

208 c⁄° 
ª•
[] =

223 
body
[512];

224 
bodyÀn
;

226 
bodyÀn
 = 
	`¢¥ötf
(
body
, (body), 
ª•
,

227 
a˘i⁄
, "urn:schemas-upnp-org:service:ContentDirectory:1",

228 
a˘i⁄
);

229 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
body
, 
bodyÀn
);

230 
	}
}

233 
	$GëCuºítC⁄√˘i⁄IDs
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

236 c⁄° 
ª•
[] =

242 
body
[512];

243 
bodyÀn
;

245 
bodyÀn
 = 
	`¢¥ötf
(
body
, (body), 
ª•
,

246 
a˘i⁄
, "urn:schemas-upnp-org:service:ConnectionManager:1",

247 
a˘i⁄
);

248 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
body
, 
bodyÀn
);

249 
	}
}

252 
	$GëCuºítC⁄√˘i⁄Info
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

255 c⁄° 
ª•
[] =

267 
body
[(
ª•
)+128];

268 
NameVÆueP¨£rD©a
 
d©a
;

269 c⁄° *
id_°r
;

270 
id
;

271 *
íd±r
 = 
NULL
;

273 
	`P¨£NameVÆue
(
h
->
ªq_buf
 + h->
ªq_c⁄ã¡off
, h->
ªq_c⁄ã¡Àn
, &
d©a
, 
XML_STORE_EMPTY_FL
);

274 
id_°r
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "ConnectionID");

275 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "GëCuºítC⁄√˘i⁄Info(%s)\n", 
id_°r
);

276 if(
id_°r
)

277 
id
 = 
	`°πﬁ
(
id_°r
, &
íd±r
, 10);

278 i‡(!
id_°r
 || 
íd±r
 == id_str)

280 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

282 if(
id
 != 0)

284 
	`SﬂpEº‹
(
h
, 701, "No such objectÉrror");

288 
bodyÀn
;

289 
bodyÀn
 = 
	`¢¥ötf
(
body
, (body), 
ª•
,

290 
a˘i⁄
, "urn:schemas-upnp-org:service:ConnectionManager:1",

291 
a˘i⁄
);

292 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
body
, 
bodyÀn
);

294 
	`CÀ¨NameVÆueLi°
(&
d©a
);

295 
	}
}

298 
	#FILTER_CHILDCOUNT
 0x00000001

	)

299 
	#FILTER_DC_CREATOR
 0x00000002

	)

300 
	#FILTER_DC_DATE
 0x00000004

	)

301 
	#FILTER_DC_DESCRIPTION
 0x00000008

	)

302 
	#FILTER_DLNA_NAMESPACE
 0x00000010

	)

303 
	#FILTER_REFID
 0x00000020

	)

304 
	#FILTER_RES
 0x00000040

	)

305 
	#FILTER_RES_BITRATE
 0x00000080

	)

306 
	#FILTER_RES_DURATION
 0x00000100

	)

307 
	#FILTER_RES_NRAUDIOCHANNELS
 0x00000200

	)

308 
	#FILTER_RES_RESOLUTION
 0x00000400

	)

309 
	#FILTER_RES_SAMPLEFREQUENCY
 0x00000800

	)

310 
	#FILTER_RES_SIZE
 0x00001000

	)

311 
	#FILTER_UPNP_ACTOR
 0x00002000

	)

312 
	#FILTER_UPNP_ALBUM
 0x00004000

	)

313 
	#FILTER_UPNP_ALBUMARTURI
 0x00008000

	)

314 
	#FILTER_UPNP_ALBUMARTURI_DLNA_PROFILEID
 0x00010000

	)

315 
	#FILTER_UPNP_ARTIST
 0x00020000

	)

316 
	#FILTER_UPNP_GENRE
 0x00040000

	)

317 
	#FILTER_UPNP_ORIGINALTRACKNUMBER
 0x00080000

	)

318 
	#FILTER_UPNP_SEARCHCLASS
 0x00100000

	)

319 
	#FILTER_UPNP_STORAGEUSED
 0x00200000

	)

321 
	#FILTER_SEC_CAPTION_INFO_EX
 0x01000000

	)

322 
	#FILTER_SEC_DCM_INFO
 0x02000000

	)

323 
	#FILTER_PV_SUBTITLE_FILE_TYPE
 0x04000000

	)

324 
	#FILTER_PV_SUBTITLE_FILE_URI
 0x08000000

	)

325 
	#FILTER_AV_MEDIA_CLASS
 0x10000000

	)

327 
uöt32_t


328 
	$£t_fûãr_Êags
(*
fûãr
, 
u≤phâp
 *
h
)

330 *
ôem
, *
ßvïå
 = 
NULL
;

331 
uöt32_t
 
Êags
 = 0;

332 
ßmsung
 = 
˛õ¡_ty≥s
[
h
->
ªq_˛õ¡
].
Êags
 & 
FLAG_SAMSUNG
;

334 if–!
fûãr
 || (
	`°æí
(filter) <= 1) )

337 if–
ßmsung
 )

338 
Êags
 |
FILTER_DLNA_NAMESPACE
;

339 
ôem
 = 
	`°πok_r
(
fûãr
, ",", &
ßvïå
);

340  
ôem
 !
NULL
 )

342 if–
ßvïå
 )

343 *(
ôem
-1) = ',';

344  
	`is•a˚
(*
ôem
) )

345 
ôem
++;

346 if–
	`°rcmp
(
ôem
, "@childCount") == 0 )

348 
Êags
 |
FILTER_CHILDCOUNT
;

350 if–
	`°rcmp
(
ôem
, "dc:creator") == 0 )

352 
Êags
 |
FILTER_DC_CREATOR
;

354 if–
	`°rcmp
(
ôem
, "dc:date") == 0 )

356 
Êags
 |
FILTER_DC_DATE
;

358 if–
	`°rcmp
(
ôem
, "dc:description") == 0 )

360 
Êags
 |
FILTER_DC_DESCRIPTION
;

362 if–
	`°rcmp
(
ôem
, "dlna") == 0 )

364 
Êags
 |
FILTER_DLNA_NAMESPACE
;

366 if–
	`°rcmp
(
ôem
, "@refID") == 0 )

368 
Êags
 |
FILTER_REFID
;

370 if–
	`°rcmp
(
ôem
, "upnp:album") == 0 )

372 
Êags
 |
FILTER_UPNP_ALBUM
;

374 if–
	`°rcmp
(
ôem
, "upnp:albumArtURI") == 0 )

376 
Êags
 |
FILTER_UPNP_ALBUMARTURI
;

377 if–
ßmsung
 )

378 
Êags
 |
FILTER_UPNP_ALBUMARTURI_DLNA_PROFILEID
;

380 if–
	`°rcmp
(
ôem
, "upnp:albumArtURI@dlna:profileID") == 0 )

382 
Êags
 |
FILTER_UPNP_ALBUMARTURI
;

383 
Êags
 |
FILTER_UPNP_ALBUMARTURI_DLNA_PROFILEID
;

385 if–
	`°rcmp
(
ôem
, "upnp:artist") == 0 )

387 
Êags
 |
FILTER_UPNP_ARTIST
;

389 if–
	`°rcmp
(
ôem
, "upnp:actor") == 0 )

391 
Êags
 |
FILTER_UPNP_ACTOR
;

393 if–
	`°rcmp
(
ôem
, "upnp:genre") == 0 )

395 
Êags
 |
FILTER_UPNP_GENRE
;

397 if–
	`°rcmp
(
ôem
, "upnp:originalTrackNumber") == 0 )

399 
Êags
 |
FILTER_UPNP_ORIGINALTRACKNUMBER
;

401 if–
	`°rcmp
(
ôem
, "upnp:searchClass") == 0 )

403 
Êags
 |
FILTER_UPNP_SEARCHCLASS
;

405 if–
	`°rcmp
(
ôem
, "upnp:storageUsed") == 0 )

407 
Êags
 |
FILTER_UPNP_STORAGEUSED
;

409 if–
	`°rcmp
(
ôem
, "res") == 0 )

411 
Êags
 |
FILTER_RES
;

413 if–(
	`°rcmp
(
ôem
, "res@bitrate") == 0) ||

414 (
	`°rcmp
(
ôem
, "@bitrate") == 0) ||

415 ((
	`°rcmp
(
ôem
, "bôøã"Ë=0Ë&& (
Êags
 & 
FILTER_RES
)) )

417 
Êags
 |
FILTER_RES
;

418 
Êags
 |
FILTER_RES_BITRATE
;

420 if–(
	`°rcmp
(
ôem
, "res@duration") == 0) ||

421 (
	`°rcmp
(
ôem
, "@duration") == 0) ||

422 ((
	`°rcmp
(
ôem
, "duøti⁄"Ë=0Ë&& (
Êags
 & 
FILTER_RES
)) )

424 
Êags
 |
FILTER_RES
;

425 
Êags
 |
FILTER_RES_DURATION
;

427 if–(
	`°rcmp
(
ôem
, "res@nrAudioChannels") == 0) ||

428 (
	`°rcmp
(
ôem
, "@nrAudioChannels") == 0) ||

429 ((
	`°rcmp
(
ôem
, "ƒAudioCh™√ls"Ë=0Ë&& (
Êags
 & 
FILTER_RES
)) )

431 
Êags
 |
FILTER_RES
;

432 
Êags
 |
FILTER_RES_NRAUDIOCHANNELS
;

434 if–(
	`°rcmp
(
ôem
, "res@resolution") == 0) ||

435 (
	`°rcmp
(
ôem
, "@resolution") == 0) ||

436 ((
	`°rcmp
(
ôem
, "ªsﬁuti⁄"Ë=0Ë&& (
Êags
 & 
FILTER_RES
)) )

438 
Êags
 |
FILTER_RES
;

439 
Êags
 |
FILTER_RES_RESOLUTION
;

441 if–(
	`°rcmp
(
ôem
, "res@sampleFrequency") == 0) ||

442 (
	`°rcmp
(
ôem
, "@sampleFrequency") == 0) ||

443 ((
	`°rcmp
(
ôem
, "ßm∂eFªquícy"Ë=0Ë&& (
Êags
 & 
FILTER_RES
)) )

445 
Êags
 |
FILTER_RES
;

446 
Êags
 |
FILTER_RES_SAMPLEFREQUENCY
;

448 if–(
	`°rcmp
(
ôem
, "res@size") == 0) ||

449 (
	`°rcmp
(
ôem
, "@size") == 0) ||

450 (
	`°rcmp
(
ôem
, "size") == 0) )

452 
Êags
 |
FILTER_RES
;

453 
Êags
 |
FILTER_RES_SIZE
;

455 if–
	`°rcmp
(
ôem
, "sec:CaptionInfoEx") == 0 )

457 
Êags
 |
FILTER_SEC_CAPTION_INFO_EX
;

459 if–
	`°rcmp
(
ôem
, "sec:dcmInfo") == 0 )

461 
Êags
 |
FILTER_SEC_DCM_INFO
;

463 if–
	`°rcmp
(
ôem
, "res@pv:subtitleFileType") == 0 )

465 
Êags
 |
FILTER_PV_SUBTITLE_FILE_TYPE
;

467 if–
	`°rcmp
(
ôem
, "res@pv:subtitleFileUri") == 0 )

469 
Êags
 |
FILTER_PV_SUBTITLE_FILE_URI
;

471 if–
	`°rcmp
(
ôem
, "av:mediaClass") == 0 )

473 
Êags
 |
FILTER_AV_MEDIA_CLASS
;

475 
ôem
 = 
	`°πok_r
(
NULL
, ",", &
ßvïå
);

478  
Êags
;

479 
	}
}

482 
	$∑r£_s‹t_¸ôîü
(*
s‹tCrôîü
, *
îr‹
)

484 *
‹dî
 = 
NULL
;

485 *
ôem
, *
ßvïå
;

486 
i
, 
ªt
, 
ªvî£
, 
tôÀ_s‹ãd
 = 0;

487 
°rög_s
 
°r
;

488 *
îr‹
 = 0;

490 if–!
s‹tCrôîü
 )

491  
NULL
;

493 if–(
ôem
 = 
	`°πok_r
(
s‹tCrôîü
, ",", &
ßvïå
)) )

495 
‹dî
 = 
	`mÆloc
(4096);

496 
°r
.
d©a
 = 
‹dî
;

497 
°r
.
size
 = 4096;

498 
°r
.
off
 = 0;

499 
	`°rˇtf
(&
°r
, "order by ");

501  
i
=0; 
ôem
 !
NULL
; i++ )

503 
ªvî£
=0;

504 if–
i
 )

505 
	`°rˇtf
(&
°r
, ", ");

506 if–*
ôem
 == '+' )

508 
ôem
++;

510 if–*
ôem
 == '-' )

512 
ªvî£
 = 1;

513 
ôem
++;

517 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "Nÿ‹dî s≥cifõd [%s]\n", 
ôem
);

518 
bad_dúe˘i⁄
;

520 if–
	`°rˇ£cmp
(
ôem
, "upnp:class") == 0 )

522 
	`°rˇtf
(&
°r
, "o.CLASS");

524 if–
	`°rˇ£cmp
(
ôem
, "dc:title") == 0 )

526 
	`°rˇtf
(&
°r
, "d.TITLE");

527 
tôÀ_s‹ãd
 = 1;

529 if–
	`°rˇ£cmp
(
ôem
, "dc:date") == 0 )

531 
	`°rˇtf
(&
°r
, "d.DATE");

533 if–
	`°rˇ£cmp
(
ôem
, "upnp:originalTrackNumber") == 0 )

535 
	`°rˇtf
(&
°r
, "d.DISC, d.TRACK");

537 if–
	`°rˇ£cmp
(
ôem
, "upnp:album") == 0 )

539 
	`°rˇtf
(&
°r
, "d.ALBUM");

543 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "Unh™dÀd S‹tCrôîü [%s]\n", 
ôem
);

544 
bad_dúe˘i⁄
:

545 *
îr‹
 = -1;

546 if–
i
 )

548 
ªt
 = 
	`°æí
(
‹dî
);

549 
‹dî
[
ªt
-2] = '\0';

551 
i
--;

552 
unh™dÀd_‹dî
;

555 if–
ªvî£
 )

556 
	`°rˇtf
(&
°r
, " DESC");

557 
unh™dÀd_‹dî
:

558 
ôem
 = 
	`°πok_r
(
NULL
, ",", &
ßvïå
);

560 if–
i
 <= 0 )

562 
	`‰ì
(
‹dî
);

563  
NULL
;

566 if–!
tôÀ_s‹ãd
 )

567 
	`°rˇtf
(&
°r
, ", TITLE ASC");

569  
‹dî
;

570 
	}
}

572 
ölöe
 

573 
	$add_ªsized_ªs
(
§cw
, 
§ch
, 
ªqw
, 
ªqh
, *
d a_≤
,

574 *
dëaûID
, 
Re•⁄£
 *
¨gs
)

576 
d°w
 = 
ªqw
;

577 
d°h
 = 
ªqh
;

579 if–
¨gs
->
Êags
 & 
FLAG_NO_RESIZE
 )

582 
	`°rˇtf
(
¨gs
->
°r
, "&lt;res ");

583 if–
¨gs
->
fûãr
 & 
FILTER_RES_RESOLUTION
 )

585 
d°w
 = 
ªqw
;

586 
d°h
 = ((((
ªqw
<<10)/
§cw
)*
§ch
)>>10);

587 if–
d°h
 > 
ªqh
 ) {

588 
d°h
 = 
ªqh
;

589 
d°w
 = (((
ªqh
<<10)/
§ch
Ë* 
§cw
>>10);

591 
	`°rˇtf
(
¨gs
->
°r
, "ªsﬁuti⁄=\"%dx%d\" ", 
d°w
, 
d°h
);

593 
	`°rˇtf
(
¨gs
->
°r
, "protocolInfo=\"http-get:*:image/jpeg:"

597 
d a_≤
, 
DLNA_FLAG_DLNA_V1_5
|
DLNA_FLAG_HTTP_STALLING
|
DLNA_FLAG_TM_B
|
DLNA_FLAG_TM_I
, 0,

598 
œn_addr
[
¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
,

599 
dëaûID
, 
d°w
, 
d°h
);

600 
	}
}

602 
ölöe
 

603 
	$add_ªs
(*
size
, *
duøti⁄
, *
bôøã
, *
ßm∂eFªquícy
,

604 *
ƒAudioCh™√ls
, *
ªsﬁuti⁄
, *
d a_≤
, *
mime
,

605 *
dëaûID
, c⁄° *
ext
, 
Re•⁄£
 *
¨gs
)

607 
	`°rˇtf
(
¨gs
->
°r
, "&lt;res ");

608 if–
size
 && (
¨gs
->
fûãr
 & 
FILTER_RES_SIZE
) ) {

609 
	`°rˇtf
(
¨gs
->
°r
, "size=\"%s\" ", 
size
);

611 if–
duøti⁄
 && (
¨gs
->
fûãr
 & 
FILTER_RES_DURATION
) ) {

612 
	`°rˇtf
(
¨gs
->
°r
, "duøti⁄=\"%s\" ", 
duøti⁄
);

614 if–
bôøã
 && (
¨gs
->
fûãr
 & 
FILTER_RES_BITRATE
) ) {

615 
br
 = 
	`©oi
(
bôøã
);

616 if(
¨gs
->
Êags
 & 
FLAG_MS_PFS
)

617 
br
 /= 8;

618 
	`°rˇtf
(
¨gs
->
°r
, "bôøã=\"%d\" ", 
br
);

620 if–
ßm∂eFªquícy
 && (
¨gs
->
fûãr
 & 
FILTER_RES_SAMPLEFREQUENCY
) ) {

621 
	`°rˇtf
(
¨gs
->
°r
, "ßm∂eFªquícy=\"%s\" ", 
ßm∂eFªquícy
);

623 if–
ƒAudioCh™√ls
 && (
¨gs
->
fûãr
 & 
FILTER_RES_NRAUDIOCHANNELS
) ) {

624 
	`°rˇtf
(
¨gs
->
°r
, "ƒAudioCh™√ls=\"%s\" ", 
ƒAudioCh™√ls
);

626 if–
ªsﬁuti⁄
 && (
¨gs
->
fûãr
 & 
FILTER_RES_RESOLUTION
) ) {

627 
	`°rˇtf
(
¨gs
->
°r
, "ªsﬁuti⁄=\"%s\" ", 
ªsﬁuti⁄
);

629 if–
¨gs
->
fûãr
 & (
FILTER_PV_SUBTITLE_FILE_TYPE
|
FILTER_PV_SUBTITLE_FILE_URI
) )

631 if–
	`sql_gë_öt_fõld
(
db
, "SELECT ID from CAPTIONS whîêID = '%s'", 
dëaûID
) > 0 )

633 if–
¨gs
->
fûãr
 & 
FILTER_PV_SUBTITLE_FILE_TYPE
 )

634 
	`°rˇtf
(
¨gs
->
°r
, "pv:subtitleFileType=\"SRT\" ");

635 if–
¨gs
->
fûãr
 & 
FILTER_PV_SUBTITLE_FILE_URI
 )

636 
	`°rˇtf
(
¨gs
->
°r
, "pv:subtitleFileUri=\"http://%s:%d/Captions/%s.srt\" ",

637 
œn_addr
[
¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
dëaûID
);

640 
	`°rˇtf
(
¨gs
->
°r
, "protocolInfo=\"http-get:*:%s:%s\"&gt;"

643 
mime
, 
d a_≤
, 
œn_addr
[
¨gs
->
iÁ˚
].
°r
,

644 
ru¡ime_v¨s
.
p‹t
, 
dëaûID
, 
ext
);

645 
	}
}

647 
	#COLUMNS
 "o.REF_ID, o.DETAIL_ID, o.CLASS," \

650 " d.THUMBNAIL, d.CREATOR, d.DLNA_PN, d.MIME, d.ALBUM_ART, d.DISC, d.PATH "

	)

651 
	#SELECT_COLUMNS
 "SELECT o.OBJECT_ID, o.PARENT_ID, " 
COLUMNS


	)

654 
	$gue°_√tw‹k_íabÀ
(
u≤phâp
 *
ªq
, c⁄° *
∑th
)

656 
medü_dú_s
 *
dú
 = 
medü_dús
;

657 
is_gue°_√tw‹k
 = 0;

658 
ªt
 = 0;

660 i‡(!
∑th
)

665 
dú
)

667 i‡(
	`°∫cmp
(
dú
->
∑th
,Ö©h, 
	`°æí
(dir->path)) == 0)

672 
dú
 = dú->
√xt
;

675 i‡(
dú
 =
NULL
)

678 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "∑th: %†övÆid\n", 
∑th
);

682 
ªt
 = 
	`g√t_is_gue°
(
ªq
->
˛õ¡addr
.
s_addr
, &
is_gue°_√tw‹k
);

683 i‡(
ªt
 != 0)

685 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "FailedÅo determine Guest Network\n");

691 i‡(
is_gue°_√tw‹k
 && !
dú
->
gíabÀ
)

697 
	}
}

700 
	$ˇŒback
(*
¨gs
, 
¨gc
, **
¨gv
, **
azCﬁName
)

702 
Re•⁄£
 *
∑s£d_¨gs
 = (Re•⁄£ *)
¨gs
;

703 
u≤phâp
 *
ªq
 = 
∑s£d_¨gs
->req;

704 *
id
 = 
¨gv
[0], *
∑ª¡
 =árgv[1], *
ªfID
 =árgv[2], *
dëaûID
 =árgv[3], *
˛ass
 =árgv[4], *
size
 =árgv[5], *
tôÀ
 =árgv[6],

705 *
duøti⁄
 = 
¨gv
[7], *
bôøã
 =árgv[8], *
ßm∂eFªquícy
 =árgv[9], *
¨ti°
 =árgv[10], *
Æbum
 =árgv[11],

706 *
gíª
 = 
¨gv
[12], *
commít
 =árgv[13], *
ƒAudioCh™√ls
 =árgv[14], *
åack
 =árgv[15], *
d©e
 =árgv[16], *
ªsﬁuti⁄
 =árgv[17],

707 *
ä
 = 
¨gv
[18], *
¸ót‹
 =árgv[19], *
d a_≤
 =árgv[20], *
mime
 =árgv[21], *
Æbum_¨t
 =árgv[22], *
∑th
 =árgv[24];

708 
d a_buf
[128];

709 c⁄° *
ext
;

710 
°rög_s
 *
°r
 = 
∑s£d_¨gs
->str;

711 
ªt
 = 0;

713 
ªt
 = 
	`gue°_√tw‹k_íabÀ
(
ªq
, 
∑th
);

714 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "∑th: %s,É«bÀ: %d\n", 
∑th
, 
ªt
);

715 i‡(!
ªt
)

722 if–
°r
->
off
 > (°r->
size
 - 8192) )

724 #i‡
MAX_RESPONSE_SIZE
 > 0

725 if–(
°r
->
size
+
DEFAULT_RESP_SIZE
Ë<
MAX_RESPONSE_SIZE
 )

728 
°r
->
d©a
 = 
	`ªÆloc
(°r->d©a, (°r->
size
+
DEFAULT_RESP_SIZE
));

729 if–
°r
->
d©a
 )

731 
°r
->
size
 +
DEFAULT_RESP_SIZE
;

732 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "UPnP SOAPÑesponseÉnlargedÅo %d. [%dÑesults so far]\n",

733 
°r
->
size
, 
∑s£d_¨gs
->
ªtu∫ed
);

737 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "UPnP SOAPÑesponse wasÅoo big,ándÑealloc failed!\n");

740 #i‡
MAX_RESPONSE_SIZE
 > 0

744 
	`DPRINTF
(
E_ERROR
, 
L_HTTP
, "UPnP SOAPÑe•⁄£ cuàsh‹t,ÅÿnŸÉx˚edÅhêmaxÑe•⁄£ sizê[%Œd]!\n", ()
MAX_RESPONSE_SIZE
);

749 
∑s£d_¨gs
->
ªtu∫ed
++;

751 if–
ru¡ime_v¨s
.
roŸ_c⁄èöî
 && 
	`°rcmp
(
∑ª¡
,Ñuntime_vars.root_container) == 0 )

752 
∑ª¡
 = "0";

754 if–
	`°∫cmp
(
˛ass
, "item", 4) == 0 )

756 
uöt32_t
 
d a_Êags
 = 
DLNA_FLAG_DLNA_V1_5
|
DLNA_FLAG_HTTP_STALLING
|
DLNA_FLAG_TM_B
;

757 *
Æt_tôÀ
 = 
NULL
;

759 if–*
mime
 == 'v' )

761 
d a_Êags
 |
DLNA_FLAG_TM_S
;

762 if–
∑s£d_¨gs
->
Êags
 & 
FLAG_MIME_AVI_DIVX
 )

764 if–
	`°rcmp
(
mime
, "video/x-msvideo") == 0 )

766 if–
¸ót‹
 )

767 
	`°r˝y
(
mime
+6, "divx");

769 
	`°r˝y
(
mime
+6, "avi");

772 if–
∑s£d_¨gs
->
Êags
 & 
FLAG_MIME_AVI_AVI
 )

774 if–
	`°rcmp
(
mime
, "video/x-msvideo") == 0 )

776 
	`°r˝y
(
mime
+6, "avi");

779 if–
∑s£d_¨gs
->
˛õ¡
 =
EFªeBox
 && 
d a_≤
 )

781 if–
	`°∫cmp
(
d a_≤
, "AVC_TS", 6) == 0 ||

782 
	`°∫cmp
(
d a_≤
, "MPEG_TS", 7) == 0 )

784 
	`°r˝y
(
mime
+6, "mp2t");

787 if–!(
∑s£d_¨gs
->
Êags
 & 
FLAG_DLNA
) )

789 if–
	`°rcmp
(
mime
+6, "vnd.dlna.mpeg-tts") == 0 )

791 
	`°r˝y
(
mime
+6, "mpeg");

795 if–
∑s£d_¨gs
->
Êags
 & 
FLAG_SAMSUNG
 )

797 if–
	`°rcmp
(
mime
+6, "x-matroska") == 0 )

799 
	`°r˝y
(
mime
+8, "mkv");

803 if–
∑s£d_¨gs
->
˛õ¡
 =
ELGDevi˚
 && (∑s£d_¨gs->
fûãr
 & 
FILTER_RES
) )

805 if–
	`sql_gë_öt_fõld
(
db
, "SELECT ID from CAPTIONS whîêID = '%s'", 
dëaûID
) > 0 )

807 
ªt
 = 
	`a•rötf
(&
Æt_tôÀ
, "%s.", 
tôÀ
);

808 if–
ªt
 > 0 )

809 
tôÀ
 = 
Æt_tôÀ
;

811 
Æt_tôÀ
 = 
NULL
;

815 if–*
mime
 == 'a' )

817 
d a_Êags
 |
DLNA_FLAG_TM_S
;

818 if–
	`°rcmp
(
mime
+6, "x-flac") == 0 )

820 if–
∑s£d_¨gs
->
Êags
 & 
FLAG_MIME_FLAC_FLAC
 )

822 
	`°r˝y
(
mime
+6, "flac");

825 if–
	`°rcmp
(
mime
+6, "x-wav") == 0 )

827 if–
∑s£d_¨gs
->
Êags
 & 
FLAG_MIME_WAV_WAV
 )

829 
	`°r˝y
(
mime
+6, "wav");

834 
d a_Êags
 |
DLNA_FLAG_TM_I
;

836 if–
d a_≤
 )

837 
	`¢¥ötf
(
d a_buf
, (dlna_buf), "DLNA.ORG_PN=%s;"

841 
d a_≤
, 
d a_Êags
, 0);

842 if–
∑s£d_¨gs
->
Êags
 & 
FLAG_DLNA
 )

843 
	`¢¥ötf
(
d a_buf
, (dlna_buf), "DLNA.ORG_OP=01;"

846 
d a_Êags
, 0);

848 
	`°r˝y
(
d a_buf
, "*");

850 
ªt
 = 
	`°rˇtf
(
°r
, "&…;ôem id=\"%s\"Ö¨ítID=\"%s\"Ñe°ri˘ed=\"1\"", 
id
, 
∑ª¡
);

851 if–
ªfID
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_REFID
) ) {

852 
ªt
 = 
	`°rˇtf
(
°r
, "ÑefID=\"%s\"", 
ªfID
);

854 
ªt
 = 
	`°rˇtf
(
°r
, "&gt;"

857 
tôÀ
, 
˛ass
);

858 if–
commít
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_DC_DESCRIPTION
) ) {

859 
ªt
 = 
	`°rˇtf
(
°r
, "&…;dc:des¸ùti⁄&gt;%.384s&…;/dc:des¸ùti⁄&gt;", 
commít
);

861 if–
¸ót‹
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_DC_CREATOR
) ) {

862 
ªt
 = 
	`°rˇtf
(
°r
, "&…;dc:¸ót‹&gt;%s&…;/dc:¸ót‹&gt;", 
¸ót‹
);

864 if–
d©e
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_DC_DATE
) ) {

865 
ªt
 = 
	`°rˇtf
(
°r
, "&…;dc:d©e&gt;%s&…;/dc:d©e&gt;", 
d©e
);

867 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_SEC_DCM_INFO
 ) {

869 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;sec:dcmInfo&gt;CREATIONDATE=0,FOLDER=%s,BM=%d&lt;/sec:dcmInfo&gt;",

870 
tôÀ
, 
	`sql_gë_öt_fõld
(
db
, "SELECT SEC from BOOKMARKS whîêID = '%s'", 
dëaûID
));

872 if–
¨ti°
 ) {

873 if–(*
mime
 ='v'Ë&& (
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ACTOR
) ) {

874 
ªt
 = 
	`°rˇtf
(
°r
, "&…;u≤p:a˘‹&gt;%s&…;/u≤p:a˘‹&gt;", 
¨ti°
);

876 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ARTIST
 ) {

877 
ªt
 = 
	`°rˇtf
(
°r
, "&…;u≤p:¨ti°&gt;%s&…;/u≤p:¨ti°&gt;", 
¨ti°
);

880 if–
Æbum
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ALBUM
) ) {

881 
ªt
 = 
	`°rˇtf
(
°r
, "&…;u≤p:Æbum&gt;%s&…;/u≤p:Æbum&gt;", 
Æbum
);

883 if–
gíª
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_GENRE
) ) {

884 
ªt
 = 
	`°rˇtf
(
°r
, "&…;u≤p:gíª&gt;%s&…;/u≤p:gíª&gt;", 
gíª
);

886 if–
	`°∫cmp
(
id
, 
MUSIC_PLIST_ID
, 
	`°æí
(MUSIC_PLIST_ID)) == 0 ) {

887 
åack
 = 
	`°ºchr
(
id
, '$')+1;

889 if–
åack
 && 
	`©oi
—øckË&& (
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ORIGINALTRACKNUMBER
) ) {

890 
ªt
 = 
	`°rˇtf
(
°r
, "&…;u≤p:‹igöÆTøckNumbî&gt;%s&…;/u≤p:‹igöÆTøckNumbî&gt;", 
åack
);

892 if–
Æbum_¨t
 && 
	`©oi
(album_art) )

895 if–*
mime
 ='v' && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_RES
Ë&& !’as£d_¨gs->
Êags
 & 
FLAG_MS_PFS
) ) {

896 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;resÖrotocolInfo=\"http-get:*:image/jpeg:DLNA.ORG_PN=JPEG_TN\"&gt;"

899 
œn_addr
[
∑s£d_¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
Æbum_¨t
, 
dëaûID
);

900 } if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ALBUMARTURI
 ) {

901 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;upnp:albumArtURI");

902 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ALBUMARTURI_DLNA_PROFILEID
 ) {

903 
ªt
 = 
	`°rˇtf
(
°r
, " dlna:profileID=\"JPEG_TN\" xmlns:dlna=\"urn:schemas-dlna-org:metadata-1-0/\"");

905 
ªt
 = 
	`°rˇtf
(
°r
, "&gt;http://%s:%d/AlbumArt/%s-%s.jpg&lt;/upnp:albumArtURI&gt;",

906 
œn_addr
[
∑s£d_¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
Æbum_¨t
, 
dëaûID
);

909 if–(
∑s£d_¨gs
->
Êags
 & 
FLAG_MS_PFS
Ë&& *
mime
 == 'i' ) {

910 if–
∑s£d_¨gs
->
˛õ¡
 =
EMedüRoom
 && !
Æbum
 )

911 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;upnp:album&gt;%s&lt;/upnp:album&gt;", "[No Keywords]");

914 if–!(
∑s£d_¨gs
->
Êags
 & 
FLAG_RESIZE_THUMBS
Ë&& 
ä
 && 
	`©oi
(tn) ) {

915 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;upnp:albumArtURI&gt;"

918 
œn_addr
[
∑s£d_¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
dëaûID
);

920 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;upnp:albumArtURI&gt;"

923 
œn_addr
[
∑s£d_¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
dëaûID
);

926 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_RES
 )

928 
ext
 = 
	`mime_to_ext
(
mime
);

929 
	`add_ªs
(
size
, 
duøti⁄
, 
bôøã
, 
ßm∂eFªquícy
, 
ƒAudioCh™√ls
,

930 
ªsﬁuti⁄
, 
d a_buf
, 
mime
, 
dëaûID
, 
ext
, 
∑s£d_¨gs
);

931 if–*
mime
 == 'i' )

933 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "ext: %s, d a_≤: %s\n", 
ext
, 
d a_≤
);

935 i‡(
	`°rcmp
(
ext
, "jpg") == 0)

937 
§cw
, 
§ch
;

938 if–
ªsﬁuti⁄
 && (
	`ssˇnf
‘esﬁuti⁄, "%6dx%6d", &
§cw
, &
§ch
) == 2) )

940 if–
§cw
 > 4096 || 
§ch
 > 4096 )

941 
	`add_ªsized_ªs
(
§cw
, 
§ch
, 4096, 4096, "JPEG_LRG", 
dëaûID
, 
∑s£d_¨gs
);

942 if–
§cw
 > 1024 || 
§ch
 > 768 )

943 
	`add_ªsized_ªs
(
§cw
, 
§ch
, 1024, 768, "JPEG_MED", 
dëaûID
, 
∑s£d_¨gs
);

944 if–
§cw
 > 640 || 
§ch
 > 480 )

945 
	`add_ªsized_ªs
(
§cw
, 
§ch
, 640, 480, "JPEG_SM", 
dëaûID
, 
∑s£d_¨gs
);

946 i‡(
§cw
 > 160 || 
§ch
 > 160)

947 
	`add_ªsized_ªs
(
§cw
, 
§ch
, 160, 160, "JPEG_TN", 
dëaûID
, 
∑s£d_¨gs
);

948 i‡(
§cw
 > 120 || 
§ch
 > 120)

949 
	`add_ªsized_ªs
(
§cw
, 
§ch
, 120, 120, "JPEG_LRG_ICO", 
dëaûID
, 
∑s£d_¨gs
);

950 i‡(
§cw
 > 48 || 
§ch
 > 48)

951 
	`add_ªsized_ªs
(
§cw
, 
§ch
, 48, 48, "JPEG_SM_ICO", 
dëaûID
, 
∑s£d_¨gs
);

953 if–!(
∑s£d_¨gs
->
Êags
 & 
FLAG_RESIZE_THUMBS
Ë&& 
ä
 && 
	`©oi
(tn) ) {

954 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;resÖrotocolInfo=\"http-get:*:%s:%s\"&gt;"

957 
mime
, "DLNA.ORG_PN=JPEG_TN;DLNA.ORG_CI=1", 
œn_addr
[
∑s£d_¨gs
->
iÁ˚
].
°r
,

958 
ru¡ime_v¨s
.
p‹t
, 
dëaûID
);

962 
	`add_ªsized_ªs
(
§cw
, 
§ch
, 160, 160, "JPEG_TN", 
dëaûID
, 
∑s£d_¨gs
);

966 if–*
mime
 == 'v' )

968  
∑s£d_¨gs
->
˛õ¡
 ) {

969 
EToshibaTV
:

970 if–
d a_≤
 &&

971 (
	`°∫cmp
(
d a_≤
, "MPEG_TS_HD_NA", 13) == 0 ||

972 
	`°∫cmp
(
d a_≤
, "MPEG_TS_SD_NA", 13) == 0 ||

973 
	`°∫cmp
(
d a_≤
, "AVC_TS_MP_HD_AC3", 16) == 0 ||

974 
	`°∫cmp
(
d a_≤
, "AVC_TS_HP_HD_AC3", 16) == 0))

976 
	`•rötf
(
d a_buf
, "DLNA.ORG_PN=%s;DLNA.ORG_OP=01;DLNA.ORG_CI=0", "MPEG_PS_NTSC");

977 
	`add_ªs
(
size
, 
duøti⁄
, 
bôøã
, 
ßm∂eFªquícy
, 
ƒAudioCh™√ls
,

978 
ªsﬁuti⁄
, 
d a_buf
, 
mime
, 
dëaûID
, 
ext
, 
∑s£d_¨gs
);

981 
ES⁄yBDP
:

982 if–
d a_≤
 &&

983 (
	`°∫cmp
(
d a_≤
, "AVC_TS", 6) == 0 ||

984 
	`°∫cmp
(
d a_≤
, "MPEG_TS", 7) == 0) )

986 if–
	`°∫cmp
(
d a_≤
, "MPEG_TS_SD_NA", 13) != 0 )

988 
	`•rötf
(
d a_buf
, "DLNA.ORG_PN=%s;DLNA.ORG_OP=01;DLNA.ORG_CI=0", "MPEG_TS_SD_NA");

989 
	`add_ªs
(
size
, 
duøti⁄
, 
bôøã
, 
ßm∂eFªquícy
, 
ƒAudioCh™√ls
,

990 
ªsﬁuti⁄
, 
d a_buf
, 
mime
, 
dëaûID
, 
ext
, 
∑s£d_¨gs
);

992 if–
	`°∫cmp
(
d a_≤
, "MPEG_TS_SD_EU", 13) != 0 )

994 
	`•rötf
(
d a_buf
, "DLNA.ORG_PN=%s;DLNA.ORG_OP=01;DLNA.ORG_CI=0", "MPEG_TS_SD_EU");

995 
	`add_ªs
(
size
, 
duøti⁄
, 
bôøã
, 
ßm∂eFªquícy
, 
ƒAudioCh™√ls
,

996 
ªsﬁuti⁄
, 
d a_buf
, 
mime
, 
dëaûID
, 
ext
, 
∑s£d_¨gs
);

999 if–(
d a_≤
 &&

1000 (
	`°∫cmp
(
d a_≤
, "AVC_MP4", 7) == 0 ||

1001 
	`°∫cmp
(
d a_≤
, "MPEG4_P2_MP4", 12) == 0)) ||

1002 
	`°rcmp
(
mime
+6, "x-matroska") == 0 ||

1003 
	`°rcmp
(
mime
+6, "x-msvideo") == 0 ||

1004 
	`°rcmp
(
mime
+6, "mpeg") == 0 )

1006 
	`°r˝y
(
mime
+6, "avi");

1007 if–!
d a_≤
 || 
	`°∫cmp
(dlna_pn, "MPEG_PS_NTSC", 12) != 0 )

1009 
	`•rötf
(
d a_buf
, "DLNA.ORG_PN=%s;DLNA.ORG_OP=01;DLNA.ORG_CI=0", "MPEG_PS_NTSC");

1010 
	`add_ªs
(
size
, 
duøti⁄
, 
bôøã
, 
ßm∂eFªquícy
, 
ƒAudioCh™√ls
,

1011 
ªsﬁuti⁄
, 
d a_buf
, 
mime
, 
dëaûID
, 
ext
, 
∑s£d_¨gs
);

1013 if–!
d a_≤
 || 
	`°∫cmp
(dlna_pn, "MPEG_PS_PAL", 11) != 0 )

1015 
	`•rötf
(
d a_buf
, "DLNA.ORG_PN=%s;DLNA.ORG_OP=01;DLNA.ORG_CI=0", "MPEG_PS_PAL");

1016 
	`add_ªs
(
size
, 
duøti⁄
, 
bôøã
, 
ßm∂eFªquícy
, 
ƒAudioCh™√ls
,

1017 
ªsﬁuti⁄
, 
d a_buf
, 
mime
, 
dëaûID
, 
ext
, 
∑s£d_¨gs
);

1021 
ES⁄yBøvü
:

1024 if–
d a_≤
 &&

1025 (
	`°∫cmp
(
d a_≤
, "AVC_TS_MP_SD_AC3", 16) == 0 ||

1026 
	`°∫cmp
(
d a_≤
, "AVC_TS_MP_HD_AC3", 16) == 0 ||

1027 
	`°∫cmp
(
d a_≤
, "AVC_TS_HP_HD_AC3", 16) == 0))

1029 
	`•rötf
(
d a_buf
, "DLNA.ORG_PN=AVC_TS_HD_50_AC3%s", 
d a_≤
 + 16);

1030 
	`add_ªs
(
size
, 
duøti⁄
, 
bôøã
, 
ßm∂eFªquícy
, 
ƒAudioCh™√ls
,

1031 
ªsﬁuti⁄
, 
d a_buf
, 
mime
, 
dëaûID
, 
ext
, 
∑s£d_¨gs
);

1034 
ELGDevi˚
:

1035 if–
Æt_tôÀ
 )

1037 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;resÖrotocolInfo=\"http-get:*:text/srt:*\"&gt;"

1040 
œn_addr
[
∑s£d_¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
dëaûID
);

1041 
	`‰ì
(
Æt_tôÀ
);

1044 
ESamsungSîõsC
:

1046 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_SEC_CAPTION_INFO_EX
 )

1048 if–
	`sql_gë_öt_fõld
(
db
, "SELECT ID from CAPTIONS whîêID = '%s'", 
dëaûID
) > 0 )

1050 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;sec:CaptionInfoEx sec:type=\"srt\"&gt;"

1053 
œn_addr
[
∑s£d_¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
dëaûID
);

1060 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;/item&gt;");

1062 if–
	`°∫cmp
(
˛ass
, "container", 9) == 0 )

1064 
ªt
 = 
	`°rˇtf
(
°r
, "&…;c⁄èöî id=\"%s\"Ö¨ítID=\"%s\"Ñe°ri˘ed=\"1\" ", 
id
, 
∑ª¡
);

1065 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_CHILDCOUNT
 )

1067 
chûdªn
;

1068 
ªt
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT cou¡(*Ë‰om OBJECTS whîêPARENT_ID = '%s';", 
id
);

1069 
chûdªn
 = (
ªt
 > 0) ?Ñet : 0;

1070 
ªt
 = 
	`°rˇtf
(
°r
, "chûdCou¡=\"%d\"", 
chûdªn
);

1073 if–(
∑s£d_¨gs
->
ªque°ed
 =1Ë&& (
	`°rcmp
(
id
, "0") == 0) )

1075 
ªt
 = 
	`°rˇtf
(
°r
, " searchable=\"1\"");

1076 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_SEARCHCLASS
 )

1078 
ªt
 = 
	`°rˇtf
(
°r
, "&gt;"

1084 
ªt
 = 
	`°rˇtf
(
°r
, "&gt;"

1087 
tôÀ
, 
˛ass
);

1088 if–(
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_STORAGEUSED
Ë&& 
	`°rcmp
(
˛ass
+10, "storageFolder") == 0 ) {

1090 
ªt
 = 
	`°rˇtf
(
°r
, "&…;u≤p:°‹ageU£d&gt;%s&…;/u≤p:°‹ageU£d&gt;", (
size
 ? size : "-1"));

1092 if–
¸ót‹
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_DC_CREATOR
) ) {

1093 
ªt
 = 
	`°rˇtf
(
°r
, "&…;dc:¸ót‹&gt;%s&…;/dc:¸ót‹&gt;", 
¸ót‹
);

1095 if–
gíª
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_GENRE
) ) {

1096 
ªt
 = 
	`°rˇtf
(
°r
, "&…;u≤p:gíª&gt;%s&…;/u≤p:gíª&gt;", 
gíª
);

1098 if–
¨ti°
 && (
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ARTIST
) ) {

1099 
ªt
 = 
	`°rˇtf
(
°r
, "&…;u≤p:¨ti°&gt;%s&…;/u≤p:¨ti°&gt;", 
¨ti°
);

1101 if–
Æbum_¨t
 && 
	`©oi
◊lbum_¨tË&& (
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ALBUMARTURI
) ) {

1102 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;upnp:albumArtURI ");

1103 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_UPNP_ALBUMARTURI_DLNA_PROFILEID
 ) {

1104 
ªt
 = 
	`°rˇtf
(
°r
, "dlna:profileID=\"JPEG_TN\" xmlns:dlna=\"urn:schemas-dlna-org:metadata-1-0/\"");

1106 
ªt
 = 
	`°rˇtf
(
°r
, "&gt;http://%s:%d/AlbumArt/%s-%s.jpg&lt;/upnp:albumArtURI&gt;",

1107 
œn_addr
[
∑s£d_¨gs
->
iÁ˚
].
°r
, 
ru¡ime_v¨s
.
p‹t
, 
Æbum_¨t
, 
dëaûID
);

1109 if–
∑s£d_¨gs
->
fûãr
 & 
FILTER_AV_MEDIA_CLASS
 ) {

1110 
˛ass
;

1111 if–
	`°∫cmp
(
id
, 
MUSIC_ID
, (MUSIC_ID)) == 0 )

1112 
˛ass
 = 'M';

1113 if–
	`°∫cmp
(
id
, 
VIDEO_ID
, (VIDEO_ID)) == 0 )

1114 
˛ass
 = 'V';

1115 if–
	`°∫cmp
(
id
, 
IMAGE_ID
, (IMAGE_ID)) == 0 )

1116 
˛ass
 = 'P';

1118 
˛ass
 = 0;

1119 if–
˛ass
 )

1120 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;av:mediaClass xmlns:av=\"urn:schemas-sony-com:av\"&gt;"

1121 "%c&…;/av:medüCœss&gt;", 
˛ass
);

1123 
ªt
 = 
	`°rˇtf
(
°r
, "&lt;/container&gt;");

1127 
	}
}

1130 
	$Brow£C⁄ã¡Dúe˘‹y
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

1132 c⁄° 
ª•0
[] =

1137 
CONTENT_DIRECTORY_SCHEMAS
;

1138 *
zEºMsg
 = 
NULL
;

1139 *
sql
, *
±r
;

1140 
Re•⁄£
 
¨gs
;

1141 
°rög_s
 
°r
;

1142 
tŸÆM©ches
;

1143 
ªt
;

1144 *
Obje˘ID
, *
Fûãr
, *
Brow£Fœg
, *
S‹tCrôîü
;

1145 *
‹dîBy
 = 
NULL
;

1146 
NameVÆueP¨£rD©a
 
d©a
;

1147 
Reque°edCou¡
 = 0;

1148 
SèπögIndex
 = 0;

1149 
Êag
 = 0;

1151 
	`mem£t
(&
¨gs
, 0, (args));

1152 
	`mem£t
(&
°r
, 0, (str));

1154 
	`P¨£NameVÆue
(
h
->
ªq_buf
 + h->
ªq_c⁄ã¡off
, h->
ªq_c⁄ã¡Àn
, &
d©a
, 0);

1156 
Obje˘ID
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "ObjectID");

1157 
Fûãr
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "Filter");

1158 
Brow£Fœg
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "BrowseFlag");

1159 
S‹tCrôîü
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "SortCriteria");

1161 if–(
±r
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "RequestedCount")) )

1162 
Reque°edCou¡
 = 
	`©oi
(
±r
);

1163 if–
Reque°edCou¡
 < 0 )

1165 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

1166 
Êag
 = 1;

1167 
brow£_îr‹
;

1169 if–!
Reque°edCou¡
 )

1170 
Reque°edCou¡
 = -1;

1171 if–(
±r
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "StartingIndex")) )

1172 
SèπögIndex
 = 
	`©oi
(
±r
);

1173 if–
SèπögIndex
 < 0 )

1175 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

1176 
Êag
 = 1;

1177 
brow£_îr‹
;

1179 if–!
Brow£Fœg
 || (
	`°rcmp
(BrowseFlag, "BrowseDirectChildren") && strcmp(BrowseFlag, "BrowseMetadata")) )

1181 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

1182 
Êag
 = 1;

1183 
brow£_îr‹
;

1185 if–!
Obje˘ID
 && !(Obje˘ID = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "ContainerID")) )

1187 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

1188 
Êag
 = 1;

1189 
brow£_îr‹
;

1192 
°r
.
d©a
 = 
	`mÆloc
(
DEFAULT_RESP_SIZE
);

1193 
°r
.
size
 = 
DEFAULT_RESP_SIZE
;

1194 
°r
.
off
 = 
	`•rötf
(°r.
d©a
, "%s", 
ª•0
);

1196 
¨gs
.
iÁ˚
 = 
h
->iface;

1197 
¨gs
.
fûãr
 = 
	`£t_fûãr_Êags
(
Fûãr
, 
h
);

1198 if–
¨gs
.
fûãr
 & 
FILTER_DLNA_NAMESPACE
 )

1199 
ªt
 = 
	`°rˇtf
(&
°r
, 
DLNA_NAMESPACE
);

1200 if–
¨gs
.
fûãr
 & (
FILTER_PV_SUBTITLE_FILE_TYPE
|
FILTER_PV_SUBTITLE_FILE_URI
) )

1201 
ªt
 = 
	`°rˇtf
(&
°r
, 
PV_NAMESPACE
);

1202 
	`°rˇtf
(&
°r
, "&gt;\n");

1204 
¨gs
.
ªq
 = 
h
;

1205 
¨gs
.
ªtu∫ed
 = 0;

1206 
¨gs
.
ªque°ed
 = 
Reque°edCou¡
;

1207 
¨gs
.
˛õ¡
 = 
˛õ¡_ty≥s
[
h
->
ªq_˛õ¡
].
ty≥
;

1208 
¨gs
.
Êags
 = 
˛õ¡_ty≥s
[
h
->
ªq_˛õ¡
].flags;

1209 
¨gs
.
°r
 = &str;

1210 if–
¨gs
.
Êags
 & 
FLAG_MS_PFS
 )

1212 if–!
	`°rchr
(
Obje˘ID
, '$'Ë&& (
	`°rcmp
(ObjectID, "0") != 0) )

1214 
±r
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT OBJECT_ID from OBJECTS"

1216 "('"
MUSIC_ID
"$%q', '"
VIDEO_ID
"$%q', '"
IMAGE_ID
"$%q')",

1217 
Obje˘ID
, ObjectID, ObjectID);

1218 if–
±r
 )

1220 
Obje˘ID
 = 
±r
;

1221 
¨gs
.
Êags
 |
FLAG_FREE_OBJECT_ID
;

1225 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Browsing ContentDirectory:\n"

1232 
Obje˘ID
, 
Reque°edCou¡
, 
SèπögIndex
,

1233 
Brow£Fœg
, 
Fûãr
, 
S‹tCrôîü
);

1235 if–
	`°rcmp
(
Obje˘ID
, "0") == 0 )

1237 
¨gs
.
Êags
 |
FLAG_ROOT_CONTAINER
;

1238 if–
ru¡ime_v¨s
.
roŸ_c⁄èöî
 )

1240 if–(
¨gs
.
Êags
 & 
FLAG_AUDIO_ONLY
Ë&& (
	`°rcmp
(
ru¡ime_v¨s
.
roŸ_c⁄èöî
, 
BROWSEDIR_ID
) == 0) )

1241 
Obje˘ID
 = 
MUSIC_DIR_ID
;

1243 
Obje˘ID
 = 
ru¡ime_v¨s
.
roŸ_c⁄èöî
;

1247 if–
¨gs
.
Êags
 & 
FLAG_AUDIO_ONLY
 )

1248 
Obje˘ID
 = 
MUSIC_ID
;

1252 if–
	`°rcmp
(
Brow£Fœg
+6, "Metadata") == 0 )

1254 
¨gs
.
ªque°ed
 = 1;

1255 
sql
 = 
	`sqlôe3_m¥ötf
("SELECT %s, " 
COLUMNS


1258 (
¨gs
.
Êags
 & 
FLAG_ROOT_CONTAINER
) ? "0, -1" : "o.OBJECT_ID, o.PARENT_ID",

1259 
Obje˘ID
);

1260 
ªt
 = 
	`sqlôe3_exec
(
db
, 
sql
, 
ˇŒback
, (*Ë&
¨gs
, &
zEºMsg
);

1261 
tŸÆM©ches
 = 
¨gs
.
ªtu∫ed
;

1265 
ªt
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT cou¡(*Ë‰om OBJECTS whîêPARENT_ID = '%q'", 
Obje˘ID
);

1266 
tŸÆM©ches
 = (
ªt
 > 0) ?Ñet : 0;

1267 
ªt
 = 0;

1268 if–
S‹tCrôîü
 )

1270 #ifde‡
__•¨c__


1271 if–
tŸÆM©ches
 < 10000 )

1273 
‹dîBy
 = 
	`∑r£_s‹t_¸ôîü
(
S‹tCrôîü
, &
ªt
);

1277 if–
	`°∫cmp
(
Obje˘ID
, 
MUSIC_PLIST_ID
, 
	`°æí
(MUSIC_PLIST_ID)) == 0 )

1279 if–
	`°rcmp
(
Obje˘ID
, 
MUSIC_PLIST_ID
) == 0 )

1280 
ªt
 = 
	`a•rötf
(&
‹dîBy
, "order by d.TITLE");

1282 
ªt
 = 
	`a•rötf
(&
‹dîBy
, "order byÜength(OBJECT_ID), OBJECT_ID");

1284 if–
¨gs
.
Êags
 & 
FLAG_FORCE_SORT
 )

1286 #ifde‡
__•¨c__


1287 if–
tŸÆM©ches
 < 10000 )

1289 
ªt
 = 
	`a•rötf
(&
‹dîBy
, "order by o.CLASS, d.DISC, d.TRACK, d.TITLE");

1291 if–
ªt
 == -1 )

1293 
‹dîBy
 = 
NULL
;

1294 
ªt
 = 0;

1298 if–
ªt
 < 0 && ((
¨gs
.
Êags
 & 
FLAG_DLNA
Ë|| 
	`GETFLAG
(
DLNA_STRICT_MASK
)) )

1300 
	`SﬂpEº‹
(
h
, 709, "Unsupported or invalid sort criteria");

1301 
brow£_îr‹
;

1304 
sql
 = 
	`sqlôe3_m¥ötf
–
SELECT_COLUMNS


1307 
Obje˘ID
, 
‹dîBy
, 
SèπögIndex
, 
Reque°edCou¡
);

1308 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Brow£ SQL: %s\n", 
sql
);

1309 
ªt
 = 
	`sqlôe3_exec
(
db
, 
sql
, 
ˇŒback
, (*Ë&
¨gs
, &
zEºMsg
);

1311 if–(
ªt
 !
SQLITE_OK
Ë&& (
zEºMsg
 !
NULL
) )

1313 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "SQLÉº‹: %s\nBAD SQL: %s\n", 
zEºMsg
, 
sql
);

1314 
	`sqlôe3_‰ì
(
zEºMsg
);

1315 
	`SﬂpEº‹
(
h
, 709, "Unsupported or invalid sort criteria");

1316 
brow£_îr‹
;

1318 
	`sqlôe3_‰ì
(
sql
);

1320 if–!
tŸÆM©ches
 )

1322 
ªt
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT cou¡(*Ë‰om OBJECTS whîêOBJECT_ID = '%q'", 
Obje˘ID
);

1323 if–
ªt
 <= 0 )

1325 
	`SﬂpEº‹
(
h
, 701, "No such objectÉrror");

1326 
brow£_îr‹
;

1329 
ªt
 = 
	`°rˇtf
(&
°r
, "&lt;/DIDL-Lite&gt;</Result>\n"

1334 
¨gs
.
ªtu∫ed
, 
tŸÆM©ches
, 
upd©eID
);

1335 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
°r
.
d©a
, så.
off
);

1336 
brow£_îr‹
:

1337 
	`CÀ¨NameVÆueLi°
(&
d©a
);

1339 if–
Êag
 == 1 )

1342 if–
¨gs
.
Êags
 & 
FLAG_FREE_OBJECT_ID
 )

1343 
	`sqlôe3_‰ì
(
Obje˘ID
);

1345 if–
‹dîBy
 )

1346 
	`‰ì
(
‹dîBy
);

1348 if–
°r
.
d©a
 )

1349 
	`‰ì
(
°r
.
d©a
);

1350 
	}
}

1352 
ölöe
 

1353 
	$ch¨ˇt
(
°rög_s
 *
°r
, 
c
)

1355 i‡(
°r
->
size
 <°r->
off
)

1357 
°r
->
d©a
[°r->
size
-1] = '\0';

1360 
°r
->
d©a
[°r->
off
] = 
c
;

1361 
°r
->
off
 += 1;

1362 
	}
}

1364 
ölöe
 *

1365 
	$∑r£_£¨ch_¸ôîü
(c⁄° *
°r
)

1367 
°rög_s
 
¸ôîü
;

1368 
Àn
;

1369 
lôîÆ
 = 0, 
like
 = 0;

1370 c⁄° *
s
;

1372 i‡(!
°r
)

1373  
	`°rdup
("1 = 1");

1375 
Àn
 = 
	`°æí
(
°r
) + 32;

1376 
¸ôîü
.
d©a
 = 
	`mÆloc
(
Àn
);

1377 
¸ôîü
.
size
 = 
Àn
;

1378 
¸ôîü
.
off
 = 0;

1380 
s
 = 
°r
;

1382 
	`is•a˚
(*
s
))

1383 
s
++;

1385 *
s
)

1387 i‡(
lôîÆ
)

1389 *
s
) {

1391 i‡(
	`°∫cmp
(
s
, "&quot;", 6) == 0)

1392 
s
 += 5;

1393 i‡(
	`°∫cmp
(
s
, "&apos;", 6) == 0)

1395 
	`°rˇtf
(&
¸ôîü
, "'");

1396 
s
 += 6;

1402 
lôîÆ
 = 0;

1403 i‡(
like
)

1405 
	`ch¨ˇt
(&
¸ôîü
, '%');

1406 
like
--;

1408 
	`ch¨ˇt
(&
¸ôîü
, '"');

1411 i‡(
	`°∫cmp
(
s
, "\\&quot;", 7) == 0)

1413 
	`°rˇtf
(&
¸ôîü
, "&amp;quot;");

1414 
s
 += 7;

1419 i‡(
	`°∫cmp
(
s
, "object.", 7) == 0)

1420 
s
 += 7;

1422 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1428 *
s
) {

1430 i‡(
	`°∫cmp
(
s
, "\\&quot;", 7) == 0)

1432 
	`°rˇtf
(&
¸ôîü
, "&amp;quot;");

1433 
s
 += 7;

1437 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1440 
lôîÆ
 = 1;

1441 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1442 i‡(
like
 == 2)

1444 
	`ch¨ˇt
(&
¸ôîü
, '%');

1445 
like
--;

1449 i‡(
	`°∫cmp
(
s
, "&quot;", 6) == 0)

1451 
lôîÆ
 = 1;

1452 
	`°rˇtf
(&
¸ôîü
, "\"");

1453 i‡(
like
 == 2)

1455 
	`ch¨ˇt
(&
¸ôîü
, '%');

1456 
like
--;

1458 
s
 += 5;

1460 i‡(
	`°∫cmp
(
s
, "&apos;", 6) == 0)

1462 
	`°rˇtf
(&
¸ôîü
, "'");

1463 
s
 += 5;

1465 i‡(
	`°∫cmp
(
s
, "&lt;", 4) == 0)

1467 
	`°rˇtf
(&
¸ôîü
, "<");

1468 
s
 += 3;

1470 i‡(
	`°∫cmp
(
s
, "&gt;", 4) == 0)

1472 
	`°rˇtf
(&
¸ôîü
, ">");

1473 
s
 += 3;

1476 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1479 i‡(
	`°∫cmp
(
s
, "@refID", 6) == 0)

1481 
	`°rˇtf
(&
¸ôîü
, "REF_ID");

1482 
s
 += 6;

1485 i‡(
	`°∫cmp
(
s
, "@id", 3) == 0)

1487 
	`°rˇtf
(&
¸ôîü
, "OBJECT_ID");

1488 
s
 += 3;

1492 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1495 i‡(
	`°∫cmp
(
s
, "contains", 8) == 0)

1497 
	`°rˇtf
(&
¸ôîü
, "like");

1498 
s
 += 8;

1499 
like
 = 2;

1503 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1506 i‡(
	`°∫cmp
(
s
, "derivedfrom", 11) == 0)

1508 
	`°rˇtf
(&
¸ôîü
, "like");

1509 
s
 += 11;

1510 
like
 = 1;

1513 i‡(
	`°∫cmp
(
s
, "dc:date", 7) == 0)

1515 
	`°rˇtf
(&
¸ôîü
, "d.DATE");

1516 
s
 += 7;

1519 i‡(
	`°∫cmp
(
s
, "dc:title", 8) == 0)

1521 
	`°rˇtf
(&
¸ôîü
, "d.TITLE");

1522 
s
 += 8;

1525 i‡(
	`°∫cmp
(
s
, "dc:creator", 10) == 0)

1527 
	`°rˇtf
(&
¸ôîü
, "d.CREATOR");

1528 
s
 += 10;

1532 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1535 i‡(
	`°∫cmp
(
s
, "exists", 6) == 0)

1537 
s
 += 6;

1538 
	`is•a˚
(*
s
))

1539 
s
++;

1540 i‡(
	`°∫cmp
(
s
, "true", 4) == 0)

1542 
	`°rˇtf
(&
¸ôîü
, "isÇot NULL");

1543 
s
 += 3;

1545 i‡(
	`°∫cmp
(
s
, "false", 5) == 0)

1547 
	`°rˇtf
(&
¸ôîü
, "is NULL");

1548 
s
 += 4;

1552 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1555 i‡(
	`°∫cmp
(
s
, "upnp:class", 10) == 0)

1557 
	`°rˇtf
(&
¸ôîü
, "o.CLASS");

1558 
s
 += 10;

1561 i‡(
	`°∫cmp
(
s
, "upnp:actor", 10) == 0)

1563 
	`°rˇtf
(&
¸ôîü
, "d.ARTIST");

1564 
s
 += 10;

1567 i‡(
	`°∫cmp
(
s
, "upnp:artist", 11) == 0)

1569 
	`°rˇtf
(&
¸ôîü
, "d.ARTIST");

1570 
s
 += 11;

1573 i‡(
	`°∫cmp
(
s
, "upnp:album", 10) == 0)

1575 
	`°rˇtf
(&
¸ôîü
, "d.ALBUM");

1576 
s
 += 10;

1579 i‡(
	`°∫cmp
(
s
, "upnp:genre", 10) == 0)

1581 
	`°rˇtf
(&
¸ôîü
, "d.GENRE");

1582 
s
 += 10;

1586 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1589 
	`ch¨ˇt
(&
¸ôîü
, *
s
);

1593 
s
++;

1595 
	`ch¨ˇt
(&
¸ôîü
, '\0');

1597  
¸ôîü
.
d©a
;

1598 
	}
}

1601 
	$SórchC⁄ã¡Dúe˘‹y
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

1603 c⁄° 
ª•0
[] =

1608 
CONTENT_DIRECTORY_SCHEMAS
;

1609 *
zEºMsg
 = 
NULL
;

1610 *
sql
, *
±r
;

1611 
Re•⁄£
 
¨gs
;

1612 
°rög_s
 
°r
;

1613 
tŸÆM©ches
;

1614 
ªt
;

1615 *
C⁄èöîID
, *
Fûãr
, *
SórchCrôîü
, *
S‹tCrôîü
;

1616 *
å™sCrôîü
 = 
NULL
;

1617 *
‹dîBy
 = 
NULL
;

1618 
groupBy
[] = "group by DETAIL_ID";

1619 
NameVÆueP¨£rD©a
 
d©a
;

1620 
Reque°edCou¡
 = 0;

1621 
SèπögIndex
 = 0;

1623 
	`mem£t
(&
¨gs
, 0, (args));

1624 
	`mem£t
(&
°r
, 0, (str));

1626 
	`P¨£NameVÆue
(
h
->
ªq_buf
 + h->
ªq_c⁄ã¡off
, h->
ªq_c⁄ã¡Àn
, &
d©a
, 0);

1628 
C⁄èöîID
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "ContainerID");

1629 
Fûãr
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "Filter");

1630 
SórchCrôîü
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "SearchCriteria");

1631 
S‹tCrôîü
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "SortCriteria");

1633 if–(
±r
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "RequestedCount")) )

1634 
Reque°edCou¡
 = 
	`©oi
(
±r
);

1635 if–!
Reque°edCou¡
 )

1636 
Reque°edCou¡
 = -1;

1637 if–(
±r
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "StartingIndex")) )

1638 
SèπögIndex
 = 
	`©oi
(
±r
);

1639 if–!
C⁄èöîID
 )

1641 if–!(
C⁄èöîID
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "ObjectID")) )

1643 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

1644 
£¨ch_îr‹
;

1648 
°r
.
d©a
 = 
	`mÆloc
(
DEFAULT_RESP_SIZE
);

1649 
°r
.
size
 = 
DEFAULT_RESP_SIZE
;

1650 
°r
.
off
 = 
	`•rötf
(°r.
d©a
, "%s", 
ª•0
);

1652 
¨gs
.
iÁ˚
 = 
h
->iface;

1653 
¨gs
.
fûãr
 = 
	`£t_fûãr_Êags
(
Fûãr
, 
h
);

1654 if–
¨gs
.
fûãr
 & 
FILTER_DLNA_NAMESPACE
 )

1656 
ªt
 = 
	`°rˇtf
(&
°r
, 
DLNA_NAMESPACE
);

1658 
	`°rˇtf
(&
°r
, "&gt;\n");

1660 
¨gs
.
ªq
 = 
h
;

1661 
¨gs
.
ªtu∫ed
 = 0;

1662 
¨gs
.
ªque°ed
 = 
Reque°edCou¡
;

1663 
¨gs
.
˛õ¡
 = 
˛õ¡_ty≥s
[
h
->
ªq_˛õ¡
].
ty≥
;

1664 
¨gs
.
Êags
 = 
˛õ¡_ty≥s
[
h
->
ªq_˛õ¡
].flags;

1665 
¨gs
.
°r
 = &str;

1666 if–
¨gs
.
Êags
 & 
FLAG_MS_PFS
 )

1668 if–!
	`°rchr
(
C⁄èöîID
, '$'Ë&& (
	`°rcmp
(ContainerID, "0") != 0) )

1670 
±r
 = 
	`sql_gë_ãxt_fõld
(
db
, "SELECT OBJECT_ID from OBJECTS"

1672 "('"
MUSIC_ID
"$%q', '"
VIDEO_ID
"$%q', '"
IMAGE_ID
"$%q')",

1673 
C⁄èöîID
, ContainerID, ContainerID);

1674 if–
±r
 )

1676 
C⁄èöîID
 = 
±r
;

1677 
¨gs
.
Êags
 |
FLAG_FREE_OBJECT_ID
;

1681 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Searching ContentDirectory:\n"

1688 
C⁄èöîID
, 
Reque°edCou¡
, 
SèπögIndex
,

1689 
SórchCrôîü
, 
Fûãr
, 
S‹tCrôîü
);

1691 if–
	`°rcmp
(
C⁄èöîID
, "0") == 0 )

1692 *
C⁄èöîID
 = '*';

1693 if–
	`°rcmp
(
C⁄èöîID
, 
MUSIC_ALL_ID
) == 0 )

1694 
groupBy
[0] = '\0';

1696 
å™sCrôîü
 = 
	`∑r£_£¨ch_¸ôîü
(
SórchCrôîü
);

1697 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Tøn¶©ed SórchCrôîü: %s\n", 
å™sCrôîü
);

1699 
tŸÆM©ches
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT (select count(distinct DETAIL_ID)"

1705 
C⁄èöîID
, 
å™sCrôîü
, ContainerID,ÅransCriteria);

1706 if–
tŸÆM©ches
 < 0 )

1709 
	`SﬂpEº‹
(
h
, 708, "Unsupported or invalid search criteria");

1710 
£¨ch_îr‹
;

1713 if–!
tŸÆM©ches
 )

1715 
ªt
 = 
	`sql_gë_öt_fõld
(
db
, "SELECT count(*) from OBJECTS where OBJECT_ID = '%q'",

1716 !
	`°rcmp
(
C⁄èöîID
, "*")?"0":ContainerID);

1717 if–
ªt
 <= 0 )

1719 
	`SﬂpEº‹
(
h
, 710, "No such container");

1720 
£¨ch_îr‹
;

1723 #ifde‡
__•¨c__


1724 
ªt
 = 0;

1725 if–
tŸÆM©ches
 < 10000 )

1727 
‹dîBy
 = 
	`∑r£_s‹t_¸ôîü
(
S‹tCrôîü
, &
ªt
);

1729 if–
ªt
 < 0 && ((
¨gs
.
Êags
 & 
FLAG_DLNA
Ë|| 
	`GETFLAG
(
DLNA_STRICT_MASK
)) )

1731 
	`SﬂpEº‹
(
h
, 709, "Unsupported or invalid sort criteria");

1732 
£¨ch_îr‹
;

1735 
sql
 = 
	`sqlôe3_m¥ötf
–
SELECT_COLUMNS


1740 
C⁄èöîID
, 
å™sCrôîü
, 
groupBy
,

1741 (*
C⁄èöîID
 ='*'Ë? 
NULL
 :

1742 
	`sqlôe3_m¥ötf
("UNION ALL " 
SELECT_COLUMNS


1744 " whîêOBJECT_ID = '%q'ánd (%sË", 
C⁄èöîID
, 
å™sCrôîü
),

1745 
‹dîBy
, 
SèπögIndex
, 
Reque°edCou¡
);

1746 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "Sórch SQL: %s\n", 
sql
);

1747 
ªt
 = 
	`sqlôe3_exec
(
db
, 
sql
, 
ˇŒback
, (*Ë&
¨gs
, &
zEºMsg
);

1748 if–(
ªt
 !
SQLITE_OK
Ë&& (
zEºMsg
 !
NULL
) )

1750 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "SQLÉº‹: %s\nBAD SQL: %s\n", 
zEºMsg
, 
sql
);

1751 
	`sqlôe3_‰ì
(
zEºMsg
);

1753 
	`sqlôe3_‰ì
(
sql
);

1754 
ªt
 = 
	`°rˇtf
(&
°r
, "&lt;/DIDL-Lite&gt;</Result>\n"

1759 
¨gs
.
ªtu∫ed
, 
tŸÆM©ches
, 
upd©eID
);

1760 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
°r
.
d©a
, så.
off
);

1762 
£¨ch_îr‹
:

1763 
	`CÀ¨NameVÆueLi°
(&
d©a
);

1765 if–
¨gs
.
Êags
 & 
FLAG_FREE_OBJECT_ID
 )

1766 
	`sqlôe3_‰ì
(
C⁄èöîID
);

1768 if–
‹dîBy
 )

1769 
	`‰ì
(
‹dîBy
);

1771 if–
å™sCrôîü
 )

1772 
	`‰ì
(
å™sCrôîü
);

1774 if–
°r
.
d©a
 )

1775 
	`‰ì
(
°r
.
d©a
);

1776 
	}
}

1787 
	$QuîySèãV¨übÀ
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

1789 c⁄° 
ª•
[] =

1795 
body
[512];

1796 
NameVÆueP¨£rD©a
 
d©a
;

1797 c⁄° * 
v¨_«me
;

1799 
	`P¨£NameVÆue
(
h
->
ªq_buf
 + h->
ªq_c⁄ã¡off
, h->
ªq_c⁄ã¡Àn
, &
d©a
, 0);

1802 
v¨_«me
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "varName");

1804 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "QuîySèãV¨übÀ(%.40s)\n", 
v¨_«me
);

1806 if(!
v¨_«me
)

1808 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

1810 if(
	`°rcmp
(
v¨_«me
, "ConnectionStatus") == 0)

1812 
bodyÀn
;

1813 
bodyÀn
 = 
	`¢¥ötf
(
body
, (body), 
ª•
,

1814 
a˘i⁄
, "urn:schemas-upnp-org:control-1-0",

1815 "C⁄√˘ed", 
a˘i⁄
);

1816 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
body
, 
bodyÀn
);

1820 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "%s: Unknown: %s\n", 
a˘i⁄
, 
v¨_«me
?var_name:"");

1821 
	`SﬂpEº‹
(
h
, 404, "Invalid Var");

1824 
	`CÀ¨NameVÆueLi°
(&
d©a
);

1825 
	}
}

1828 
	$SamsungGëFótuªLi°
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

1830 c⁄° 
ª•
[] =

1844 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
ª•
, (resp)-1);

1845 
	}
}

1848 
	$SamsungSëBookm¨k
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
)

1850 c⁄° 
ª•
[] =

1855 
NameVÆueP¨£rD©a
 
d©a
;

1856 *
Obje˘ID
, *
PosSec⁄d
;

1858 
	`P¨£NameVÆue
(
h
->
ªq_buf
 + h->
ªq_c⁄ã¡off
, h->
ªq_c⁄ã¡Àn
, &
d©a
, 0);

1859 
Obje˘ID
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "ObjectID");

1860 
PosSec⁄d
 = 
	`GëVÆueFromNameVÆueLi°
(&
d©a
, "PosSecond");

1861 if–
Obje˘ID
 && 
PosSec⁄d
 )

1863 
ªt
;

1864 
ªt
 = 
	`sql_exec
(
db
, "INSERT OR REPLACE into BOOKMARKS"

1866 "((£À˘ DETAIL_ID from OBJECTS whîêOBJECT_ID = '%q'), %q)", 
Obje˘ID
, 
PosSec⁄d
);

1867 if–
ªt
 !
SQLITE_OK
 )

1868 
	`DPRINTF
(
E_WARN
, 
L_METADATA
, "Eº‹ sëtög bookm¨k %†⁄ Obje˘ID='%s'\n", 
PosSec⁄d
, 
Obje˘ID
);

1869 
	`BuûdSídAndClo£SﬂpRe•
(
h
, 
ª•
, (resp)-1);

1872 
	`SﬂpEº‹
(
h
, 402, "Invalid Args");

1874 
	`CÀ¨NameVÆueLi°
(&
d©a
);

1875 
	}
}

1879 c⁄° * 
	mmëhodName
;

1880 (*
	mmëhodIm∂
)(
	mu≤phâp
 *, const *);

1882 
	gsﬂpMëhods
[] =

1884 { "QuîySèãV¨übÀ", 
QuîySèãV¨übÀ
},

1885 { "Brow£", 
Brow£C⁄ã¡Dúe˘‹y
},

1886 { "Sórch", 
SórchC⁄ã¡Dúe˘‹y
},

1887 { "GëSórchC≠abûôõs", 
GëSórchC≠abûôõs
},

1888 { "GëS‹tC≠abûôõs", 
GëS‹tC≠abûôõs
},

1889 { "GëSy°emUpd©eID", 
GëSy°emUpd©eID
},

1890 { "GëPrŸocﬁInfo", 
GëPrŸocﬁInfo
},

1891 { "GëCuºítC⁄√˘i⁄IDs", 
GëCuºítC⁄√˘i⁄IDs
},

1892 { "GëCuºítC⁄√˘i⁄Info", 
GëCuºítC⁄√˘i⁄Info
},

1893 { "IsAuth‹ized", 
IsAuth‹izedVÆid©ed
},

1894 { "IsVÆid©ed", 
IsAuth‹izedVÆid©ed
},

1895 { "X_GëFótuªLi°", 
SamsungGëFótuªLi°
},

1896 { "X_SëBookm¨k", 
SamsungSëBookm¨k
},

1901 
	$ExecuãSﬂpA˘i⁄
(
u≤phâp
 * 
h
, c⁄° * 
a˘i⁄
, 
n
)

1903 * 
p
;

1905 
p
 = 
	`°rchr
(
a˘i⁄
, '#');

1906 if(
p
)

1908 
i
 = 0;

1909 
Àn
;

1910 
mëhodÀn
;

1911 * 
p2
;

1912 
p
++;

1913 
p2
 = 
	`°rchr
(
p
, '"');

1914 if(
p2
)

1915 
mëhodÀn
 = 
p2
 - 
p
;

1917 
mëhodÀn
 = 
n
 - (
p
 - 
a˘i⁄
);

1918 
	`DPRINTF
(
E_DEBUG
, 
L_HTTP
, "SﬂpMëhod: %.*s\n", 
mëhodÀn
, 
p
);

1919 
sﬂpMëhods
[
i
].
mëhodName
)

1921 
Àn
 = 
	`°æí
(
sﬂpMëhods
[
i
].
mëhodName
);

1922 if(
	`°∫cmp
(
p
, 
sﬂpMëhods
[
i
].
mëhodName
, 
Àn
) == 0)

1924 
sﬂpMëhods
[
i
].
	`mëhodIm∂
(
h
, sﬂpMëhods[i].
mëhodName
);

1927 
i
++;

1930 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "SﬂpMëhod: Unknown: %.*s\n", 
mëhodÀn
, 
p
);

1933 
	`SﬂpEº‹
(
h
, 401, "Invalid Action");

1934 
	}
}

1955 
	$SﬂpEº‹
(
u≤phâp
 * 
h
, 
îrCode
, c⁄° * 
îrDesc
)

1957 c⁄° 
ª•
[] =

1975 
body
[2048];

1976 
bodyÀn
;

1978 
	`DPRINTF
(
E_WARN
, 
L_HTTP
, "Rëu∫ög UPnPEº‹ %d: %s\n", 
îrCode
, 
îrDesc
);

1979 
bodyÀn
 = 
	`¢¥ötf
(
body
, (body), 
ª•
, 
îrCode
, 
îrDesc
);

1980 
	`BuûdRe•2_u≤phâp
(
h
, 500, "I¡î«»Sîvî Eº‹", 
body
, 
bodyÀn
);

1981 
	`SídRe•_u≤phâp
(
h
);

1982 
	`Clo£Sockë_u≤phâp
(
h
);

1983 
	}
}

	@upnpsoap.h

21 #i‚de‡
__UPNPSOAP_H__


22 
	#__UPNPSOAP_H__


	)

24 
	#DEFAULT_RESP_SIZE
 131072

	)

25 
	#MAX_RESPONSE_SIZE
 2097152

	)

27 
	#CONTENT_DIRECTORY_SCHEMAS
 \

30 " xm s=\"u∫:schemas-u≤p-‹g:mëad©a-1-0/DIDL-Lôe/\""

	)

31 
	#DLNA_NAMESPACE
 \

32 " xm s:d a=\"u∫:schemas-d a-‹g:mëad©a-1-0/\""

	)

33 
	#PV_NAMESPACE
 \

34 " xm s:pv=\"hâp://www.pv.com/pvns/\""

	)

36 
	#FLAG_FREE_OBJECT_ID
 0x40000000

	)

37 
	#FLAG_ROOT_CONTAINER
 0x80000000

	)

39 
	sRe•⁄£


41 
u≤phâp
 *
	mªq
;

42 
°rög_s
 *
	m°r
;

43 
	m°¨t
;

44 
	mªtu∫ed
;

45 
	mªque°ed
;

46 
	miÁ˚
;

47 
uöt32_t
 
	mfûãr
;

48 
uöt32_t
 
	mÊags
;

49 
˛õ¡_ty≥s
 
	m˛õ¡
;

55 
ExecuãSﬂpA˘i⁄
(
u≤phâp
 *, const *, );

61 
SﬂpEº‹
(
u≤phâp
 * 
h
, 
îrCode
, c⁄° * 
îrDesc
);

	@utils.c

18 
	~"c⁄fig.h
"

20 
	~<°dio.h
>

21 
	~<˘y≥.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<sys/∑øm.h
>

25 
	~<sys/°©.h
>

26 
	~<uni°d.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

29 
	~<f˙é.h
>

30 
	~<î∫o.h
>

32 
	~"möid ©y≥s.h
"

33 
	~"u≤pglobÆv¨s.h
"

34 
	~"log.h
"

36 
ölöe
 

37 
	$°rˇtf
(
°rög_s
 *
°r
, c⁄° *
fmt
, ...)

39 
ªt
;

40 
size
;

41 
va_li°
 
≠
;

43 i‡(
°r
->
off
 >°r->
size
)

46 
	`va_°¨t
(
≠
, 
fmt
);

47 
size
 = 
°r
->sizê- så->
off
;

48 
ªt
 = 
	`v¢¥ötf
(
°r
->
d©a
 + så->
off
, 
size
, 
fmt
, 
≠
);

49 
°r
->
off
 +
	`MIN
(
ªt
, 
size
);

50 
	`va_íd
(
≠
);

52  
ªt
;

53 
	}
}

55 
ölöe
 

56 
	$°∫˝yt
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

58 
	`°∫˝y
(
d°
, 
§c
, 
Àn
);

59 
d°
[
Àn
-1] = '\0';

60 
	}
}

62 
ölöe
 

63 
	$xa•rötf
(**
°Ω
, *
fmt
, ...)

65 
va_li°
 
¨gs
;

66 
ªt
;

68 
	`va_°¨t
(
¨gs
, 
fmt
);

69 
ªt
 = 
	`va•rötf
(
°Ω
, 
fmt
, 
¨gs
);

70 
	`va_íd
(
¨gs
);

71 if–
ªt
 < 0 )

73 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "xasprintf:állocation failed\n");

74 *
°Ω
 = 
NULL
;

76  
ªt
;

77 
	}
}

80 
	$íds_wôh
(c⁄° * 
hay°ack
, c⁄° * 
√edÀ
)

82 c⁄° * 
íd
;

83 
∆í
 = 
	`°æí
(
√edÀ
);

84 
hÀn
 = 
	`°æí
(
hay°ack
);

86 if–
∆í
 > 
hÀn
 )

88 
íd
 = 
hay°ack
 + 
hÀn
 - 
∆í
;

90  (
	`°rˇ£cmp
(
íd
, 
√edÀ
) ? 0 : 1);

91 
	}
}

94 
	$åim
(*
°r
)

96 
i
;

97 
Àn
;

99 i‡(!
°r
)

100 (
NULL
);

102 
Àn
 = 
	`°æí
(
°r
);

103 
i
=
Àn
-1; i >0 && 
	`is•a˚
(
°r
[i]); i--)

105 
°r
[
i
] = '\0';

106 
Àn
--;

108 
	`is•a˚
(*
°r
))

110 
°r
++;

111 
Àn
--;

114 i‡(
°r
[0] ='"' && så[
Àn
-1] == '"')

116 
°r
[0] = '\0';

117 
°r
[
Àn
-1] = '\0';

118 
°r
++;

121  
°r
;

122 
	}
}

126 
	$°r°rc
(c⁄° *
s
, c⁄° *
p
, c⁄° 
t
)

128 *
íd±r
;

129 
size_t
 
¶í
, 
∂í
;

131 
íd±r
 = 
	`°rchr
(
s
, 
t
);

132 i‡(!
íd±r
)

133  
	`°r°r
(
s
, 
p
);

135 
∂í
 = 
	`°æí
(
p
);

136 
¶í
 = 
íd±r
 - 
s
;

137 
¶í
 >
∂í
)

139 i‡(*
s
 =*
p
 && 
	`°∫cmp
(s+1,Ö+1, 
∂í
-1) == 0)

140  (*)
s
;

141 
s
++;

142 
¶í
--;

145  
NULL
;

146 
	}
}

149 
	$°rˇ£°rc
(c⁄° *
s
, c⁄° *
p
, c⁄° 
t
)

151 *
íd±r
;

152 
size_t
 
¶í
, 
∂í
;

154 
íd±r
 = 
	`°rchr
(
s
, 
t
);

155 i‡(!
íd±r
)

156  
	`°rˇ£°r
(
s
, 
p
);

158 
∂í
 = 
	`°æí
(
p
);

159 
¶í
 = 
íd±r
 - 
s
;

160 
¶í
 >
∂í
)

162 i‡(*
s
 =*
p
 && 
	`°∫ˇ£cmp
(s+1,Ö+1, 
∂í
-1) == 0)

163  (*)
s
;

164 
s
++;

165 
¶í
--;

168  
NULL
;

169 
	}
}

172 
	$modifySåög
(* 
°rög
, c⁄° * 
bef‹e
, c⁄° * 
a·î
)

174 
ﬁdÀn
, 
√wÀn
, 
chg˙t
 = 0;

175 *
s
, *
p
;

177 
ﬁdÀn
 = 
	`°æí
(
bef‹e
);

178 
√wÀn
 = 
	`°æí
(
a·î
);

179 if–
√wÀn
 > 
ﬁdÀn
 )

181 
s
 = 
°rög
;

182  (
p
 = 
	`°r°r
(
s
, 
bef‹e
)) )

184 
chg˙t
++;

185 
s
 = 
p
+
ﬁdÀn
;

187 
s
 = 
	`ªÆloc
(
°rög
, 
	`°æí
(°rög)+((
√wÀn
-
ﬁdÀn
)*
chg˙t
)+1);

189 if–
s
 )

190 
°rög
 = 
s
;

192  
°rög
;

195 
s
 = 
°rög
;

196  
s
 )

198 
p
 = 
	`°rˇ£°r
(
s
, 
bef‹e
);

199 if–!
p
 )

200  
°rög
;

201 
	`memmove
(
p
 + 
√wÀn
,Ö + 
ﬁdÀn
, 
	`°æí
(p + oldlen) + 1);

202 
	`mem˝y
(
p
, 
a·î
, 
√wÀn
);

203 
s
 = 
p
 + 
√wÀn
;

206  
°rög
;

207 
	}
}

210 
	$esˇ≥_èg
(c⁄° *
èg
, 
f‹˚_Æloc
)

212 *
esc_èg
 = 
NULL
;

214 if–
	`°rchr
(
èg
, '&') || strchr(tag, '<') || strchr(tag, '>') || strchr(tag, '"') )

216 
esc_èg
 = 
	`°rdup
(
èg
);

217 
esc_èg
 = 
	`modifySåög
(esc_tag, "&", "&amp;amp;");

218 
esc_èg
 = 
	`modifySåög
(esc_tag, "<", "&amp;lt;");

219 
esc_èg
 = 
	`modifySåög
(esc_tag, ">", "&amp;gt;");

220 
esc_èg
 = 
	`modifySåög
(esc_tag, "\"", "&amp;quot;");

222 if–
f‹˚_Æloc
 )

223 
esc_èg
 = 
	`°rdup
(
èg
);

225  
esc_èg
;

226 
	}
}

229 
	$°rù_ext
(* 
«me
)

231 * 
≥riod
;

233 
≥riod
 = 
	`°ºchr
(
«me
, '.');

234 if–
≥riod
 )

235 *
≥riod
 = '\0';

236 
	}
}

240 
	$make_dú
(* 
∑th
, 
mode_t
 
mode
)

242 * 
s
 = 
∑th
;

243 
c
;

244 
°©
 
°
;

247 
c
 = '\0';

251 *
s
 == '/')

252 ++
s
;

255 *
s
) {

256 i‡(*
s
 == '/') {

258 ++
s
;

259 } *
s
 == '/');

260 
c
 = *
s
;

261 *
s
 = '\0';

264 ++
s
;

267 i‡(
	`mkdú
(
∑th
, 
mode
) < 0) {

270 i‡(
î∫o
 !
EEXIST
 || (
	`°©
(
∑th
, &
°
Ë< 0 || !
	`S_ISDIR
(°.
°_mode
))) {

271 
	`DPRINTF
(
E_WARN
, 
L_GENERAL
, "make_dú: c™nŸ cª©êdúe˘‹y '%s'\n", 
∑th
);

272 i‡(
c
)

273 *
s
 = 
c
;

277 i‡(!
c
)

281 *
s
 = 
c
;

284 
	}
}

288 
	$DJBHash
(c⁄° *
°r
, 
Àn
)

290 
hash
 = 5381;

291 
i
 = 0;

293 
i
 = 0; i < 
Àn
; 
°r
++, i++)

295 
hash
 = ((hash << 5Ë+ hashË+ (*
°r
);

298  
hash
;

299 
	}
}

302 
	$mime_to_ext
(c⁄° * 
mime
)

304  *
mime
 )

308 if–
	`°rcmp
(
mime
+6, "mpeg") == 0 )

310 if–
	`°rcmp
(
mime
+6, "mp4") == 0 )

312 if–
	`°rcmp
(
mime
+6, "x-ms-wma") == 0 )

314 if–
	`°rcmp
(
mime
+6, "x-flac") == 0 )

316 if–
	`°rcmp
(
mime
+6, "flac") == 0 )

318 if–
	`°rcmp
(
mime
+6, "x-wav") == 0 )

320 if–
	`°∫cmp
(
mime
+6, "L16", 3) == 0 )

322 if–
	`°rcmp
(
mime
+6, "3gpp") == 0 )

324 if–
	`°rcmp
(
mime
, "application/ogg") == 0 )

328 if–
	`°rcmp
(
mime
+6, "avi") == 0 )

330 if–
	`°rcmp
(
mime
+6, "divx") == 0 )

332 if–
	`°rcmp
(
mime
+6, "x-msvideo") == 0 )

334 if–
	`°rcmp
(
mime
+6, "mpeg") == 0 )

336 if–
	`°rcmp
(
mime
+6, "mp4") == 0 )

338 if–
	`°rcmp
(
mime
+6, "x-ms-wmv") == 0 )

340 if–
	`°rcmp
(
mime
+6, "x-matroska") == 0 )

342 if–
	`°rcmp
(
mime
+6, "x-mkv") == 0 )

344 if–
	`°rcmp
(
mime
+6, "x-flv") == 0 )

346 if–
	`°rcmp
(
mime
+6, "vnd.dlna.mpeg-tts") == 0 )

348 if–
	`°rcmp
(
mime
+6, "quicktime") == 0 )

350 if–
	`°rcmp
(
mime
+6, "3gpp") == 0 )

352 if–
	`°rcmp
(
mime
+6, "x-rmvb") == 0 )

354 if–
	`°∫cmp
(
mime
+6, "x-tivo-mpeg", 11) == 0 )

358 if–
	`°rcmp
(
mime
+6, "jpeg") == 0 )

360 if–
	`°rcmp
(
mime
+6, "png") == 0 )

362 if–
	`°rcmp
(
mime
+6, "gif") == 0 )

364 if–
	`°rcmp
(
mime
+6, "tif") == 0 )

366 if–
	`°rcmp
(
mime
+6, "bmp") == 0 )

373 
	}
}

376 
	$is_video
(c⁄° * 
fûe
)

378  (
	`íds_wôh
(
fûe
, ".mpg") ||Énds_with(file, ".mpeg") ||

379 
	`íds_wôh
(
fûe
, ".avi") ||Énds_with(file, ".divx") ||

380 
	`íds_wôh
(
fûe
, ".asf") ||Énds_with(file, ".wmv") ||

381 
	`íds_wôh
(
fûe
, ".mp4") ||Énds_with(file, ".m4v") ||

382 
	`íds_wôh
(
fûe
, ".mts") ||Énds_with(file, ".m2ts") ||

383 
	`íds_wôh
(
fûe
, ".m2t") ||Énds_with(file, ".mkv") ||

384 
	`íds_wôh
(
fûe
, ".vob") ||Énds_with(file, ".ts") ||

385 
	`íds_wôh
(
fûe
, ".flv") ||Énds_with(file, ".xvid") ||

386 #ifde‡
TIVO_SUPPORT


387 
	`íds_wôh
(
fûe
, ".TiVo") ||

389 
	`íds_wôh
(
fûe
, ".mov") ||Énds_with(file, ".3gp") ||

390 
	`íds_wôh
(
fûe
, ".rmvb") ||Énds_with(file,".rm"));

391 
	}
}

394 
	$is_audio
(c⁄° * 
fûe
)

396  (
	`íds_wôh
(
fûe
, ".mp3") ||Énds_with(file, ".flac") ||

397 
	`íds_wôh
(
fûe
, ".wma") ||Énds_with(file, ".asf") ||

398 
	`íds_wôh
(
fûe
, ".fla") ||Énds_with(file, ".flc") ||

399 
	`íds_wôh
(
fûe
, ".m4a") ||Énds_with(file, ".aac") ||

400 
	`íds_wôh
(
fûe
, ".mp4") ||Énds_with(file, ".m4p") ||

401 
	`íds_wôh
(
fûe
, ".wav") ||Énds_with(file, ".ogg") ||

402 
	`íds_wôh
(
fûe
, ".pcm") ||Énds_with(file, ".3gp"));

403 
	}
}

406 
	$is_image
(c⁄° * 
fûe
)

408  (
	`íds_wôh
(
fûe
, ".jpg") ||Énds_with(file, ".jpeg") ||

409 
	`íds_wôh
(
fûe
, ".png") ||Énds_with(file, ".bmp") ||

410 
	`íds_wôh
(
fûe
, ".gif") ||Énds_with(file, ".tiff") ||

411 
	`íds_wôh
(
fûe
, ".tif"));

412 
	}
}

415 
	$is_∂ayli°
(c⁄° * 
fûe
)

417  (
	`íds_wôh
(
fûe
, ".m3u") ||Énds_with(file, ".pls"));

418 
	}
}

421 
	$is_Æbum_¨t
(c⁄° * 
«me
)

423 
Æbum_¨t_«me_s
 * 
Æbum_¨t_«me
;

426  
Æbum_¨t_«me
 = 
Æbum_¨t_«mes
;álbum_¨t_«me;álbum_¨t_«mêÆbum_¨t_«me->
√xt
 )

428 if–
Æbum_¨t_«me
->
wûdˇrd
 )

430 if–
	`°∫cmp
(
Æbum_¨t_«me
->
«me
,Çame, 
	`°æí
(album_art_name->name)) == 0 )

435 if–
	`°rcmp
(
Æbum_¨t_«me
->
«me
,Çame) == 0 )

440  (
Æbum_¨t_«me
 ? 1 : 0);

441 
	}
}

444 
	$ªsﬁve_unknown_ty≥
(c⁄° * 
∑th
, 
medü_ty≥s
 
dú_ty≥
)

446 
°©
 
íåy
;

447 
ty≥
 = 
TYPE_UNKNOWN
;

448 
°r_buf
[
PATH_MAX
];

449 
ssize_t
 
Àn
;

451 if–
	`l°©
(
∑th
, &
íåy
) == 0 )

453 if–
	`S_ISLNK
(
íåy
.
°_mode
) )

455 if–(
Àn
 = 
	`ªadlök
(
∑th
, 
°r_buf
, 
PATH_MAX
-1)) > 0 )

457 
°r_buf
[
Àn
] = '\0';

459 if–
	`°∫cmp
(
∑th
, 
°r_buf
, 
	`°æí
(str_buf)) == 0 )

461 
	`DPRINTF
(
E_DEBUG
, 
L_GENERAL
, "Ign‹ögÑecursivêsymbﬁi¯lök: %†(%s)\n", 
∑th
, 
°r_buf
);

462  
ty≥
;

465 
	`°©
(
∑th
, &
íåy
);

468 if–
	`S_ISDIR
(
íåy
.
°_mode
) )

470 
ty≥
 = 
TYPE_DIR
;

472 if–
	`S_ISREG
(
íåy
.
°_mode
) )

474  
dú_ty≥
 )

476 
ALL_MEDIA
:

477 if–
	`is_image
(
∑th
) ||

478 
	`is_audio
(
∑th
) ||

479 
	`is_video
(
∑th
) ||

480 
	`is_∂ayli°
(
∑th
) )

481 
ty≥
 = 
TYPE_FILE
;

483 
TYPE_AUDIO
:

484 if–
	`is_audio
(
∑th
) ||

485 
	`is_∂ayli°
(
∑th
) )

486 
ty≥
 = 
TYPE_FILE
;

488 
TYPE_VIDEO
:

489 if–
	`is_video
(
∑th
) )

490 
ty≥
 = 
TYPE_FILE
;

492 
TYPE_IMAGES
:

493 if–
	`is_image
(
∑th
) )

494 
ty≥
 = 
TYPE_FILE
;

501  
ty≥
;

502 
	}
}

	@utils.h

24 #i‚de‡
__UTILS_H__


25 
	#__UTILS_H__


	)

27 
	~"möid ©y≥s.h
"

30 
°rˇtf
(
°rög_s
 *
°r
, *
fmt
, ...);

31 
°∫˝yt
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

32 
ölöe
 
xa•rötf
(**
°Ω
, *
fmt
, ...);

33 
íds_wôh
(c⁄° * 
hay°ack
, c⁄° * 
√edÀ
);

34 *
åim
(*
°r
);

35 *
°r°rc
(c⁄° *
s
, c⁄° *
p
, c⁄° 
t
);

36 *
°rˇ£°rc
(c⁄° *
s
, c⁄° *
p
, c⁄° 
t
);

37 *
modifySåög
(* 
°rög
, c⁄° * 
bef‹e
, c⁄° * 
a·î
);

38 *
esˇ≥_èg
(c⁄° *
èg
, 
f‹˚_Æloc
);

39 
°rù_ext
(* 
«me
);

42 
is_video
(c⁄° * 
fûe
);

43 
is_audio
(c⁄° * 
fûe
);

44 
is_image
(c⁄° * 
fûe
);

45 
is_∂ayli°
(c⁄° * 
fûe
);

46 
is_Æbum_¨t
(c⁄° * 
«me
);

47 
ªsﬁve_unknown_ty≥
(c⁄° * 
∑th
, 
medü_ty≥s
 
dú_ty≥
);

48 c⁄° *
mime_to_ext
(c⁄° * 
mime
);

51 
make_dú
(* 
∑th
, 
mode_t
 
mode
);

52 
DJBHash
(c⁄° *
°r
, 
Àn
);

	@uuid.c

26 
	~"c⁄fig.h
"

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<time.h
>

30 
	~<f˙é.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/time.h
>

35 
	~<î∫o.h
>

36 #i‡
HAVE_MACH_MACH_TIME_H


37 
	~<mach/mach_time.h
>

38 #ñi‡
HAVE_CLOCK_GETTIME_SYSCALL


39 
	~<sys/sysˇŒ.h
>

42 
	~"uuid.h
"

43 
	~"gëiÁddr.h
"

44 
	~"log.h
"

46 
uöt32_t
 
	g˛ock_£q
;

47 c⁄° 
uöt32_t
 
	g˛ock_£q_max
 = 0x3fff;

48 
	g˛ock_£q_öôülized
;

51 
	$m⁄Ÿ⁄ic_us
()

53 
time•ec
 
ts
;

55 #i‡
HAVE_CLOCK_GETTIME


56 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

57 #ñi‡
HAVE_CLOCK_GETTIME_SYSCALL


58 
	`sysˇŒ
(
__NR_˛ock_gëtime
, 
CLOCK_MONOTONIC
, &
ts
);

59 #ñi‡
HAVE_MACH_MACH_TIME_H


60  
	`mach_absﬁuã_time
();

62 
timevÆ
 
tv
;

63 
	`gëtimeofday
(&
tv
, 0);

64 
	`TIMEVAL_TO_TIMESPEC
(&
tv
, &
ts
);

66  
ts
.
tv_£c
 * 1000000ULL +Ås.
tv_n£c
 / 1000;

67 
	}
}

70 
	$ªad_boŸid_node
(*
buf
, 
size_t
 
size
)

72 
FILE
 *
boŸ_id
;

74 if(
size
 != 6)

77 
boŸ_id
 = 
	`f›í
("/proc/sys/kernel/random/boot_id", "r");

78 if(!
boŸ_id
)

80 if((
	`f£ek
(
boŸ_id
, 24, 
SEEK_SET
) < 0) ||

81 (
	`fsˇnf
(
boŸ_id
, "%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx",

82 &
buf
[0], &buf[1], &buf[2], &buf[3], &buf[4], &buf[5]) != 6))

84 
	`f˛o£
(
boŸ_id
);

88 
	`f˛o£
(
boŸ_id
);

90 
	}
}

93 
	$ªad_øndom_byãs
(*
buf
, 
size_t
 
size
)

95 
i
;

96 
pid_t
 
pid
;

98 
i
 = 
	`›í
("/dev/uøndom", 
O_RDONLY
);

99 if(
i
 >= 0)

101 if(
	`ªad
(
i
, 
buf
, 
size
));

102 
	`˛o£
(
i
);

107 
	`§™d
(
	`m⁄Ÿ⁄ic_us
());

108 
pid
 = 
	`gëpid
();

111 
i
 = 0; i < 
size
; i++)

112 
buf
[
i
] ^
	`ønd
() >> 5;

113 if(
pid
 == 0)

115 
	`§™d
(
pid
);

116 
pid
 = 0;

118 
	}
}

121 
	$öô_˛ock£q
()

123 
buf
[4];

125 
	`ªad_øndom_byãs
(
buf
, 4);

126 
	`mem˝y
(&
˛ock_£q
, &
buf
, (clock_seq));

127 
˛ock_£q
 &
˛ock_£q_max
;

128 
˛ock_£q_öôülized
 = 1;

129 
	}
}

132 
	$gíî©e_uuid
(
uuid_out
[16])

134 
uöt64_t
 
œ°_time_Æl
;

135 
˛ock_£q_°¨ãd
;

136 
œ°_node
[6] = { 0, 0, 0, 0, 0, 0 };

138 
time•ec
 
ts
;

139 
uöt64_t
 
time_Æl
;

140 
öc_˛ock_£q
 = 0;

142 
mac
[6];

143 
mac_îr‹
;

145 
	`mem£t
(&
mac
, '\0', (mac));

148 
mac_îr‹
 = 
	`gësyshwaddr
((*)
mac
, (mac));

150 if(!
mac_îr‹
)

152 
	`mem˝y
(&
uuid_out
[10], 
mac
, 
ETH_ALEN
);

157 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "CouldÇot find MAC. Use bootid'sÇodeID.\n");

158 if–
	`ªad_boŸid_node
(&
uuid_out
[10], 6) != 0)

160 
	`DPRINTF
(
E_INFO
, 
L_HTTP
, "bootidÇodeÇot successfullyÑead.\n");

161 
	`ªad_øndom_byãs
(&
uuid_out
[10], 6);

165 if(
	`memcmp
(
œ°_node
, 
uuid_out
+10, 6) != 0)

167 
öc_˛ock_£q
 = 1;

168 
	`mem˝y
(
œ°_node
, 
uuid_out
+10, 6);

176 #i‡
HAVE_CLOCK_GETTIME


177 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

178 #ñi‡
HAVE_CLOCK_GETTIME_SYSCALL


179 
	`sysˇŒ
(
__NR_˛ock_gëtime
, 
CLOCK_REALTIME
, &
ts
);

181 
timevÆ
 
tv
;

182 
	`gëtimeofday
(&
tv
, 0);

183 
	`TIMEVAL_TO_TIMESPEC
(&
tv
, &
ts
);

185 
time_Æl
 = ((
uöt64_t
)
ts
.
tv_£c
Ë* (
NSEC_PER_SEC
 / 100);

186 
time_Æl
 +
ts
.
tv_n£c
 / 100;

189 
time_Æl
 +12219292800000ULL * (
NSEC_PER_MSEC
 / 100);

190 
time_Æl
 &= 0x0fffffffffffffffULL;

193 if(!
˛ock_£q_öôülized
)

195 
	`öô_˛ock£q
();

196 
˛ock_£q_°¨ãd
 = 
˛ock_£q
;

200 if(
öc_˛ock_£q
 || 
time_Æl
 <
œ°_time_Æl
)

202 
˛ock_£q
 = (˛ock_£q + 1Ë& 
˛ock_£q_max
;

203 if(
˛ock_£q
 =
˛ock_£q_°¨ãd
)

205 
˛ock_£q
 = (˛ock_£q - 1Ë& 
˛ock_£q_max
;

209 
˛ock_£q_°¨ãd
 = 
˛ock_£q
;

211 
œ°_time_Æl
 = 
time_Æl
;

214 
uuid_out
[3] = (
uöt8_t
)
time_Æl
;

215 
uuid_out
[2] = (
uöt8_t
)(
time_Æl
 >> 8);

216 
uuid_out
[1] = (
uöt8_t
)(
time_Æl
 >> 16);

217 
uuid_out
[0] = (
uöt8_t
)(
time_Æl
 >> 24);

218 
uuid_out
[5] = (
uöt8_t
)(
time_Æl
 >> 32);

219 
uuid_out
[4] = (
uöt8_t
)(
time_Æl
 >> 40);

220 
uuid_out
[7] = (
uöt8_t
)(
time_Æl
 >> 48);

221 
uuid_out
[6] = (
uöt8_t
)(
time_Æl
 >> 56);

223 
uuid_out
[8] = 
˛ock_£q
 >> 8;

224 
uuid_out
[9] = 
˛ock_£q
 & 0xff;

227 
uuid_out
[6] = (uuid_out[6] & 0x0F) | 0x10;

229 
uuid_out
[8] = (uuid_out[8] & 0x3F) | 0x80;

232 
	}
}

237 
	$gë_uuid_°rög
(*
buf
)

239 
uuid
[16];

241 if–
	`gíî©e_uuid
(
uuid
) != 0 )

244 
	`•rötf
(
buf
, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",

245 
uuid
[0], uuid[1], uuid[2], uuid[3], uuid[4], uuid[5], uuid[6], uuid[7], uuid[8],

246 
uuid
[9], uuid[10], uuid[11], uuid[12], uuid[13], uuid[14], uuid[15]);

247 
buf
[36] = '\0';

250 
	}
}

	@uuid.h

24 #i‚de‡
__UUID_H__


25 
	#__UUID_H__


	)

27 
	#ETH_ALEN
 6

	)

28 #i‚de‡
NSEC_PER_SEC


29 
	#NSEC_PER_SEC
 1000000000L

	)

31 #i‚de‡
NSEC_PER_MSEC


32 
	#NSEC_PER_MSEC
 1000000L

	)

36 
gë_uuid_°rög
(*
buf
);

	@
1
.
0
85
1245
albumart.c
albumart.h
clients.c
clients.h
codelength.h
config.h
daemonize.c
daemonize.h
getifaddr.c
getifaddr.h
icons.c
image_utils.c
image_utils.h
inotify.c
inotify.h
libav.h
linux/inotify-syscalls.h
linux/inotify.h
log.c
log.h
metadata.c
metadata.h
minidlna.c
minidlnapath.h
minidlnatypes.h
minissdp.c
minissdp.h
minixml.c
minixml.h
options.c
options.h
playlist.c
playlist.h
scanner.c
scanner.h
scanner_sqlite.h
sendfile.h
sql.c
sql.h
tagutils/misc.c
tagutils/misc.h
tagutils/tagutils-aac.c
tagutils/tagutils-aac.h
tagutils/tagutils-asf.c
tagutils/tagutils-asf.h
tagutils/tagutils-flc.c
tagutils/tagutils-flc.h
tagutils/tagutils-misc.c
tagutils/tagutils-mp3.c
tagutils/tagutils-mp3.h
tagutils/tagutils-ogg.c
tagutils/tagutils-ogg.h
tagutils/tagutils-pcm.c
tagutils/tagutils-pcm.h
tagutils/tagutils-plist.c
tagutils/tagutils-wav.c
tagutils/tagutils-wav.h
tagutils/tagutils.c
tagutils/tagutils.h
tagutils/textutils.c
tagutils/textutils.h
testupnpdescgen.c
tivo_beacon.c
tivo_beacon.h
tivo_commands.c
tivo_commands.h
tivo_utils.c
tivo_utils.h
ubus.c
upnpdescgen.c
upnpdescgen.h
upnpevents.c
upnpevents.h
upnpglobalvars.c
upnpglobalvars.h
upnphttp.c
upnphttp.h
upnpreplyparse.c
upnpreplyparse.h
upnpsoap.c
upnpsoap.h
utils.c
utils.h
uuid.c
uuid.h
